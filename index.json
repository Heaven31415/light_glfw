{"repository_name":"github.com/Heaven31415/light_glfw","body":"# light_glfw\n\n[![Build Status](https://travis-ci.org/Heaven31415/light_glfw.svg?branch=master)](https://travis-ci.org/Heaven31415/light_glfw)\n\nLight GLFW is a very simple wrapper around GLFW3 library. I had a few simple goals in mind when I was creating it:\n* Don't force OOP API on things which weren't supposed to be OOP.\n* Make API as close to the original as it's possible, so someone experienced with GLFW can use their knowledge to good use.\nAlmost every struct, enum or function is using the original name (of course I'm using snake_case instead of camelCase). There are a few exceptions, but they were necessary.\n* Make API as convenient as it's possible, introducing a small number of new ideas:\n  - Return and get a bool instead of int32 with 0 and 1 value.\n  - Return and get an enum instead of int32 with proper values.\n  - Return and get a string instead of a pointer to uint8.\n  - Return and get light wrappers for structs instead of pointers.\n  - Return and get arrays instead of a pointer with size variable.\n  - Set callbacks using blocks with optional context instead of raw C functions.\n\n## Documentation\n\n- [API Documentation](https://heaven31415.github.io/light_glfw/GLFW.html)\n\n## Status\n\nThis shard is still under heavy development. Many essential things are not ready including documentation, tutorials, tests, examples. Every struct, enum or function has an already working wrapper, but right now I cannot guarantee that they won't change. Your application may break after update, be aware of that.\n\n### Tests\n\n- [x] clipboard\n- [x] cursor\n- [x] empty\n- [ ] events\n- [x] gamma\n- [ ] glfwinfo\n- [x] icon\n- [ ] iconify\n- [ ] joysticks\n- [x] monitors\n- [x] msaa\n- [x] reopen\n- [ ] sharing\n- [x] tearing\n- [x] threads\n- [x] timeout\n- [x] title\n- [ ] vulkan\n- [x] windows\n\n## Installation\n\nIn order to use it, you need to install `light_glfw` shard and `GLFW3` library (at least 3.2.1 version).\n\n### Shard Installation:\n\n- Add this code to your application's `shard.yml`:\n\n```yaml\ndependencies:\n  light_glfw:\n    github: Heaven31415/light_glfw\n```\n\n- Using CLI, go to your application's root directory (where your `shard.yml` file is located)\n\n- Run following command: `shards install`\n\n- If everything went well, you should see something like this:\n\n```\nFetching https://github.com/Heaven31415/light_glfw.git\nInstalling light_glfw (0.1.0 at HEAD)\n```\n\n### Library Installation\n\n- Debian and Ubuntu: `sudo apt install libglfw3-dev`\n\n## Example\n```crystal\nrequire \"light_glfw\"\n\nGLFW.set_error_callback do |error, msg|\n  puts \"Error: `#{error}` msg: `#{msg}`\"\nend\n\ndef mouse_button_callback(window : GLFW::Window, button : GLFW::MouseButton, action : GLFW::Action, mods : GLFW::Mod)\n  case action\n  when .press?\n    puts \"#{button} is pressed\"\n  when .release?\n    puts \"#{button} is released\"\n  end\nend\n\nif GLFW.init\n  GLFW.window_hint_client_api(GLFW::ClientApi::OpenGL)\n  GLFW.window_hint_context_version_major(3)\n  GLFW.window_hint_context_version_minor(0)\n  GLFW.window_hint_resizable(false)\n\n  if window = GLFW.create_window(640, 480, \"Window\")\n\n    GLFW.make_context_current(window)\n\n    GLFW.set_mouse_button_callback(window, mouse_button_callback)\n\n    GLFW.set_key_callback(window) do |window, key, scancode, action, mods|\n      next if action != GLFW::Action::Press\n\n      case key\n      when .escape?\n        GLFW.set_window_should_close(window, true)\n      end\n    end\n\n    while !GLFW.window_should_close(window)\n      GLFW.poll_events\n      GLFW.swap_buffers(window)\n    end\n  \n    GLFW.destroy_window(window)\n  end\n\n  GLFW.terminate\nend\n```\n\n## Usage\n\n```crystal\nrequire \"light_glfw\"\n```\n\n## Contributing\n\n1. Fork it (<https://github.com/Heaven31415/light_glfw/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [github](https://github.com/Heaven31415) Heaven31415 - creator, maintainer\n","program":{"html_id":"github.com/Heaven31415/light_glfw/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"github.com/Heaven31415/light_glfw","program":true,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/Heaven31415/light_glfw/GLFW","path":"GLFW.html","kind":"module","full_name":"GLFW","name":"GLFW","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"enums.cr","line_number":1,"url":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr"},{"filename":"utility.cr","line_number":1,"url":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/utility.cr"},{"filename":"context/context.cr","line_number":1,"url":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/context/context.cr"},{"filename":"init/init.cr","line_number":1,"url":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/init/init.cr"},{"filename":"input/cursor.cr","line_number":1,"url":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/input/cursor.cr"},{"filename":"input/input.cr","line_number":1,"url":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/input/input.cr"},{"filename":"monitor/gamma_ramp.cr","line_number":1,"url":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/monitor/gamma_ramp.cr"},{"filename":"monitor/monitor.cr","line_number":1,"url":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/monitor/monitor.cr"},{"filename":"monitor/video_mode.cr","line_number":1,"url":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/monitor/video_mode.cr"},{"filename":"window/image.cr","line_number":1,"url":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/image.cr"},{"filename":"window/window.cr","line_number":1,"url":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr"},{"filename":"light_glfw.cr","line_number":29,"url":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/light_glfw.cr"}],"repository_name":"github.com/Heaven31415/light_glfw","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"VERSION","name":"VERSION","value":"\"0.1.0\"","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[{"id":"create_cursor(image:Image,xhot:Int32,yhot:Int32):Cursor?-class-method","html_id":"create_cursor(image:Image,xhot:Int32,yhot:Int32):Cursor?-class-method","name":"create_cursor","doc":"Creates a custom cursor.\n\nCreates a new custom cursor image that can be set for a window with\n`GLFW.set_cursor`. The cursor can be destroyed with `GLFW.destroy_cursor`.\nAny remaining cursors are destroyed by `GLFW.terminate`.\n\nThe pixels are 32-bit, little-endian, non-premultiplied RGBA, i.e. eight\nbits per channel. They are arranged canonically as packed sequential rows,\nstarting from the top-left corner.\n\nThe cursor hotspot is specified in pixels, relative to the upper-left corner\nof the cursor image. Like all other coordinate systems in GLFW, the X-axis\npoints to the right and the Y-axis points down.\n\n`Parameters:`\n\n*`image`* The desired cursor image.\n\n*`xhot`* The desired x-coordinate, in pixels, of the cursor hotspot.\n\n*`yhot`* The desired y-coordinate, in pixels, of the cursor hotspot.\n\nReturns the handle of the created cursor, or `nil` if an\nerror occurred.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized` and `GLFW::Error::PlatformError`.\n\nNOTE: This function must not be called from a callback.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 3.1.\n```\ncursor = <<-CURSOR\n.......@.......\n......@.@......\n.....@...@.....\n....@.....@....\n...@.......@...\n..@.........@..\n.@...........@.\n@.............@\n@@@@@@@@@@@@@@@\nCURSOR\n.delete('\\n')\n\nwidth, height = 15, 9\npixels = Pointer(UInt8).malloc(width * height * 4)\n\n(height * width).times do |index|\n  pixels[4 * index + 0] = (cursor[index] == '@' ? 255u8 : 0u8)\n  pixels[4 * index + 1] = (cursor[index] == '@' ? 255u8 : 0u8)\n  pixels[4 * index + 2] = (cursor[index] == '@' ? 255u8 : 0u8)\n  pixels[4 * index + 3] = (cursor[index] == '@' ? 255u8 : 0u8)\nend\n\nimage = GLFW::Image.new(width, height, pixels)\n\nif GLFW.init && (window = GLFW.create_window(640, 480, \"Window\"))\n  GLFW.make_context_current(window)\n\n  if cursor = GLFW.create_cursor(image, 7, 0)\n    GLFW.set_cursor(window, cursor)\n  end\n\n  while !GLFW.window_should_close(window)\n    GLFW.poll_events\n    GLFW.swap_buffers(window)\n  end\n\n  GLFW.terminate\nend\n```","summary":"<p>Creates a custom cursor.</p>","abstract":false,"args":[{"name":"image","doc":null,"default_value":"","external_name":"image","restriction":"Image"},{"name":"xhot","doc":null,"default_value":"","external_name":"xhot","restriction":"Int32"},{"name":"yhot","doc":null,"default_value":"","external_name":"yhot","restriction":"Int32"}],"args_string":"(image : Image, xhot : Int32, yhot : Int32) : Cursor?","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/input/input.cr#L244","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/input/input.cr#L244","def":{"name":"create_cursor","args":[{"name":"image","doc":null,"default_value":"","external_name":"image","restriction":"Image"},{"name":"xhot","doc":null,"default_value":"","external_name":"xhot","restriction":"Int32"},{"name":"yhot","doc":null,"default_value":"","external_name":"yhot","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Cursor | ::Nil","visibility":"Public","body":"ptr = LibGLFW.create_cursor(image.to_unsafe, xhot, yhot)\nptr.null? ? nil : ptr.unsafe_as(Cursor)\n"}},{"id":"create_standard_cursor(shape:CursorShape):Cursor?-class-method","html_id":"create_standard_cursor(shape:CursorShape):Cursor?-class-method","name":"create_standard_cursor","doc":"Creates a cursor with a standard shape.\n\nReturns a cursor with a standard shape, that can be set for\na window with `GLFW.set_cursor`.\n\n`Parameters:`\n\n*`shape`* One of the standard shapes.\n\nReturns a new cursor ready to use or `nil` if an\nerror occurred.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized`, `GLFW::Error::InvalidEnum`\nand `GLFW::Error::PlatformError`.\n\nNOTE: This function must not be called from a callback.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 3.1.","summary":"<p>Creates a cursor with a standard shape.</p>","abstract":false,"args":[{"name":"shape","doc":null,"default_value":"","external_name":"shape","restriction":"CursorShape"}],"args_string":"(shape : CursorShape) : Cursor?","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/input/input.cr#L270","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/input/input.cr#L270","def":{"name":"create_standard_cursor","args":[{"name":"shape","doc":null,"default_value":"","external_name":"shape","restriction":"CursorShape"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Cursor | ::Nil","visibility":"Public","body":"ptr = LibGLFW.create_standard_cursor(shape.value)\nptr.null? ? nil : ptr.unsafe_as(Cursor)\n"}},{"id":"create_window(width:Int32,height:Int32,title:String,monitor:Monitor?=nil,share:Window?=nil):Window?-class-method","html_id":"create_window(width:Int32,height:Int32,title:String,monitor:Monitor?=nil,share:Window?=nil):Window?-class-method","name":"create_window","doc":"Creates a window and its associated context.\n\nThis function creates a window and its associated OpenGL or OpenGL ES\ncontext. Most of the options controlling how the window and its context\nshould be created are specified with window hints.\n\nSuccessful creation does not change which context is current. Before you\ncan use the newly created context, you need to make it current calling \n`GLFW.make_context_current`.\n\nThe created window, framebuffer and context may differ from what you\nrequested, as not all parameters and hints are hard constraints.  \nThis includes the size of the window, especially for full screen windows.  \nTo query the actual attributes of the created window, framebuffer and context,\ncall appropriate functions like `GLFW.get_window_size` and `GLFW.get_framebuffer_size`.\n\nTo create a full screen window, you need to specify the monitor the window\nwill cover. If no monitor is specified, the window will be windowed mode.\nUnless you have a way for the user to choose a specific monitor, it is\nrecommended that you pick the primary monitor. For more information on how\nto query connected monitors, see `GLFW.get_primary_monitor` and\n`GLFW.get_monitors`.\n\nFor full screen windows, the specified size becomes the resolution of the\nwindow's desired video mode. As long as a full screen window is not\niconified, the supported video mode most closely matching the desired video\nmode is set for the specified monitor.\n\nOnce you have created the window, you can switch it between windowed and\nfull screen mode with `GLFW.set_window_monitor`. If the window has an\nOpenGL or OpenGL ES context, it will be unaffected.\n\nBy default, newly created windows use the placement recommended by the\nwindow system. To create the window at a specific position, make it\ninitially invisible by calling `GLFW.window_hint_visible`, set its\nposition using `GLFW.set_window_pos` and then show it with `GLFW.show_window`.\n\nAs long as at least one full screen window is not iconified, the screensaver\nis prohibited from starting.\n\nWindow systems put limits on window sizes. Very large or very small window\ndimensions may be overridden by the window system on creation. Check the\nactual size after creation using `GLFW.get_window_size`.\n\nThe swap interval is not set during window creation and\nthe initial value may vary depending on driver settings and defaults.\n\n`Parameters:`\n\n*`width`* The desired width, in screen coordinates, of the window.\nThis must be greater than zero.\n\n*`height`* The desired height, in screen coordinates, of the window.\nThis must be greater than zero.\n\n*`title`* The initial, UTF-8 encoded window title.\n\n*`monitor`* The monitor to use for full screen mode, or `nil` for\nwindowed mode.\n\n*`share`* The window whose context to share resources with, or `nil`\nto not share resources.\n\nReturns the handle of the created window, or `nil` if an\nerror occurred.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized`,\n`GLFW::Error::InvalidEnum`, `GLFW::Error::InvalidValue`, `GLFW::Error::ApiUnavailable`,\n`GLFW::Error::VersionUnavailable`, `GLFW::Error::FormatUnavailable` and\n`GLFW::Error::PlatformError`.\n\nNOTE: On Windows window creation will fail if the Microsoft GDI software\nOpenGL implementation is the only one available.\n\nNOTE: On Windows If the executable has an icon resource named `GLFW_ICON,` it\nwill be set as the initial icon for the window. If no such icon is present,\nthe `IDI_WINLOGO` icon will be used instead. To set a different icon, see\n`GLFW.set_window_icon`.\n\nNOTE: On Windows the context to share resources with must not be current on\nany other thread.\n\nNOTE: On Mac OS X the GLFW window has no icon, as it is not a document\nwindow, but the dock icon will be the same as the application bundle's icon.\n\nNOTE: On Mac OS X the first time a window is created the menu bar is populated\nwith common commands like Hide, Quit and About. The About entry opens\na minimal about dialog with information from the application's bundle.\n\nNOTE: On Mac OS X 10.10 and later the window frame will not be rendered\nat full resolution on Retina displays unless the `NSHighResolutionCapable`\nkey is enabled in the application bundle's `Info.plist`.\n\nNOTE: On X11 some window managers will not respect the placement of\ninitially hidden windows.\n\nNOTE: Due to the asynchronous nature of X11, it may take a moment for\na window to reach its requested state. This means you may not be able to\nquery the final size, position or other attributes directly after window\ncreation.\n\nNOTE: This function must not be called from a callback.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 3.0.\n```\nif GLFW.init && (window = GLFW.create_window(640, 480, \"Window\"))\n  GLFW.make_context_current(window)\n  while !GLFW.window_should_close(window)\n    GLFW.poll_events\n    # render here\n    GLFW.swap_buffers(window)\n  end\n  GLFW.terminate\nend\n```","summary":"<p>Creates a window and its associated context.</p>","abstract":false,"args":[{"name":"width","doc":null,"default_value":"","external_name":"width","restriction":"Int32"},{"name":"height","doc":null,"default_value":"","external_name":"height","restriction":"Int32"},{"name":"title","doc":null,"default_value":"","external_name":"title","restriction":"String"},{"name":"monitor","doc":null,"default_value":"nil","external_name":"monitor","restriction":"Monitor | ::Nil"},{"name":"share","doc":null,"default_value":"nil","external_name":"share","restriction":"Window | ::Nil"}],"args_string":"(width : Int32, height : Int32, title : String, monitor : Monitor? = <span class=\"n\">nil</span>, share : Window? = <span class=\"n\">nil</span>) : Window?","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L1215","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L1215","def":{"name":"create_window","args":[{"name":"width","doc":null,"default_value":"","external_name":"width","restriction":"Int32"},{"name":"height","doc":null,"default_value":"","external_name":"height","restriction":"Int32"},{"name":"title","doc":null,"default_value":"","external_name":"title","restriction":"String"},{"name":"monitor","doc":null,"default_value":"nil","external_name":"monitor","restriction":"Monitor | ::Nil"},{"name":"share","doc":null,"default_value":"nil","external_name":"share","restriction":"Window | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Window | ::Nil","visibility":"Public","body":"ptr = LibGLFW.create_window(width, height, title, monitor ? monitor.ptr : nil, share ? share.ptr : nil)\nptr.null? ? nil : ptr.unsafe_as(Window)\n"}},{"id":"default_window_hints:Nil-class-method","html_id":"default_window_hints:Nil-class-method","name":"default_window_hints","doc":"Resets all window hints to their default values.\n\nThis function resets all window hints to their default values.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized`.\n```\nif GLFW.init\n  GLFW.default_window_hints\n  if window = GLFW.create_window(640, 480, \"Window\")\n    # do your thing...\n  end\n  GLFW.terminate\nend\n```","summary":"<p>Resets all window hints to their default values.</p>","abstract":false,"args":[],"args_string":" : Nil","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L75","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L75","def":{"name":"default_window_hints","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"LibGLFW.default_window_hints"}},{"id":"destroy_cursor(cursor:Cursor):Nil-class-method","html_id":"destroy_cursor(cursor:Cursor):Nil-class-method","name":"destroy_cursor","doc":"Destroys a cursor.\n\nThis function destroys a cursor previously created with `GLFW.create_cursor`. \nAny remaining cursors will be destroyed by `GLFW.terminate`.\n\n`Parameters:`\n\n*`cursor`* The cursor object to destroy.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized` and `GLFW::Error::PlatformError`.\n\nNOTE: This function must not be called from a callback.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 3.1.","summary":"<p>Destroys a cursor.</p>","abstract":false,"args":[{"name":"cursor","doc":null,"default_value":"","external_name":"cursor","restriction":"Cursor"}],"args_string":"(cursor : Cursor) : Nil","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/input/input.cr#L292","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/input/input.cr#L292","def":{"name":"destroy_cursor","args":[{"name":"cursor","doc":null,"default_value":"","external_name":"cursor","restriction":"Cursor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"LibGLFW.destroy_cursor(cursor.ptr)"}},{"id":"destroy_window(window:Window):Nil-class-method","html_id":"destroy_window(window:Window):Nil-class-method","name":"destroy_window","doc":"Destroys the specified window and its context.\n\nThis function destroys the specified window and its context. On calling\nthis function, no further callbacks will be called for that window.\n\nIf the context of the specified window is current on the main thread, it is\ndetached before being destroyed.\n\n`Parameters:`\n\n*`window`* The window to destroy.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized` and `GLFW::Error::PlatformError`.\n\nNOTE: The context of the specified window must not be current on any other\nthread when this function is called.\n\nNOTE: This function must not be called from a callback.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 3.0.","summary":"<p>Destroys the specified window and its context.</p>","abstract":false,"args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"args_string":"(window : Window) : Nil","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L1243","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L1243","def":{"name":"destroy_window","args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"LibGLFW.destroy_window(window.ptr)"}},{"id":"extension_supported(extension:String):Bool-class-method","html_id":"extension_supported(extension:String):Bool-class-method","name":"extension_supported","doc":"Returns whether the specified extension is available.\n\nThis function returns whether the specified\nAPI extension is supported by the current OpenGL or\nOpenGL ES context. It searches both for client API extension and context\ncreation API extensions.\n\nA context must be current on the calling thread. Calling this function\nwithout a current context will cause a `GLFW::Error::NoCurrentContext` error.\n\nAs this function retrieves and searches one or more extension strings each\ncall, it is recommended that you cache its results if its going to be used\nfrequently. The extension strings will not change during the lifetime of\na context, so there is no danger in doing that.\n\nThis function does not apply to Vulkan. If you are using Vulkan, see\n`GLFW.get_required_instance_extensions`, `vkEnumerateInstanceExtensionProperties`\nand `vkEnumerateDeviceExtensionProperties` instead.\n\n`Parameters:`\n\n*`extension`* The ASCII encoded name of the extension.\n\nReturns `true` if the extension is available, or `false` otherwise.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized`, `GLFW::Error::NoCurrentContext`, \n`GLFW::Error::InvalidValue` and `GLFW::Error::PlatformError`.\n\nNOTE: This function may be called from any thread.\n\nNOTE: Added in version 1.0.\n```\nextension = \"\"\n\n{% if flag?(:linux) %}\n  extension = \"GLX_EXT_swap_control_tear\"\n{% elsif flag?(:win32) %}\n  extension = \"WGL_EXT_swap_control_tear\"\n{% else %}\n  raise \"Unsupported platform\"\n{% end %}\n\nif GLFW.init && (window = GLFW.create_window(640, 480, \"Window\"))\n  GLFW.make_context_current(window)\n\n  if GLFW.extension_supported(extension)\n    puts \"'#{extension}' is supported\"\n  else\n    puts \"'#{extension}' is not supported\"\n  end\n\n  GLFW.terminate\nend\n```","summary":"<p>Returns whether the specified extension is available.</p>","abstract":false,"args":[{"name":"extension","doc":null,"default_value":"","external_name":"extension","restriction":"String"}],"args_string":"(extension : String) : Bool","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/context/context.cr#L177","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/context/context.cr#L177","def":{"name":"extension_supported","args":[{"name":"extension","doc":null,"default_value":"","external_name":"extension","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"(LibGLFW.extension_supported(extension.to_unsafe)) == LibGLFW::TRUE ? true : false"}},{"id":"focus_window(window:Window):Nil-class-method","html_id":"focus_window(window:Window):Nil-class-method","name":"focus_window","doc":"Brings the specified window to front and sets input focus.\n\nThis function brings the specified window to front and sets input focus.\nThe window should already be visible and not iconified.\n\nBy default, both windowed and full screen mode windows are focused when\ninitially created. Set the `GLFW.window_hint_focused` to disable\nthis behavior.\n\n`Parameters:`\n\n*`window`* The window to give input focus.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized` and `GLFW::Error::PlatformError`.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 3.2.\n```\nif GLFW.init\n  if window = GLFW.create_window(640, 480, \"Window\")\n    GLFW.focus_window(window)\n  end\n  GLFW.terminate\nend\n```","summary":"<p>Brings the specified window to front and sets input focus.</p>","abstract":false,"args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"args_string":"(window : Window) : Nil","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L1843","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L1843","def":{"name":"focus_window","args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"LibGLFW.focus_window(window.ptr)"}},{"id":"get_clipboard_string(window:Window):String?-class-method","html_id":"get_clipboard_string(window:Window):String?-class-method","name":"get_clipboard_string","doc":"Returns the contents of the clipboard as a string.\n\nThis function returns the contents of the system clipboard, if it contains\nor is convertible to a UTF-8 encoded string. If the clipboard is empty or\nif its contents cannot be converted, `nil` is returned and a\n`GLFW::Error::FormatUnavailable` error is generated.\n\n`Parameters:`\n\n*`window`* The window that will request the clipboard contents.\nReturns the contents of the clipboard as a UTF-8 encoded string, or `nil`\nif an error occurred.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized` and `GLFW::Error::PlatformError`.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 3.0.","summary":"<p>Returns the contents of the clipboard as a string.</p>","abstract":false,"args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"args_string":"(window : Window) : String?","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/input/input.cr#L1135","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/input/input.cr#L1135","def":{"name":"get_clipboard_string","args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | ::Nil","visibility":"Public","body":"ptr = LibGLFW.get_clipboard_string(window.ptr)\nptr.null? ? nil : String.new(ptr)\n"}},{"id":"get_current_context:Window?-class-method","html_id":"get_current_context:Window?-class-method","name":"get_current_context","doc":"Returns the window whose context is current on the calling thread.\n\nThis function returns the window whose OpenGL or OpenGL ES context is\ncurrent on the calling thread.\n\nReturns the window whose context is current, or `nil` if no window's\ncontext is current.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized`.\n\nNOTE: This function may be called from any thread.\n\nNOTE: Added in version 3.0.\n```\nif GLFW.init && (window = GLFW.create_window(640, 480, \"Window\"))\n  GLFW.make_context_current(window)\n  (GLFW.get_current_context == window) # => true\n\n  GLFW.make_context_current(nil)\n  (GLFW.get_current_context == nil) # => true\n\n  GLFW.terminate\nend\n```","summary":"<p>Returns the window whose context is current on the calling thread.</p>","abstract":false,"args":[],"args_string":" : Window?","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/context/context.cr#L65","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/context/context.cr#L65","def":{"name":"get_current_context","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Window | ::Nil","visibility":"Public","body":"ptr = LibGLFW.get_current_context\nptr.null? ? nil : ptr.unsafe_as(Window)\n"}},{"id":"get_cursor_input_mode(window:Window):CursorInputMode-class-method","html_id":"get_cursor_input_mode(window:Window):CursorInputMode-class-method","name":"get_cursor_input_mode","doc":"Returns the value of an input option for the specified window.","summary":"<p>Returns the value of an input option for the specified window.</p>","abstract":false,"args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"args_string":"(window : Window) : CursorInputMode","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/input/input.cr#L4","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/input/input.cr#L4","def":{"name":"get_cursor_input_mode","args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"CursorInputMode","visibility":"Public","body":"CursorInputMode.new(LibGLFW.get_input_mode(window.ptr, InputMode::Cursor.value))"}},{"id":"get_cursor_pos(window:Window):::NamedTuple()-class-method","html_id":"get_cursor_pos(window:Window):::NamedTuple()-class-method","name":"get_cursor_pos","doc":"Retrieves the position of the cursor relative to the client area of the window.\n\nThis function returns the position of the cursor, in screen coordinates,\nrelative to the upper-left corner of the client area of the specified\nwindow.\n\nIf the cursor is disabled (with `GLFW::CursorInputMode::Disabled`) then \nthe cursor position is unbounded and limited only by the minimum and maximum \nvalues of a `Float64`.\n\nIf an error occurs, x and y position will be set to zero.\n\n`Parameters:`\n\n*`window`* The desired window.\n\nReturns NamedTuple with keys: `x : Float64`, `y : Float64`.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized` and `GLFW::Error::PlatformError`.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 3.0.","summary":"<p>Retrieves the position of the cursor relative to the client area of the window.</p>","abstract":false,"args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"args_string":"(window : Window) : ::NamedTuple()","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/input/input.cr#L134","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/input/input.cr#L134","def":{"name":"get_cursor_pos","args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"::NamedTuple(x: Float64, y: Float64)","visibility":"Public","body":"LibGLFW.get_cursor_pos(window.ptr, out xpos, out ypos)\n{x: xpos, y: ypos}\n"}},{"id":"get_framebuffer_size(window:Window):::NamedTuple()-class-method","html_id":"get_framebuffer_size(window:Window):::NamedTuple()-class-method","name":"get_framebuffer_size","doc":"Retrieves the size of the framebuffer of the specified window.\n\nThis function retrieves the size, in pixels, of the framebuffer of the\nspecified window. If you wish to retrieve the size of the window in screen\ncoordinates, see `GLFW.get_window_size`.\n\nIf an error occurs, width and height will be set to zero.\n\n`Parameters:`\n\n*`window`* The window whose framebuffer to query.\n\nReturns NamedTuple with keys: `width : Int32`, `height : Int32`.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized` and `GLFW::Error::PlatformError`.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 3.0.\n```\nif GLFW.init\n  if window = GLFW.create_window(640, 480, \"Window\")\n    size = GLFW.get_framebuffer_size(window)\n    puts \"width: #{size[:width]} height: #{size[:height]}\"\n  end\n  GLFW.terminate\nend\n```","summary":"<p>Retrieves the size of the framebuffer of the specified window.</p>","abstract":false,"args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"args_string":"(window : Window) : ::NamedTuple()","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L1624","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L1624","def":{"name":"get_framebuffer_size","args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"::NamedTuple(width: Int32, height: Int32)","visibility":"Public","body":"LibGLFW.get_framebuffer_size(window.ptr, out w, out h)\n{width: w, height: h}\n"}},{"id":"get_gamma_ramp(monitor:Monitor):GammaRamp?-class-method","html_id":"get_gamma_ramp(monitor:Monitor):GammaRamp?-class-method","name":"get_gamma_ramp","doc":"Returns the current gamma ramp for the specified monitor.\n\nThis function returns the current gamma ramp of the specified monitor.\n\n`Parameters:`\n\n*`monitor`* The monitor to query.\n\nReturns the current gamma ramp, or `nil` if an error occurred.\n\nNOTE: Possible errors include `GLFW::Error::PlatformError`.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 3.0.\n```\nif GLFW.init && (monitor = GLFW.get_primary_monitor)\n  if gamma_ramp = GLFW.get_gamma_ramp(monitor)\n    puts \"Gamma_ramp: #{gamma_ramp}\"\n  end \nend\n```","summary":"<p>Returns the current gamma ramp for the specified monitor.</p>","abstract":false,"args":[{"name":"monitor","doc":null,"default_value":"","external_name":"monitor","restriction":"Monitor"}],"args_string":"(monitor : Monitor) : GammaRamp?","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/monitor/monitor.cr#L365","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/monitor/monitor.cr#L365","def":{"name":"get_gamma_ramp","args":[{"name":"monitor","doc":null,"default_value":"","external_name":"monitor","restriction":"Monitor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"GammaRamp | ::Nil","visibility":"Public","body":"ptr = LibGLFW.get_gamma_ramp(monitor.ptr)\nptr.null? ? nil : GammaRamp.new(ptr)\n"}},{"id":"get_joystick_axes(joy:Joystick):Array(Float32)?-class-method","html_id":"get_joystick_axes(joy:Joystick):Array(Float32)?-class-method","name":"get_joystick_axes","doc":"Returns the values of all axes of the specified joystick.\n\nThis function returns the values of all axes of the specified joystick.\nEach element in the array is a value between -1.0 and 1.0.\n\nQuerying a joystick slot with no device present is not an error, but will\ncause this function to return `nil`. Call `GLFW.joystick_present` to\ncheck device presence.\n\n`Parameters:`\n\n*`joy`* The joystick to query.\n\nReturns an array of axis values, or `nil` if the joystick is not present or\nan error occurred.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized`, `GLFW::Error::InvalidEnum`\nand `GLFW::Error::PlatformError`.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 3.0.","summary":"<p>Returns the values of all axes of the specified joystick.</p>","abstract":false,"args":[{"name":"joy","doc":null,"default_value":"","external_name":"joy","restriction":"Joystick"}],"args_string":"(joy : Joystick) : Array(Float32)?","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/input/input.cr#L953","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/input/input.cr#L953","def":{"name":"get_joystick_axes","args":[{"name":"joy","doc":null,"default_value":"","external_name":"joy","restriction":"Joystick"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Float32) | ::Nil","visibility":"Public","body":"ptr = LibGLFW.get_joystick_axes(joy.value, out count)\nif ptr.null?\n  nil\nelse\n  axes = Array(Float32).new(count)\n  count.times do |i|\n    axes << ptr[i]\n  end\n  axes\nend\n"}},{"id":"get_joystick_buttons(joy:Joystick):Array(Action)?-class-method","html_id":"get_joystick_buttons(joy:Joystick):Array(Action)?-class-method","name":"get_joystick_buttons","doc":"Returns the state of all buttons of the specified joystick.\n\nThis function returns the state of all buttons of the specified joystick.\nEach element in the array is either `GLFW::Action::Press` or `GLFW::Action::Release`.\n\nQuerying a joystick slot with no device present is not an error, but will\ncause this function to return `nil`. Call `GLFW.joystick_present` to\ncheck device presence.\n\n`Parameters:`\n\n *`joy`* The joystick to query.\n\nReturns an array of button states, or `nil` if the joystick is not present\nor an error occurred.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized`, `GLFW::Error::InvalidEnum`\nand `GLFW::Error::PlatformError`.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 2.2.","summary":"<p>Returns the state of all buttons of the specified joystick.</p>","abstract":false,"args":[{"name":"joy","doc":null,"default_value":"","external_name":"joy","restriction":"Joystick"}],"args_string":"(joy : Joystick) : Array(Action)?","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/input/input.cr#L989","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/input/input.cr#L989","def":{"name":"get_joystick_buttons","args":[{"name":"joy","doc":null,"default_value":"","external_name":"joy","restriction":"Joystick"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Action) | ::Nil","visibility":"Public","body":"ptr = LibGLFW.get_joystick_buttons(joy.value, out count)\nif ptr.null?\n  nil\nelse\n  buttons = Array(Action).new(count)\n  count.times do |i|\n    buttons << (Action.new(ptr[i]))\n  end\n  buttons\nend\n"}},{"id":"get_joystick_name(joy:Joystick):String?-class-method","html_id":"get_joystick_name(joy:Joystick):String?-class-method","name":"get_joystick_name","doc":"Returns the name of the specified joystick.\n\nThis function returns the name, encoded as UTF-8, of the specified joystick.\n\nQuerying a joystick slot with no device present is not an error, but will\ncause this function to return `nil`. Call `GLFW.joystick_present` to\ncheck device presence.\n\n`Parameters:`\n\n*`joy`* The joystick to query.\n\nReturns the UTF-8 encoded name of the joystick, or `nil` if the joystick\nis not present or an error occurred.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized`, `GLFW::Error::InvalidEnum`\nand `GLFW::Error::PlatformError`.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 3.0.","summary":"<p>Returns the name of the specified joystick.</p>","abstract":false,"args":[{"name":"joy","doc":null,"default_value":"","external_name":"joy","restriction":"Joystick"}],"args_string":"(joy : Joystick) : String?","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/input/input.cr#L1024","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/input/input.cr#L1024","def":{"name":"get_joystick_name","args":[{"name":"joy","doc":null,"default_value":"","external_name":"joy","restriction":"Joystick"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | ::Nil","visibility":"Public","body":"ptr = LibGLFW.get_joystick_name(joy.value)\nptr.null? ? nil : String.new(ptr)\n"}},{"id":"get_key(window:Window,key:Key):Action-class-method","html_id":"get_key(window:Window,key:Key):Action-class-method","name":"get_key","doc":"Returns the last reported state of a keyboard key for the specified window.\n\nThis function returns the last state reported for the specified key to the\nspecified window. The returned state is one of `GLFW::Action::Press` or\n`GLFW::Action::Release`. The higher-level action `GLFW::Action::Repeat` is\nonly reported to the key callback.\n\nIf the `GLFW::InputMode::StickyKeys` input mode is enabled, this function returns\n`GLFW::Action::Press` the first time you call it for a key that was pressed, even if\nthat key has already been released.\n\nThe key functions deal with physical keys, with key tokens\nnamed after their use on the standard US keyboard layout. \nIf you want to input text, use the Unicode character callback instead.\n\nThe modifier key bit masks are not key tokens and cannot be\nused with this function.\n\n`Parameters:`\n\n*`window`* The desired window.\n\n*`key`* The desired keyboard key. `GLFW::Key::Unknown` is\nnot a valid key for this function.\n\nReturns one of `GLFW::Action::Press` or `GLFW::Action::Release`.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized` and `GLFW::Error::InvalidEnum`.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 1.0.","summary":"<p>Returns the last reported state of a keyboard key for the specified window.</p>","abstract":false,"args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"},{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"Key"}],"args_string":"(window : Window, key : Key) : Action","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/input/input.cr#L78","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/input/input.cr#L78","def":{"name":"get_key","args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"},{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"Key"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Action","visibility":"Public","body":"Action.new(LibGLFW.get_key(window.ptr, key.value))"}},{"id":"get_key_name(key:Key,scancode:Int32):String?-class-method","html_id":"get_key_name(key:Key,scancode:Int32):String?-class-method","name":"get_key_name","doc":"Returns the localized name of the specified printable key.","summary":"<p>Returns the localized name of the specified printable key.</p>","abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"Key"},{"name":"scancode","doc":null,"default_value":"","external_name":"scancode","restriction":"Int32"}],"args_string":"(key : Key, scancode : Int32) : String?","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/input/input.cr#L40","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/input/input.cr#L40","def":{"name":"get_key_name","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"Key"},{"name":"scancode","doc":null,"default_value":"","external_name":"scancode","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | ::Nil","visibility":"Public","body":"ptr = LibGLFW.get_key_name(key.value, scancode)\nptr.null? ? nil : String.new(ptr)\n"}},{"id":"get_monitor_name(monitor:Monitor):String-class-method","html_id":"get_monitor_name(monitor:Monitor):String-class-method","name":"get_monitor_name","doc":"Returns the name of the specified monitor.\n\nThis function returns a human-readable name, encoded as UTF-8, of the\nspecified monitor. The name typically reflects the make and model of the\nmonitor and is not guaranteed to be unique among the connected monitors.\n\n`Parameters:`\n\n*`monitor`* The monitor to query.\n\nReturns the UTF-8 encoded name of the monitor.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 3.0.\n```\nif GLFW.init && (monitor = GLFW.get_primary_monitor)\n  name = GLFW.get_monitor_name(monitor)\n  puts \"name: #{name}\"\nend\n```","summary":"<p>Returns the name of the specified monitor.</p>","abstract":false,"args":[{"name":"monitor","doc":null,"default_value":"","external_name":"monitor","restriction":"Monitor"}],"args_string":"(monitor : Monitor) : String","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/monitor/monitor.cr#L178","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/monitor/monitor.cr#L178","def":{"name":"get_monitor_name","args":[{"name":"monitor","doc":null,"default_value":"","external_name":"monitor","restriction":"Monitor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"String.new(LibGLFW.get_monitor_name(monitor.ptr))"}},{"id":"get_monitor_physical_size(monitor:Monitor):::NamedTuple()-class-method","html_id":"get_monitor_physical_size(monitor:Monitor):::NamedTuple()-class-method","name":"get_monitor_physical_size","doc":"Returns the physical size of the monitor.\n\nThis function returns the size, in millimetres, of the display area of the\nspecified monitor.\n\nSome systems do not provide accurate monitor size information, either\nbecause the monitor EDID data is incorrect or \nbecause the driver does not report it accurately.\n\nIf an error occurs, width and height will be set to zero.\n\n`Parameters:`\n\n*`monitor`* The monitor to query.\n\nReturns NamedTuple with keys: `width : Int32`, `height : Int32`.\n\nNOTE: Windows calculates the returned physical size from the\ncurrent resolution and system DPI instead of querying the monitor EDID data.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 3.0.\n```\nif GLFW.init && (monitor = GLFW.get_primary_monitor)\n  size = GLFW.get_monitor_physical_size(monitor)\n  puts \"width: #{size[:width]}mm height: #{size[:height]}mm\"\nend\n```","summary":"<p>Returns the physical size of the monitor.</p>","abstract":false,"args":[{"name":"monitor","doc":null,"default_value":"","external_name":"monitor","restriction":"Monitor"}],"args_string":"(monitor : Monitor) : ::NamedTuple()","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/monitor/monitor.cr#L151","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/monitor/monitor.cr#L151","def":{"name":"get_monitor_physical_size","args":[{"name":"monitor","doc":null,"default_value":"","external_name":"monitor","restriction":"Monitor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"::NamedTuple(width: Int32, height: Int32)","visibility":"Public","body":"LibGLFW.get_monitor_physical_size(monitor.ptr, out width, out height)\n{width: width, height: height}\n"}},{"id":"get_monitor_pos(monitor:Monitor):::NamedTuple()-class-method","html_id":"get_monitor_pos(monitor:Monitor):::NamedTuple()-class-method","name":"get_monitor_pos","doc":"Returns the position of the monitor's viewport on the virtual screen.\n\nThis function returns the position, in screen coordinates, of the upper-left\ncorner of the specified monitor.\n\nIf an error occurs, x and y position will be set to zero.\n\n`Parameters:`\n\n*`monitor`* The monitor to query.\n\nReturns NamedTuple with keys: `x : Int32`, `y : Int32`.\n\nNOTE: Possible errors include `GLFW::Error::PlatformError`.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 3.0.\n```\nif GLFW.init && (monitor = GLFW.get_primary_monitor)\n  position = GLFW.get_monitor_pos(monitor)\n  puts \"x: #{position[:x]} y: #{position[:y]}\"\nend\n```","summary":"<p>Returns the position of the monitor's viewport on the virtual screen.</p>","abstract":false,"args":[{"name":"monitor","doc":null,"default_value":"","external_name":"monitor","restriction":"Monitor"}],"args_string":"(monitor : Monitor) : ::NamedTuple()","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/monitor/monitor.cr#L116","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/monitor/monitor.cr#L116","def":{"name":"get_monitor_pos","args":[{"name":"monitor","doc":null,"default_value":"","external_name":"monitor","restriction":"Monitor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"::NamedTuple(x: Int32, y: Int32)","visibility":"Public","body":"LibGLFW.get_monitor_pos(monitor.ptr, out xpos, out ypos)\n{x: xpos, y: ypos}\n"}},{"id":"get_monitors:Array(Monitor)?-class-method","html_id":"get_monitors:Array(Monitor)?-class-method","name":"get_monitors","doc":"Returns the currently connected monitors.\n\nThis function returns an array of handles for all currently connected\nmonitors. The primary monitor is always first in the returned array. If no\nmonitors were found, this function returns `nil`.\n\nReturns an array of monitor handles, or `nil` if no monitors were found or\nif an error occurred.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized`.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 3.0.\n```\nif GLFW.init && (monitors = GLFW.get_monitors)\n  monitors.each do |monitor|\n    puts monitor\n  end\nend \n```","summary":"<p>Returns the currently connected monitors.</p>","abstract":false,"args":[],"args_string":" : Array(Monitor)?","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/monitor/monitor.cr#L52","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/monitor/monitor.cr#L52","def":{"name":"get_monitors","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Monitor) | ::Nil","visibility":"Public","body":"ptr = LibGLFW.get_monitors(out count)\nif ptr.null?\n  nil\nelse\n  monitors = Array(Monitor).new(count)\n  count.times do |i|\n    monitors << (ptr[i].unsafe_as(Monitor))\n  end\n  monitors\nend\n"}},{"id":"get_mouse_button(window:Window,button:MouseButton):Action-class-method","html_id":"get_mouse_button(window:Window,button:MouseButton):Action-class-method","name":"get_mouse_button","doc":"Returns the last reported state of a mouse button for the specified window.\n\nThis function returns the last state reported for the specified mouse button\nto the specified window. The returned state is one of `GLFW::Action::Press` \nor `GLFW::Action::Release`.\n\nIf the `GLFW::InputMode::StickyMouseButtons` is enabled, this function \nreturns `GLFW::Action::Press` the first time you call it for a mouse button \nthat was pressed, even if that mouse button has already been released.\n\n`Parameters:`\n\n*`window`* The desired window.\n\n*`button`* The desired mouse button.\n\nReturns one of `GLFW::Action::Press` or `GLFW::Action::Release`.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized` and `GLFW::Error::InvalidEnum`.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 1.0.","summary":"<p>Returns the last reported state of a mouse button for the specified window.</p>","abstract":false,"args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"},{"name":"button","doc":null,"default_value":"","external_name":"button","restriction":"MouseButton"}],"args_string":"(window : Window, button : MouseButton) : Action","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/input/input.cr#L106","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/input/input.cr#L106","def":{"name":"get_mouse_button","args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"},{"name":"button","doc":null,"default_value":"","external_name":"button","restriction":"MouseButton"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Action","visibility":"Public","body":"Action.new(LibGLFW.get_mouse_button(window.ptr, button.value))"}},{"id":"get_primary_monitor:Monitor?-class-method","html_id":"get_primary_monitor:Monitor?-class-method","name":"get_primary_monitor","doc":"Returns the primary monitor.\n\nThis function returns the primary monitor. This is usually the monitor\nwhere elements like the task bar or global menu bar are located.\n\nReturns the primary monitor, or `nil` if no monitors were found or if an\nerror occurred.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized`.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: The primary monitor is always first in the array returned by `GLFW.get_monitors`.\n\nNOTE: Added in version 3.0.\n```\nif GLFW.init && (monitor = GLFW.get_primary_monitor)\n  puts monitor\nend\n```","summary":"<p>Returns the primary monitor.</p>","abstract":false,"args":[],"args_string":" : Monitor?","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/monitor/monitor.cr#L86","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/monitor/monitor.cr#L86","def":{"name":"get_primary_monitor","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Monitor | ::Nil","visibility":"Public","body":"ptr = LibGLFW.get_primary_monitor\nptr.null? ? nil : ptr.unsafe_as(Monitor)\n"}},{"id":"get_proc_address(procname:String):LibGLFW::GlProc?-class-method","html_id":"get_proc_address(procname:String):LibGLFW::GlProc?-class-method","name":"get_proc_address","doc":"Returns the address of the specified function for the current context.\n\nThis function returns the address of the specified OpenGL or OpenGL ES\ncore or extension function, if it is supported by the current context.\n\nA context must be current on the calling thread. Calling this function\nwithout a current context will cause a `GLFW::Error::NoCurrentContext` error.\n\nThis function does not apply to Vulkan. If you are rendering with Vulkan,\nsee `GLFW.get_instance_proc_address`, `vkGetInstanceProcAddr` and\n`vkGetDeviceProcAddr` instead.\n\n`Parameters:`\n\n *`procname`* The ASCII encoded name of the function.\n\nReturns the address of the function, or `nil` if an error occurred.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized`, `GLFW::Error::NoCurrentContext` \nand `GLFW::Error::PlatformError`.\n\nNOTE: The address of a given function is not guaranteed to be the same\nbetween contexts.\n\nNOTE: This function may return a non-`nil` address despite the\nassociated version or extension not being available. Always check the\ncontext version or extension string first.\n\nNOTE: The returned function pointer is valid until the context\nis destroyed or the library is terminated.\n\nNOTE: This function may be called from any thread.\n\nNOTE: Added in version 1.0.\n```\nalias GL_GEN_BUFFERS = (Int32, Pointer(UInt32)) -> Void\nalias GL_DELETE_BUFFERS = (Int32, Pointer(UInt32)) -> Void\n\nif GLFW.init && (window = GLFW.create_window(640, 480, \"Window\"))\n  GLFW.make_context_current(window)\n\n  # You need to have a current context before calling GLFW.get_proc_address\n  gen_buffers = GLFW.get_proc_address(\"glGenBuffers\").unsafe_as(GL_GEN_BUFFERS)\n  delete_buffers = GLFW.get_proc_address(\"glDeleteBuffers\").unsafe_as(GL_DELETE_BUFFERS)\n\n  buffer = 0u32\n  gen_buffers.call(1, pointerof(buffer))\n  buffer # => 1\n  delete_buffers.call(1, pointerof(buffer))\n\n  GLFW.terminate\nend\n```","summary":"<p>Returns the address of the specified function for the current context.</p>","abstract":false,"args":[{"name":"procname","doc":null,"default_value":"","external_name":"procname","restriction":"String"}],"args_string":"(procname : String) : LibGLFW::GlProc?","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/context/context.cr#L235","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/context/context.cr#L235","def":{"name":"get_proc_address","args":[{"name":"procname","doc":null,"default_value":"","external_name":"procname","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"LibGLFW::GlProc | ::Nil","visibility":"Public","body":"proc = LibGLFW.get_proc_address(procname.to_unsafe)\nproc.pointer.null? ? nil : proc\n"}},{"id":"get_sticky_keys(window:Window):Bool-class-method","html_id":"get_sticky_keys(window:Window):Bool-class-method","name":"get_sticky_keys","doc":"Returns the value of an input option for the specified window.","summary":"<p>Returns the value of an input option for the specified window.</p>","abstract":false,"args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"args_string":"(window : Window) : Bool","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/input/input.cr#L10","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/input/input.cr#L10","def":{"name":"get_sticky_keys","args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"(LibGLFW.get_input_mode(window.ptr, InputMode::StickyKeys.value)) == LibGLFW::TRUE ? true : false"}},{"id":"get_sticky_mouse_buttons(window:Window):Bool-class-method","html_id":"get_sticky_mouse_buttons(window:Window):Bool-class-method","name":"get_sticky_mouse_buttons","doc":"Returns the value of an input option for the specified window.","summary":"<p>Returns the value of an input option for the specified window.</p>","abstract":false,"args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"args_string":"(window : Window) : Bool","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/input/input.cr#L16","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/input/input.cr#L16","def":{"name":"get_sticky_mouse_buttons","args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"(LibGLFW.get_input_mode(window.ptr, InputMode::StickyMouseButtons.value)) == LibGLFW::TRUE ? true : false"}},{"id":"get_time:Float64-class-method","html_id":"get_time:Float64-class-method","name":"get_time","doc":"Returns the value of the GLFW timer.\n\nThis function returns the value of the GLFW timer. Unless the timer has\nbeen set using `GLFW.set_time`, the timer measures time elapsed since GLFW\nwas initialized.\n\nThe resolution of the timer is system dependent, but is usually on the order\nof a few micro- or nanoseconds. It uses the highest-resolution monotonic\ntime source on each supported platform.\n\nReturns the current value, in seconds, or zero if an\nerror occurred.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized`.\n\nNOTE: This function may be called from any thread. Reading and\nwriting of the internal timer offset is not atomic, so it needs to be\nexternally synchronized with calls to `GLFW.set_time`.\n\nNOTE: Added in version 1.0.","summary":"<p>Returns the value of the GLFW timer.</p>","abstract":false,"args":[],"args_string":" : Float64","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/input/input.cr#L1161","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/input/input.cr#L1161","def":{"name":"get_time","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"LibGLFW.get_time"}},{"id":"get_timer_frequency:UInt64-class-method","html_id":"get_timer_frequency:UInt64-class-method","name":"get_timer_frequency","doc":"Returns the frequency, in Hz, of the raw timer.\n\nThis function returns the frequency, in Hz, of the raw timer.\n\nReturns the frequency of the timer, in Hz, or zero if an\nerror occurred.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized`.\n\nNOTE: This function may be called from any thread.\n\nNOTE: Added in version 3.2.","summary":"<p>Returns the frequency, in Hz, of the raw timer.</p>","abstract":false,"args":[],"args_string":" : UInt64","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/input/input.cr#L1218","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/input/input.cr#L1218","def":{"name":"get_timer_frequency","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"UInt64","visibility":"Public","body":"LibGLFW.get_timer_frequency"}},{"id":"get_timer_value:UInt64-class-method","html_id":"get_timer_value:UInt64-class-method","name":"get_timer_value","doc":"Returns the current value of the raw timer.\n\nThis function returns the current value of the raw timer, measured in\n`1 / frequency` seconds. To get the frequency, call\n`GLFW.get_timer_frequency`.\n\nReturns the value of the timer, or zero if an error occurred.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized`.\n\nNOTE: This function may be called from any thread.\n\nNOTE: Added in version 3.2.","summary":"<p>Returns the current value of the raw timer.</p>","abstract":false,"args":[],"args_string":" : UInt64","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/input/input.cr#L1201","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/input/input.cr#L1201","def":{"name":"get_timer_value","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"UInt64","visibility":"Public","body":"LibGLFW.get_timer_value"}},{"id":"get_version:::NamedTuple()-class-method","html_id":"get_version:::NamedTuple()-class-method","name":"get_version","doc":"Retrieves the version of the GLFW library.\n\nThis function retrieves the major, minor and revision numbers of the GLFW\nlibrary. It is intended for when you are using GLFW as a shared library and\nwant to ensure that you are using the minimum required version.\n\nReturns NamedTuple with keys: `major : Int32`, `minor : Int32`, `rev : Int32`.\n\nNOTE: This function may be called before `GLFW.init`.\n\nNOTE: This function may be called from any thread.\n\nNOTE: Added in version 1.0.\n```\nversion = GLFW.get_version\nputs \"major: #{version[:major]}\" # => 3\nputs \"minor: #{version[:minor]}\" # => 2\nputs \"rev: #{version[:rev]}\" # => 1\n```","summary":"<p>Retrieves the version of the GLFW library.</p>","abstract":false,"args":[],"args_string":" : ::NamedTuple()","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/init/init.cr#L92","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/init/init.cr#L92","def":{"name":"get_version","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"::NamedTuple(major: Int32, minor: Int32, rev: Int32)","visibility":"Public","body":"LibGLFW.get_version(out major, out minor, out rev)\n{major: major, minor: minor, rev: rev}\n"}},{"id":"get_version_string:String-class-method","html_id":"get_version_string:String-class-method","name":"get_version_string","doc":"Returns a string describing the compile-time configuration.\n\nThis function returns the compile-time generated\nversion string of the GLFW library binary. It\ndescribes the version, platform, compiler and any platform-specific\ncompile-time options. \n\nDo not use the version string to parse the GLFW library version. The\n`GLFW.get_version` function provides the version of the running library\nbinary in numerical format.\n\nReturns the ASCII encoded GLFW version string.\n\nNOTE: This function may be called before `GLFW.init`.\n\nNOTE: This function may be called from any thread.\n\nNOTE: Added in version 3.0.\n```\nstring = GLFW.get_version_string\nputs string # => \"3.2.1 X11 GLX EGL clock_gettime /dev/js Xf86vm shared\"\n```","summary":"<p>Returns a string describing the compile-time configuration.</p>","abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/init/init.cr#L120","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/init/init.cr#L120","def":{"name":"get_version_string","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"String.new(LibGLFW.get_version_string)"}},{"id":"get_video_mode(monitor:Monitor):VideoMode?-class-method","html_id":"get_video_mode(monitor:Monitor):VideoMode?-class-method","name":"get_video_mode","doc":"Returns the current mode of the specified monitor.\n\nThis function returns the current video mode of the specified monitor. If\nyou have created a full screen window for that monitor, the return value\nwill depend on whether that window is iconified.\n\n`Parameters:`\n\n*`monitor`* The monitor to query.\n\nReturns the current mode of the monitor, or `nil` if an error occurred.\n\nNOTE: Possible errors include `GLFW::Error::PlatformError`.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 3.0.\n```\nif GLFW.init && (monitor = GLFW.get_primary_monitor)\n  if video_mode = GLFW.get_video_mode(monitor)\n    puts \"Video_mode: #{video_mode}\"\n  end\nend\n```","summary":"<p>Returns the current mode of the specified monitor.</p>","abstract":false,"args":[{"name":"monitor","doc":null,"default_value":"","external_name":"monitor","restriction":"Monitor"}],"args_string":"(monitor : Monitor) : VideoMode?","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/monitor/monitor.cr#L311","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/monitor/monitor.cr#L311","def":{"name":"get_video_mode","args":[{"name":"monitor","doc":null,"default_value":"","external_name":"monitor","restriction":"Monitor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"VideoMode | ::Nil","visibility":"Public","body":"ptr = LibGLFW.get_video_mode(monitor.ptr)\nptr.null? ? nil : ptr.unsafe_as(VideoMode)\n"}},{"id":"get_video_modes(monitor:Monitor):Array(VideoMode)?-class-method","html_id":"get_video_modes(monitor:Monitor):Array(VideoMode)?-class-method","name":"get_video_modes","doc":"Returns the available video modes for the specified monitor.\n\nThis function returns an array of all video modes supported by the specified\nmonitor. The returned array is sorted in ascending order, first by color\nbit depth (the sum of all channel depths) and then by resolution area (the\nproduct of width and height).\n\n`Parameters:`\n\n*`monitor`* The monitor to query.\n\nReturns an array of video modes, or `nil` if an error occurred.\n\nNOTE: Possible errors include `GLFW::Error::PlatformError`.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 1.0.\n```\nif GLFW.init && (monitor = GLFW.get_primary_monitor)\n  if video_modes = GLFW.get_video_modes(monitor)\n    video_modes.each { |video_mode| puts \"Video_mode: #{video_mode}\" }\n  end\nend\n```","summary":"<p>Returns the available video modes for the specified monitor.</p>","abstract":false,"args":[{"name":"monitor","doc":null,"default_value":"","external_name":"monitor","restriction":"Monitor"}],"args_string":"(monitor : Monitor) : Array(VideoMode)?","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/monitor/monitor.cr#L273","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/monitor/monitor.cr#L273","def":{"name":"get_video_modes","args":[{"name":"monitor","doc":null,"default_value":"","external_name":"monitor","restriction":"Monitor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(VideoMode) | ::Nil","visibility":"Public","body":"ptr = LibGLFW.get_video_modes(monitor.ptr, out count)\nif ptr.null?\n  nil\nelse\n  video_modes = Array(VideoMode).new(count)\n  count.times do |i|\n    video_modes << ((ptr + i).unsafe_as(VideoMode))\n  end\n  video_modes\nend\n"}},{"id":"get_window_client_api(window:Window):ClientApi-class-method","html_id":"get_window_client_api(window:Window):ClientApi-class-method","name":"get_window_client_api","doc":null,"summary":null,"abstract":false,"args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"args_string":"(window : Window) : ClientApi","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L2025","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L2025","def":{"name":"get_window_client_api","args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"ClientApi","visibility":"Public","body":"ClientApi.new(LibGLFW.get_window_attrib(window.ptr, Attribute::ClientApi))"}},{"id":"get_window_context_creation_api(window:Window):ContextCreationApi-class-method","html_id":"get_window_context_creation_api(window:Window):ContextCreationApi-class-method","name":"get_window_context_creation_api","doc":null,"summary":null,"abstract":false,"args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"args_string":"(window : Window) : ContextCreationApi","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L2075","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L2075","def":{"name":"get_window_context_creation_api","args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"ContextCreationApi","visibility":"Public","body":"ContextCreationApi.new(LibGLFW.get_window_attrib(window.ptr, Attribute::ContextCreationApi))"}},{"id":"get_window_context_no_error(window:Window):Bool-class-method","html_id":"get_window_context_no_error(window:Window):Bool-class-method","name":"get_window_context_no_error","doc":null,"summary":null,"abstract":false,"args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"args_string":"(window : Window) : Bool","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L2070","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L2070","def":{"name":"get_window_context_no_error","args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"(LibGLFW.get_window_attrib(window.ptr, Attribute::ContextNoError)) == LibGLFW::TRUE ? true : false"}},{"id":"get_window_context_release_behavior(window:Window):ContextReleaseBehavior-class-method","html_id":"get_window_context_release_behavior(window:Window):ContextReleaseBehavior-class-method","name":"get_window_context_release_behavior","doc":null,"summary":null,"abstract":false,"args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"args_string":"(window : Window) : ContextReleaseBehavior","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L2065","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L2065","def":{"name":"get_window_context_release_behavior","args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"ContextReleaseBehavior","visibility":"Public","body":"ContextReleaseBehavior.new(LibGLFW.get_window_attrib(window.ptr, Attribute::ContextReleaseBehavior))"}},{"id":"get_window_context_revision(window:Window):Int32-class-method","html_id":"get_window_context_revision(window:Window):Int32-class-method","name":"get_window_context_revision","doc":null,"summary":null,"abstract":false,"args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"args_string":"(window : Window) : Int32","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L2040","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L2040","def":{"name":"get_window_context_revision","args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"LibGLFW.get_window_attrib(window.ptr, Attribute::ContextRevision)"}},{"id":"get_window_context_robustness(window:Window):ContextRobustness-class-method","html_id":"get_window_context_robustness(window:Window):ContextRobustness-class-method","name":"get_window_context_robustness","doc":null,"summary":null,"abstract":false,"args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"args_string":"(window : Window) : ContextRobustness","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L2045","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L2045","def":{"name":"get_window_context_robustness","args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"ContextRobustness","visibility":"Public","body":"ContextRobustness.new(LibGLFW.get_window_attrib(window.ptr, Attribute::ContextRobustness))"}},{"id":"get_window_context_version_major(window:Window):Int32-class-method","html_id":"get_window_context_version_major(window:Window):Int32-class-method","name":"get_window_context_version_major","doc":null,"summary":null,"abstract":false,"args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"args_string":"(window : Window) : Int32","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L2030","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L2030","def":{"name":"get_window_context_version_major","args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"LibGLFW.get_window_attrib(window.ptr, Attribute::ContextVersionMajor)"}},{"id":"get_window_context_version_minor(window:Window):Int32-class-method","html_id":"get_window_context_version_minor(window:Window):Int32-class-method","name":"get_window_context_version_minor","doc":null,"summary":null,"abstract":false,"args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"args_string":"(window : Window) : Int32","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L2035","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L2035","def":{"name":"get_window_context_version_minor","args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"LibGLFW.get_window_attrib(window.ptr, Attribute::ContextVersionMinor)"}},{"id":"get_window_decorated(window:Window):Bool-class-method","html_id":"get_window_decorated(window:Window):Bool-class-method","name":"get_window_decorated","doc":"Returns whether specified window is decorated.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized` and `GLFW::Error::PlatformError`.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 3.0.","summary":"<p>Returns whether specified window is decorated.</p>","abstract":false,"args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"args_string":"(window : Window) : Bool","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L1996","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L1996","def":{"name":"get_window_decorated","args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"(LibGLFW.get_window_attrib(window.ptr, Attribute::Decorated)) == LibGLFW::TRUE ? true : false"}},{"id":"get_window_floating(window:Window):Bool-class-method","html_id":"get_window_floating(window:Window):Bool-class-method","name":"get_window_floating","doc":"Returns whether specified window is floating.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized` and `GLFW::Error::PlatformError`.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 3.0.","summary":"<p>Returns whether specified window is floating.</p>","abstract":false,"args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"args_string":"(window : Window) : Bool","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L2008","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L2008","def":{"name":"get_window_floating","args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"(LibGLFW.get_window_attrib(window.ptr, Attribute::Floating)) == LibGLFW::TRUE ? true : false"}},{"id":"get_window_focused(window:Window):Bool-class-method","html_id":"get_window_focused(window:Window):Bool-class-method","name":"get_window_focused","doc":"Returns whether specified window is focused.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized` and `GLFW::Error::PlatformError`.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 3.0.","summary":"<p>Returns whether specified window is focused.</p>","abstract":false,"args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"args_string":"(window : Window) : Bool","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L1948","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L1948","def":{"name":"get_window_focused","args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"(LibGLFW.get_window_attrib(window.ptr, Attribute::Focused)) == LibGLFW::TRUE ? true : false"}},{"id":"get_window_frame_size(window:Window):::NamedTuple()-class-method","html_id":"get_window_frame_size(window:Window):::NamedTuple()-class-method","name":"get_window_frame_size","doc":"Retrieves the size of the frame of the window.\n\nThis function retrieves the size, in screen coordinates, of each edge of the\nframe of the specified window. This size includes the title bar, if the\nwindow has one. The size of the frame may vary depending on the\nwindow-related hints used to create it.\n\nBecause this function retrieves the size of each window frame edge and not\nthe offset along a particular coordinate axis, the retrieved values will\nalways be zero or positive.\n\nIf an error occurs, left, top, right and bottom will be set to zero.\n\n`Parameters:`\n\n*`window`* The window whose frame size to query.\n\nReturns NamedTuple with keys: `left : Int32`, `top : Int32`, `right : Int32`, `bottom : Int32`\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized` and `GLFW::Error::PlatformError`.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 3.1.\n```\nif GLFW.init\n  if window = GLFW.create_window(640, 480, \"Window\")\n    frame = GLFW.get_window_frame_size(window)\n    puts \"left: #{frame[:left]} top: #{frame[:top]} right: #{frame[:right]} bottom: #{frame[:bottom]}\"\n  end\n  GLFW.terminate\nend\n```","summary":"<p>Retrieves the size of the frame of the window.</p>","abstract":false,"args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"args_string":"(window : Window) : ::NamedTuple()","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L1663","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L1663","def":{"name":"get_window_frame_size","args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"::NamedTuple(left: Int32, top: Int32, right: Int32, bottom: Int32)","visibility":"Public","body":"LibGLFW.get_window_frame_size(window.ptr, out l, out t, out r, out b)\n{left: l, top: t, right: r, bottom: b}\n"}},{"id":"get_window_iconified(window:Window):Bool-class-method","html_id":"get_window_iconified(window:Window):Bool-class-method","name":"get_window_iconified","doc":"Returns whether specified window is iconified (minimized).\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized` and `GLFW::Error::PlatformError`.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 3.0.","summary":"<p>Returns whether specified window is iconified (minimized).</p>","abstract":false,"args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"args_string":"(window : Window) : Bool","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L1960","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L1960","def":{"name":"get_window_iconified","args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"(LibGLFW.get_window_attrib(window.ptr, Attribute::Iconified)) == LibGLFW::TRUE ? true : false"}},{"id":"get_window_maximized(window:Window):Bool-class-method","html_id":"get_window_maximized(window:Window):Bool-class-method","name":"get_window_maximized","doc":"Returns whether specified window is maximized.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized` and `GLFW::Error::PlatformError`.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 3.0.","summary":"<p>Returns whether specified window is maximized.</p>","abstract":false,"args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"args_string":"(window : Window) : Bool","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L2020","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L2020","def":{"name":"get_window_maximized","args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"(LibGLFW.get_window_attrib(window.ptr, Attribute::Maximized)) == LibGLFW::TRUE ? true : false"}},{"id":"get_window_monitor(window:Window):Monitor?-class-method","html_id":"get_window_monitor(window:Window):Monitor?-class-method","name":"get_window_monitor","doc":"Returns the monitor that the window uses for full screen mode.\n\nThis function returns the handle of the monitor that the specified window is\nin full screen on.\n\n`Parameters:`\n\n*`window`* The window to query.\n\nReturns the monitor, or `nil` if the window is in windowed mode or an\nerror occurred.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized`.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 3.0.\n```\nif GLFW.init\n  if window = GLFW.create_window(640, 480, \"Window\")\n    if monitor = GLFW.get_window_monitor(window)\n      puts \"Full screen mode\"\n    else\n      puts \"Windowed mode\"\n    end\n  end\n  GLFW.terminate\nend\n```","summary":"<p>Returns the monitor that the window uses for full screen mode.</p>","abstract":false,"args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"args_string":"(window : Window) : Monitor?","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L1877","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L1877","def":{"name":"get_window_monitor","args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Monitor | ::Nil","visibility":"Public","body":"ptr = LibGLFW.get_window_monitor(window.ptr)\nptr.null? ? nil : ptr.unsafe_as(Monitor)\n"}},{"id":"get_window_open_gl_debug_context(window:Window):Bool-class-method","html_id":"get_window_open_gl_debug_context(window:Window):Bool-class-method","name":"get_window_open_gl_debug_context","doc":null,"summary":null,"abstract":false,"args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"args_string":"(window : Window) : Bool","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L2055","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L2055","def":{"name":"get_window_open_gl_debug_context","args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"(LibGLFW.get_window_attrib(window.ptr, Attribute::OpenGLDebugContext)) == LibGLFW::TRUE ? true : false"}},{"id":"get_window_open_gl_forward_compat(window:Window):Bool-class-method","html_id":"get_window_open_gl_forward_compat(window:Window):Bool-class-method","name":"get_window_open_gl_forward_compat","doc":null,"summary":null,"abstract":false,"args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"args_string":"(window : Window) : Bool","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L2050","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L2050","def":{"name":"get_window_open_gl_forward_compat","args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"(LibGLFW.get_window_attrib(window.ptr, Attribute::OpenGLForwardCompat)) == LibGLFW::TRUE ? true : false"}},{"id":"get_window_open_gl_profile(window:Window):OpenGLProfile-class-method","html_id":"get_window_open_gl_profile(window:Window):OpenGLProfile-class-method","name":"get_window_open_gl_profile","doc":null,"summary":null,"abstract":false,"args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"args_string":"(window : Window) : OpenGLProfile","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L2060","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L2060","def":{"name":"get_window_open_gl_profile","args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"OpenGLProfile","visibility":"Public","body":"OpenGLProfile.new(LibGLFW.get_window_attrib(window.ptr, Attribute::OpenGLProfile))"}},{"id":"get_window_pos(window:Window):::NamedTuple()-class-method","html_id":"get_window_pos(window:Window):::NamedTuple()-class-method","name":"get_window_pos","doc":"Retrieves the position of the client area of the specified window.\n\nThis function retrieves the position, in screen coordinates, of the\nupper-left corner of the client area of the specified window.\n\nIf an error occurs, x and y position will be set to zero.\n\n`Parameters:`\n\n*`window`* The window to query.\n\nReturns NamedTuple with keys: `x : Int32`, `y : Int32`.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized` and `GLFW::Error::PlatformError`.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 3.0.\n```\nif GLFW.init\n  if window = GLFW.create_window(640, 480, \"Window\")\n    pos = GLFW.get_window_pos(window)\n    puts \"x: #{pos[:x]} y: #{pos[:y]}\"\n  end\n  GLFW.terminate\nend\n```","summary":"<p>Retrieves the position of the client area of the specified window.</p>","abstract":false,"args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"args_string":"(window : Window) : ::NamedTuple()","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L1376","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L1376","def":{"name":"get_window_pos","args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"::NamedTuple(x: Int32, y: Int32)","visibility":"Public","body":"LibGLFW.get_window_pos(window.ptr, out xpos, out ypos)\n{x: xpos, y: ypos}\n"}},{"id":"get_window_resizable(window:Window):Bool-class-method","html_id":"get_window_resizable(window:Window):Bool-class-method","name":"get_window_resizable","doc":"Returns whether specified window is resizable.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized` and `GLFW::Error::PlatformError`.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 3.0.","summary":"<p>Returns whether specified window is resizable.</p>","abstract":false,"args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"args_string":"(window : Window) : Bool","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L1972","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L1972","def":{"name":"get_window_resizable","args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"(LibGLFW.get_window_attrib(window.ptr, Attribute::Resizable)) == LibGLFW::TRUE ? true : false"}},{"id":"get_window_size(window:Window):::NamedTuple()-class-method","html_id":"get_window_size(window:Window):::NamedTuple()-class-method","name":"get_window_size","doc":"Retrieves the size of the client area of the specified window.\n\nThis function retrieves the size, in screen coordinates, of the client area\nof the specified window. If you wish to retrieve the size of the\nframebuffer of the window in pixels, see `GLFW.get_framebuffer_size`.\n\nIf an error occurs, width and height will be set to zero.\n\n`Parameters:`\n\n*`window`* The window whose size to retrieve.\n\nReturns NamedTuple with keys: `width : Int32`, `height : Int32`.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized` and `GLFW::Error::PlatformError`.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 1.0.\n```\nif GLFW.init\n  if window = GLFW.create_window(640, 480, \"Window\")\n    size = GLFW.get_window_size(window)\n    puts \"width: #{size[:width]} height: #{size[:height]}\"\n  end\n  GLFW.terminate\nend\n```","summary":"<p>Retrieves the size of the client area of the specified window.</p>","abstract":false,"args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"args_string":"(window : Window) : ::NamedTuple()","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L1444","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L1444","def":{"name":"get_window_size","args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"::NamedTuple(width: Int32, height: Int32)","visibility":"Public","body":"LibGLFW.get_window_size(window.ptr, out w, out h)\n{width: w, height: h}\n"}},{"id":"get_window_user_pointer(window:Window):Pointer(Void)-class-method","html_id":"get_window_user_pointer(window:Window):Pointer(Void)-class-method","name":"get_window_user_pointer","doc":"Returns the user pointer of the specified window.\n\nThis function returns the current value of the user-defined pointer of the\nspecified window. The initial value is `nil`.\n\n`Parameters:`\n\n*`window`* The window whose pointer to return.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized`.\n\nNOTE: This function may be called from any thread. Access is not\nsynchronized.\n\nNOTE: Added in version 3.0.","summary":"<p>Returns the user pointer of the specified window.</p>","abstract":false,"args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"args_string":"(window : Window) : Pointer(Void)","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L2118","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L2118","def":{"name":"get_window_user_pointer","args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Pointer(Void)","visibility":"Public","body":"LibGLFW.get_window_user_pointer(window.ptr)"}},{"id":"get_window_visible(window:Window):Bool-class-method","html_id":"get_window_visible(window:Window):Bool-class-method","name":"get_window_visible","doc":"Returns whether specified window is visible.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized` and `GLFW::Error::PlatformError`.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 3.0.","summary":"<p>Returns whether specified window is visible.</p>","abstract":false,"args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"args_string":"(window : Window) : Bool","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L1984","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L1984","def":{"name":"get_window_visible","args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"(LibGLFW.get_window_attrib(window.ptr, Attribute::Visible)) == LibGLFW::TRUE ? true : false"}},{"id":"hide_window(window:Window):Nil-class-method","html_id":"hide_window(window:Window):Nil-class-method","name":"hide_window","doc":"Hides the specified window.\n\nThis function hides the specified window if it was previously visible. If\nthe window is already hidden or is in full screen mode, this function does\nnothing.\n\n`Parameters:`\n\n *`window`* The window to hide.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized` and `GLFW::Error::PlatformError`.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 3.0.\n\n```\nif GLFW.init\n  if window = GLFW.create_window(640, 480, \"Window\")\n    GLFW.hide_window(window)\n  end\n  GLFW.terminate\nend\n```","summary":"<p>Hides the specified window.</p>","abstract":false,"args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"args_string":"(window : Window) : Nil","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L1812","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L1812","def":{"name":"hide_window","args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"LibGLFW.hide_window(window.ptr)"}},{"id":"iconify_window(window:Window):Nil-class-method","html_id":"iconify_window(window:Window):Nil-class-method","name":"iconify_window","doc":"Iconifies the specified window.\n\nThis function iconifies (minimizes) the specified window if it was\npreviously restored. If the window is already iconified, this function does\nnothing.\n\nIf the specified window is a full screen window, the original monitor\nresolution is restored until the window is restored.\n\n`Parameters:`\n\n*`window`* The window to iconify.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized` and `GLFW::Error::PlatformError`.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 2.1.\n```\nif GLFW.init\n  if window = GLFW.create_window(640, 480, \"Window\")\n    GLFW.iconify_window(window)\n  end\n  GLFW.terminate\nend\n```","summary":"<p>Iconifies the specified window.</p>","abstract":false,"args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"args_string":"(window : Window) : Nil","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L1695","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L1695","def":{"name":"iconify_window","args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"LibGLFW.iconify_window(window.ptr)"}},{"id":"init:Bool-class-method","html_id":"init:Bool-class-method","name":"init","doc":"Initializes the GLFW library.\n\nThis function initializes the GLFW library. Before most GLFW functions can\nbe used, GLFW must be initialized, and before an application terminates GLFW\nshould be terminated in order to free any resources allocated during or\nafter initialization.\n\nIf this function fails, it calls `GLFW.terminate` before returning. If it\nsucceeds, you should call `GLFW.terminate` before the application exits.\n\nAdditional calls to this function after successful initialization but before\ntermination will return `true` immediately.\n\nReturns `true` if successful, or `false` if an\n`GLFW::Error` occurred.\n\nNOTE: Possible errors include `GLFW::Error::PlatformError`.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 1.0.\n```\nif GLFW.init\n  puts \"Initialized GLFW successfully!\"\n  # do your thing...\n  GLFW.terminate\nelse\n  puts \"Unable to initialize GLFW.\"\nend\n```","summary":"<p>Initializes the GLFW library.</p>","abstract":false,"args":[],"args_string":" : Bool","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/init/init.cr#L33","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/init/init.cr#L33","def":{"name":"init","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"LibGLFW.init == LibGLFW::TRUE ? true : false"}},{"id":"joystick_present(joy:Joystick):Bool-class-method","html_id":"joystick_present(joy:Joystick):Bool-class-method","name":"joystick_present","doc":"Returns whether the specified joystick is present.\n\nThis function returns whether the specified joystick is present.\n\n`Parameters:`\n\n*`joy`* The joystick to query.\n\nReturns `true` if the joystick is present, or `false` otherwise.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized`, `GLFW::Error::InvalidEnum`\nand `GLFW::Error::PlatformError`.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 3.0.","summary":"<p>Returns whether the specified joystick is present.</p>","abstract":false,"args":[{"name":"joy","doc":null,"default_value":"","external_name":"joy","restriction":"Joystick"}],"args_string":"(joy : Joystick) : Bool","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/input/input.cr#L926","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/input/input.cr#L926","def":{"name":"joystick_present","args":[{"name":"joy","doc":null,"default_value":"","external_name":"joy","restriction":"Joystick"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"(LibGLFW.joystick_present(joy.value)) == LibGLFW::TRUE ? true : false"}},{"id":"make_context_current(window:Window?):Nil-class-method","html_id":"make_context_current(window:Window?):Nil-class-method","name":"make_context_current","doc":"Makes the context of the specified window current for the calling thread.\n\nThis function makes the OpenGL or OpenGL ES context of the specified window\ncurrent on the calling thread. A context can only be made current on\na single thread at a time and each thread can have only a single current\ncontext at a time.\n\nBy default, making a context non-current implicitly forces a pipeline flush.\nOn machines that support `GL_KHR_context_flush_control`, you can control\nwhether a context performs this flush by calling\n`GLFW.window_hint_context_release_behavior` method.\n\nThe specified window must have an OpenGL or OpenGL ES context. Specifying\na window without a context will generate a `GLFW::Error::NoWindowContext` error.\n\n`Parameters:`\n\n*`window`* The window whose context to make current, or `nil` to\ndetach the current context.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized`, `GLFW::Error::NoWindowContext`\nand `GLFW::Error::PlatformError`.\n\nNOTE: This function may be called from any thread.\n\nNOTE: Added in version 3.0.\n```\nif GLFW.init && (window = GLFW.create_window(640, 480, \"Window\"))\n  GLFW.make_context_current(window)\n  # do your thing...\n  GLFW.terminate\nend\n```","summary":"<p>Makes the context of the specified window current for the calling thread.</p>","abstract":false,"args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window | ::Nil"}],"args_string":"(window : Window?) : Nil","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/context/context.cr#L36","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/context/context.cr#L36","def":{"name":"make_context_current","args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"LibGLFW.make_context_current(window ? window.ptr : nil)"}},{"id":"maximize_window(window:Window):Nil-class-method","html_id":"maximize_window(window:Window):Nil-class-method","name":"maximize_window","doc":"Maximizes the specified window.\n\nThis function maximizes the specified window if it was previously not\nmaximized. If the window is already maximized, this function does nothing.\n\nIf the specified window is a full screen window, this function does nothing.\n\n`Parameters:`\n\n*`window`* The window to maximize.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized` and `GLFW::Error::PlatformError`.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in GLFW 3.2.\n```\nif GLFW.init\n  if window = GLFW.create_window(640, 480, \"Window\")\n    GLFW.maximize_window(window)\n  end\n  GLFW.terminate\nend\n```","summary":"<p>Maximizes the specified window.</p>","abstract":false,"args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"args_string":"(window : Window) : Nil","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L1755","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L1755","def":{"name":"maximize_window","args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"LibGLFW.maximize_window(window.ptr)"}},{"id":"poll_events:Nil-class-method","html_id":"poll_events:Nil-class-method","name":"poll_events","doc":"Processes all pending events.\n\nThis function processes only those events that are already in the event\nqueue and then returns immediately. Processing events will cause the window\nand input callbacks associated with those events to be called.\n\nOn some platforms, a window move, resize or menu operation will cause event\nprocessing to block. This is due to how event processing is designed on\nthose platforms. You can set the window refresh callback using \n`GLFW.set_window_refresh_callback` to redraw the contents of\nyour window when necessary during such operations.\n\nOn some platforms, certain events are sent directly to the application\nwithout going through the event queue, causing callbacks to be called\noutside of a call to one of the event processing functions.\n\nEvent processing is not required for joystick input to work.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized` and `GLFW::Error::PlatformError`.\n\nNOTE: This function must not be called from a callback.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 1.0.\n```\nif GLFW.init && (window = GLFW.create_window(640, 480, \"Window\"))\n  while !GLFW.window_should_close(window)\n    GLFW.poll_events\n    GLFW.swap_buffers(window)\n  end\nend\n```","summary":"<p>Processes all pending events.</p>","abstract":false,"args":[],"args_string":" : Nil","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L2630","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L2630","def":{"name":"poll_events","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"LibGLFW.poll_events"}},{"id":"post_empty_event:Nil-class-method","html_id":"post_empty_event:Nil-class-method","name":"post_empty_event","doc":"Posts an empty event to the event queue.\n\nThis function posts an empty event from the current thread to the event\nqueue, causing `GLFW.wait_events` or `GLFW.wait_events_timeout` to return.\n\nIf no windows exist, this function returns immediately. For synchronization\nof threads in applications that do not create windows, use your threading\nlibrary of choice.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized` and `GLFW::Error::PlatformError`.\n\nNOTE: This function may be called from any thread.\n\nNOTE: Added in version 3.1.","summary":"<p>Posts an empty event to the event queue.</p>","abstract":false,"args":[],"args_string":" : Nil","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L2741","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L2741","def":{"name":"post_empty_event","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"LibGLFW.post_empty_event"}},{"id":"restore_window(window:Window):Nil-class-method","html_id":"restore_window(window:Window):Nil-class-method","name":"restore_window","doc":"Restores the specified window.\n\nThis function restores the specified window if it was previously iconified\n(minimized) or maximized. If the window is already restored, this function\ndoes nothing.\n\nIf the specified window is a full screen window, the resolution chosen for\nthe window is restored on the selected monitor.\n\n`Parameters:`\n\n*`window`* The window to restore.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized` and `GLFW::Error::PlatformError`.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 2.1.\n```\nif GLFW.init\n  if window = GLFW.create_window(640, 480, \"Window\")\n    GLFW.restore_window(window)\n  end\n  GLFW.terminate\nend\n```","summary":"<p>Restores the specified window.</p>","abstract":false,"args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"args_string":"(window : Window) : Nil","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L1726","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L1726","def":{"name":"restore_window","args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"LibGLFW.restore_window(window.ptr)"}},{"id":"set_char_callback(window:Window,&block:Window,Char->Nil):Proc(Window,Char,Nil)?-class-method","html_id":"set_char_callback(window:Window,&amp;block:Window,Char-&gt;Nil):Proc(Window,Char,Nil)?-class-method","name":"set_char_callback","doc":"Sets the Unicode character callback.\n\nThis function sets the character callback of the specified window, which is\ncalled when a Unicode character is input.\n\nThe character callback is intended for Unicode text input. As it deals with\ncharacters, it is keyboard layout dependent, whereas the key callback set\nusing `GLFW.set_key_callback` is not. Characters do not map 1:1\nto physical keys, as a key may produce zero, one or more characters. If you\nwant to know whether a specific physical key was pressed or released, use\nthe key callback instead.\n\nThe character callback behaves as system text input normally does and will\nnot be called if modifier keys are held down that would prevent normal text\ninput on that platform, for example a Super (Command) key on OS X or Alt key\non Windows. There is a character with modifiers callback which you can set\nusing `GLFW.set_char_mods_callback` that receives these events.\n\n`Parameters:`\n\n*`window`* The window whose callback to set.\n\n*`block`* The new char callback.\n\nReturns the previously set callback, or `nil` if no callback was set.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized`.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 2.4.\n```\nUSING_METHOD = true\nUSING_MACRO = true\n\ndef char_callback(window : GLFW::Window, char : Char)\n  puts \"char: #{char}\"\nend\n\nif GLFW.init && (window = GLFW.create_window(640, 480, \"Window\"))\n  GLFW.make_context_current(window)\n\n  if USING_METHOD\n    if USING_MACRO\n      # macro with the same name allows you to avoid writing boilerplate code, \n      # but compiler errors will be more difficult to understand.\n      GLFW.set_char_callback(window, char_callback)\n    else\n      GLFW.set_char_callback(window, &->char_callback(GLFW::Window, Char))\n    end\n  else\n    GLFW.set_char_callback(window) do |window, char|\n      puts \"char: #{char}\"\n    end\n  end\n\n  while !GLFW.window_should_close(window)\n    GLFW.poll_events\n    GLFW.swap_buffers(window)\n  end\n\n  GLFW.terminate\nend\n```","summary":"<p>Sets the Unicode character callback.</p>","abstract":false,"args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"args_string":"(window : Window, &block : Window, Char -> Nil) : Proc(Window, Char, Nil)?","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/input/input.cr#L478","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/input/input.cr#L478","def":{"name":"set_char_callback","args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"double_splat":null,"splat_index":null,"yields":2,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(Window, Char -> Nil)"},"return_type":"Proc(Window, Char, Nil) | ::Nil","visibility":"Public","body":"hash = window.hash\nold_callback = @@char_callbacks[hash]?\n@@char_callbacks[hash] = block\nLibGLFW.set_char_callback(window.ptr, ->(window : ::Pointer(LibGLFW::Window), codepoint : UInt32) do\n  if cb = @@char_callbacks[window.hash]?\n    cb.call(window.unsafe_as(Window), codepoint.chr)\n  end\nend)\nold_callback\n"}},{"id":"set_char_mods_callback(window:Window,&block:Window,Char,Mod->Nil):Proc(Window,Char,Mod,Nil)?-class-method","html_id":"set_char_mods_callback(window:Window,&amp;block:Window,Char,Mod-&gt;Nil):Proc(Window,Char,Mod,Nil)?-class-method","name":"set_char_mods_callback","doc":"Sets the Unicode character with modifiers callback.\n\nThis function sets the character with modifiers callback of the specified\nwindow, which is called when a Unicode character is input regardless of what\nmodifier keys are used.\n\nThe character with modifiers callback is intended for implementing custom\nUnicode character input. For regular Unicode text input, use the\n`GLFW.set_char_callback`. Like the character\ncallback, the character with modifiers callback deals with characters and is\nkeyboard layout dependent. Characters do not map 1:1 to physical keys, as\na key may produce zero, one or more characters. If you want to know whether\na specific physical key was pressed or released, use the\n`GLFW.set_key_callback` instead.\n\n`Parameters:`\n\n*`window`* The window whose callback to set.\n\n*`block`* The new char mods callback.\n\nReturns the previously set callback, or `nil` if no callback was set.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 3.1.\n```\nUSING_METHOD = true\nUSING_MACRO = true\n\ndef char_mods_callback(window : GLFW::Window, char : Char, mods : GLFW::Mod)\n  puts \"char: #{char} mods: #{mods}\"\nend\n\nif GLFW.init && (window = GLFW.create_window(640, 480, \"Window\"))\n  GLFW.make_context_current(window)\n\n  if USING_METHOD\n    if USING_MACRO\n      # macro with the same name allows you to avoid writing boilerplate code, \n      # but compiler errors will be more difficult to understand.\n      GLFW.set_char_mods_callback(window, char_mods_callback)\n    else\n      GLFW.set_char_mods_callback(window, &->char_mods_callback(GLFW::Window, Char, GLFW::Mod))\n    end\n  else\n    GLFW.set_char_mods_callback(window) do |window, char, mods|\n      puts \"char: #{char} mods: #{mods}\"\n    end\n  end\n\n  while !GLFW.window_should_close(window)\n    GLFW.poll_events\n    GLFW.swap_buffers(window)\n  end\n\n  GLFW.terminate\nend\n```","summary":"<p>Sets the Unicode character with modifiers callback.</p>","abstract":false,"args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"args_string":"(window : Window, &block : Window, Char, Mod -> Nil) : Proc(Window, Char, Mod, Nil)?","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/input/input.cr#L553","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/input/input.cr#L553","def":{"name":"set_char_mods_callback","args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"double_splat":null,"splat_index":null,"yields":3,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(Window, Char, Mod -> Nil)"},"return_type":"Proc(Window, Char, Mod, Nil) | ::Nil","visibility":"Public","body":"hash = window.hash\nold_callback = @@char_mods_callbacks[hash]?\n@@char_mods_callbacks[hash] = block\nLibGLFW.set_char_mods_callback(window.ptr, ->(window : ::Pointer(LibGLFW::Window), codepoint : UInt32, mods : Int32) do\n  if cb = @@char_mods_callbacks[window.hash]?\n    cb.call(window.unsafe_as(Window), codepoint.chr, Mod.new(mods))\n  end\nend)\nold_callback\n"}},{"id":"set_clipboard_string(window:Window,string:String):Nil-class-method","html_id":"set_clipboard_string(window:Window,string:String):Nil-class-method","name":"set_clipboard_string","doc":"Sets the clipboard to the specified string.\n\nThis function sets the system clipboard to the specified, UTF-8 encoded\nstring.\n\n`Parameters:`\n\n*`window`* The window that will own the clipboard contents.\n\n*`string`* A UTF-8 encoded string.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized` and `GLFW::Error::PlatformError`.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 3.0.","summary":"<p>Sets the clipboard to the specified string.</p>","abstract":false,"args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"},{"name":"string","doc":null,"default_value":"","external_name":"string","restriction":"String"}],"args_string":"(window : Window, string : String) : Nil","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/input/input.cr#L1112","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/input/input.cr#L1112","def":{"name":"set_clipboard_string","args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"},{"name":"string","doc":null,"default_value":"","external_name":"string","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"LibGLFW.set_clipboard_string(window.ptr, string.to_unsafe)"}},{"id":"set_cursor(window:Window,cursor:Cursor?):Nil-class-method","html_id":"set_cursor(window:Window,cursor:Cursor?):Nil-class-method","name":"set_cursor","doc":"Sets the cursor for the window.\n\nThis function sets the cursor image to be used when the cursor is over the\nclient area of the specified window. The set cursor will only be visible\nwhen the cursor mode of the window is `GLFW::CursorInputMode::Normal`.\n\nOn some platforms, the set cursor may not be visible unless the window also\nhas input focus.\n\n`Parameters:`\n\n*`window`* The window to set the cursor for.\n\n*`cursor`* The cursor to set, or `nil` to switch back to the default\narrow cursor.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized` and `GLFW::Error::PlatformError`.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 3.1.","summary":"<p>Sets the cursor for the window.</p>","abstract":false,"args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"},{"name":"cursor","doc":null,"default_value":"","external_name":"cursor","restriction":"Cursor | ::Nil"}],"args_string":"(window : Window, cursor : Cursor?) : Nil","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/input/input.cr#L318","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/input/input.cr#L318","def":{"name":"set_cursor","args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"},{"name":"cursor","doc":null,"default_value":"","external_name":"cursor","restriction":"Cursor | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"if cursor\n  LibGLFW.set_cursor(window.ptr, cursor.ptr)\nelse\n  LibGLFW.set_cursor(window, nil)\nend"}},{"id":"set_cursor_enter_callback(window:Window,&block:Window,Bool->Nil):Proc(Window,Bool,Nil)?-class-method","html_id":"set_cursor_enter_callback(window:Window,&amp;block:Window,Bool-&gt;Nil):Proc(Window,Bool,Nil)?-class-method","name":"set_cursor_enter_callback","doc":"Sets the cursor enter/exit callback.\n\nThis function sets the cursor boundary crossing callback of the specified\nwindow, which is called when the cursor enters or leaves the client area of\nthe window.\n\n`Parameters:`\n\n*`window`* The window whose callback to set.\n\n*`block`* The new cursor enter callback.\n\nReturns the previously set callback, or `nil` if no callback was set.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 3.0.\n```\nUSING_METHOD = true\nUSING_MACRO = true\n\ndef cursor_enter_callback(window : GLFW::Window, entered : Bool)\n  puts \"entered: #{entered}\"\nend\n\nif GLFW.init && (window = GLFW.create_window(640, 480, \"Window\"))\n  GLFW.make_context_current(window)\n\n  if USING_METHOD\n    if USING_MACRO\n      # macro with the same name allows you to avoid writing boilerplate code, \n      # but compiler errors will be more difficult to understand.\n      GLFW.set_cursor_enter_callback(window, cursor_enter_callback)\n    else\n      GLFW.set_cursor_enter_callback(window, &->cursor_enter_callback(GLFW::Window, Bool))\n    end\n  else\n    GLFW.set_cursor_enter_callback(window) do |window, entered|\n      puts \"entered: #{entered}\"\n    end\n  end\n\n  while !GLFW.window_should_close(window)\n    GLFW.poll_events\n    GLFW.swap_buffers(window)\n  end\n\n  GLFW.terminate\nend\n```","summary":"<p>Sets the cursor enter/exit callback.</p>","abstract":false,"args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"args_string":"(window : Window, &block : Window, Bool -> Nil) : Proc(Window, Bool, Nil)?","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/input/input.cr#L757","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/input/input.cr#L757","def":{"name":"set_cursor_enter_callback","args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"double_splat":null,"splat_index":null,"yields":2,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(Window, Bool -> Nil)"},"return_type":"Proc(Window, Bool, Nil) | ::Nil","visibility":"Public","body":"hash = window.hash\nold_callback = @@cursor_enter_callbacks[hash]?\n@@cursor_enter_callbacks[hash] = block\nLibGLFW.set_cursor_enter_callback(window.ptr, ->(window : ::Pointer(LibGLFW::Window), entered : Int32) do\n  if cb = @@cursor_enter_callbacks[window.hash]?\n    cb.call(window.unsafe_as(Window), entered == LibGLFW::TRUE ? true : false)\n  end\nend)\nold_callback\n"}},{"id":"set_cursor_input_mode(window:Window,value:CursorInputMode):Nil-class-method","html_id":"set_cursor_input_mode(window:Window,value:CursorInputMode):Nil-class-method","name":"set_cursor_input_mode","doc":"Sets an input option for the specified window.","summary":"<p>Sets an input option for the specified window.</p>","abstract":false,"args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"CursorInputMode"}],"args_string":"(window : Window, value : CursorInputMode) : Nil","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/input/input.cr#L22","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/input/input.cr#L22","def":{"name":"set_cursor_input_mode","args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"CursorInputMode"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"LibGLFW.set_input_mode(window.ptr, InputMode::Cursor.value, value.value)"}},{"id":"set_cursor_pos(window:Window,x:Float64,y:Float64):Nil-class-method","html_id":"set_cursor_pos(window:Window,x:Float64,y:Float64):Nil-class-method","name":"set_cursor_pos","doc":"Sets the position of the cursor, relative to the client area of the window.\n\nThis function sets the position, in screen coordinates, of the cursor\nrelative to the upper-left corner of the client area of the specified\nwindow. The window must have input focus. If the window does not have\ninput focus when this function is called, it fails silently.\n\nIf the cursor mode is `GLFW::CursorInputMode::Disabled` then the cursor \nposition is unconstrained and limited only by the minimum and maximum \nvalues of a `Float64`.\n\n`Parameters:`\n\n*`window`* The desired window.\n\n*`xpos`* The desired x-coordinate, relative to the left edge of the\n client area.\n\n*`ypos`* The desired y-coordinate, relative to the top edge of the\n client area.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized` and `GLFW::Error::PlatformError`.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 3.0.","summary":"<p>Sets the position of the cursor, relative to the client area of the window.</p>","abstract":false,"args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"},{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":"Float64"},{"name":"y","doc":null,"default_value":"","external_name":"y","restriction":"Float64"}],"args_string":"(window : Window, x : Float64, y : Float64) : Nil","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/input/input.cr#L166","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/input/input.cr#L166","def":{"name":"set_cursor_pos","args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"},{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":"Float64"},{"name":"y","doc":null,"default_value":"","external_name":"y","restriction":"Float64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"LibGLFW.set_cursor_pos(window.ptr, x, y)"}},{"id":"set_cursor_pos_callback(window:Window,&block:Window,Float64,Float64->Nil):Proc(Window,Float64,Float64,Nil)?-class-method","html_id":"set_cursor_pos_callback(window:Window,&amp;block:Window,Float64,Float64-&gt;Nil):Proc(Window,Float64,Float64,Nil)?-class-method","name":"set_cursor_pos_callback","doc":"Sets the cursor position callback.\n\nThis function sets the cursor position callback of the specified window,\nwhich is called when the cursor is moved. The callback is provided with the\nposition, in screen coordinates, relative to the upper-left corner of the\nclient area of the window.\n\n`Parameters:`\n\n*`window`* The window whose callback to set.\n\n*`block`* The new cursor pos callback.\n\nReturns the previously set callback, or `nil` if no callback was set.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 3.0.\n```\nUSING_METHOD = true\nUSING_MACRO = true\n\ndef cursor_pos_callback(window : GLFW::Window, x : Float64, y : Float64)\n  puts \"x: #{x} y: #{y}\"\nend\n\nif GLFW.init && (window = GLFW.create_window(640, 480, \"Window\"))\n  GLFW.make_context_current(window)\n\n  if USING_METHOD\n    if USING_MACRO\n      # macro with the same name allows you to avoid writing boilerplate code, \n      # but compiler errors will be more difficult to understand.\n      GLFW.set_cursor_pos_callback(window, cursor_pos_callback)\n    else\n      GLFW.set_cursor_pos_callback(window, &->cursor_pos_callback(GLFW::Window, Float64, Float64))\n    end\n  else\n    GLFW.set_cursor_pos_callback(window) do |window, x, y|\n      puts \"x: #{x} y: #{y}\"\n    end\n  end\n\n  while !GLFW.window_should_close(window)\n    GLFW.poll_events\n    GLFW.swap_buffers(window)\n  end\n\n  GLFW.terminate\nend\n```","summary":"<p>Sets the cursor position callback.</p>","abstract":false,"args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"args_string":"(window : Window, &block : Window, Float64, Float64 -> Nil) : Proc(Window, Float64, Float64, Nil)?","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/input/input.cr#L691","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/input/input.cr#L691","def":{"name":"set_cursor_pos_callback","args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"double_splat":null,"splat_index":null,"yields":3,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(Window, Float64, Float64 -> Nil)"},"return_type":"Proc(Window, Float64, Float64, Nil) | ::Nil","visibility":"Public","body":"hash = window.hash\nold_callback = @@cursor_pos_callbacks[hash]?\n@@cursor_pos_callbacks[hash] = block\nLibGLFW.set_cursor_pos_callback(window.ptr, ->(window : ::Pointer(LibGLFW::Window), xpos : Float64, ypos : Float64) do\n  if cb = @@cursor_pos_callbacks[window.hash]?\n    cb.call(window.unsafe_as(Window), xpos, ypos)\n  end\nend)\nold_callback\n"}},{"id":"set_drop_callback(window:Window,&block:Window,Array(String)->Nil):Proc(Window,Array(String),Nil)?-class-method","html_id":"set_drop_callback(window:Window,&amp;block:Window,Array(String)-&gt;Nil):Proc(Window,Array(String),Nil)?-class-method","name":"set_drop_callback","doc":"Sets the file drop callback.\n\nThis function sets the file drop callback of the specified window, which is\ncalled when one or more dragged files are dropped on the window.\n\n`Parameters:`\n\n*`window`* The window whose callback to set.\n\n*`block`* The new drop callback.\n\nReturns the previously set callback, or `nil` if no callback was set.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 3.1.\n```\nUSING_METHOD = true\nUSING_MACRO = true\n\ndef drop_callback(window : GLFW::Window, paths : Array(String))\n  puts \"paths: #{paths}\"\nend\n\nif GLFW.init && (window = GLFW.create_window(640, 480, \"Window\"))\n  GLFW.make_context_current(window)\n\n  if USING_METHOD\n    if USING_MACRO\n      # macro with the same name allows you to avoid writing boilerplate code, \n      # but compiler errors will be more difficult to understand.\n      GLFW.set_drop_callback(window, drop_callback)\n    else\n      GLFW.set_drop_callback(window, &->drop_callback(GLFW::Window, Array(String)))\n    end\n  else\n    GLFW.set_drop_callback(window) do |window, paths|\n      puts \"paths: #{paths}\"\n    end\n  end\n\n  while !GLFW.window_should_close(window)\n    GLFW.poll_events\n    GLFW.swap_buffers(window)\n  end\n\n  GLFW.terminate\nend\n```","summary":"<p>Sets the file drop callback.</p>","abstract":false,"args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"args_string":"(window : Window, &block : Window, Array(String) -> Nil) : Proc(Window, Array(String), Nil)?","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/input/input.cr#L891","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/input/input.cr#L891","def":{"name":"set_drop_callback","args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"double_splat":null,"splat_index":null,"yields":2,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(Window, Array(String) -> Nil)"},"return_type":"Proc(Window, Array(String), Nil) | ::Nil","visibility":"Public","body":"hash = window.hash\nold_callback = @@drop_callbacks[hash]?\n@@drop_callbacks[hash] = block\nLibGLFW.set_drop_callback(window, ->(window : ::Pointer(LibGLFW::Window), count : Int32, paths : ::Pointer(::Pointer(UInt8))) do\n  if cb = @@drop_callbacks[window.hash]?\n    new_paths = Array(String).new(count)\n    count.times do |i|\n      new_paths << (String.new(paths[i]))\n    end\n    cb.call(window.unsafe_as(Window), new_paths)\n  end\nend)\nold_callback\n"}},{"id":"set_error_callback(&block:Error,String->Nil):Proc(Error,String,Nil)?-class-method","html_id":"set_error_callback(&amp;block:Error,String-&gt;Nil):Proc(Error,String,Nil)?-class-method","name":"set_error_callback","doc":"Sets the error callback.\n\nThis function sets the error callback, which is called with an error code\nand a human-readable description each time a GLFW error occurs.\n\nThe error callback is called on the thread where the error occurred. If you\nare using GLFW from multiple threads, your error callback needs to be\nwritten accordingly.\n\nOnce set, the error callback remains set even after the library has been\nterminated.\n\n`Parameters:`\n\n *`block`* The new error callback.\n\nReturns the previously set callback or `nil` if no callback was set.\n\nNOTE: This function may be called before `GLFW.init`.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 3.0.\n```\nUSING_METHOD = true\nUSING_MACRO = true\n\ndef error_callback(error : GLFW::Error, string : String)\n  puts \"error: #{error} string: #{string}\"\nend\n\nif GLFW.init && (window = GLFW.create_window(640, 480, \"Window\"))\n  GLFW.make_context_current(window)\n\n  if USING_METHOD\n    if USING_MACRO\n      # macro with the same name allows you to avoid writing boilerplate code, \n      # but compiler errors will be more difficult to understand.\n      GLFW.set_error_callback(error_callback)\n    else\n      GLFW.set_error_callback(&->error_callback(GLFW::Error, String))\n    end\n  else\n    GLFW.set_error_callback do |error, string|\n      puts \"error: #{error} string: #{string}\"\n    end\n  end\n\n  while !GLFW.window_should_close(window)\n    GLFW.poll_events\n    GLFW.swap_buffers(window)\n  end\n\n  GLFW.terminate\nend\n```","summary":"<p>Sets the error callback.</p>","abstract":false,"args":[],"args_string":"(&block : Error, String -> Nil) : Proc(Error, String, Nil)?","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/init/init.cr#L182","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/init/init.cr#L182","def":{"name":"set_error_callback","args":[],"double_splat":null,"splat_index":null,"yields":2,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(Error, String -> Nil)"},"return_type":"Proc(Error, String, Nil) | ::Nil","visibility":"Public","body":"old_callback = @@error_callback\n@@error_callback = block\nLibGLFW.set_error_callback(->(error : Int32, description : ::Pointer(UInt8)) do\n  if cb = @@error_callback\n    cb.call(Error.new(error), String.new(description))\n  end\nend)\nold_callback\n"}},{"id":"set_framebuffer_size_callback(window:Window,&block:Window,Int32,Int32->Nil):Proc(Window,Int32,Int32,Nil)?-class-method","html_id":"set_framebuffer_size_callback(window:Window,&amp;block:Window,Int32,Int32-&gt;Nil):Proc(Window,Int32,Int32,Nil)?-class-method","name":"set_framebuffer_size_callback","doc":"Sets the framebuffer resize callback for the specified window.\n\nThis function sets the framebuffer resize callback of the specified window,\nwhich is called when the framebuffer of the specified window is resized.\n\n*`window`* The window whose callback to set.\n\n*`block`* The new framebuffer size callback.\n\nReturns the previously set callback, or `nil` if no callback was set.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 3.0.\n```\nUSING_METHOD = true\nUSING_MACRO = true\n\ndef framebuffer_size_callback(window : GLFW::Window, width : Int32, height : Int32)\n  puts \"width: #{width} height: #{height}\"\nend\n\nif GLFW.init && (window = GLFW.create_window(640, 480, \"Window\"))\n  GLFW.make_context_current(window)\n\n  if USING_METHOD\n    if USING_MACRO\n      # macro with the same name allows you to avoid writing boilerplate code, \n      # but compiler errors will be more difficult to understand.\n      GLFW.set_framebuffer_size_callback(window, framebuffer_size_callback)\n    else\n      GLFW.set_framebuffer_size_callback(window, &->framebuffer_size_callback(GLFW::Window, Int32, Int32))\n    end\n  else\n    GLFW.set_framebuffer_size_callback(window) do |window, width, height|\n      puts \"width: #{width} height: #{height}\"\n    end\n  end\n\n  while !GLFW.window_should_close(window)\n    GLFW.poll_events\n    GLFW.swap_buffers(window)\n  end\n\n  GLFW.terminate\nend\n```","summary":"<p>Sets the framebuffer resize callback for the specified window.</p>","abstract":false,"args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"args_string":"(window : Window, &block : Window, Int32, Int32 -> Nil) : Proc(Window, Int32, Int32, Nil)?","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L2582","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L2582","def":{"name":"set_framebuffer_size_callback","args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"double_splat":null,"splat_index":null,"yields":3,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(Window, Int32, Int32 -> Nil)"},"return_type":"Proc(Window, Int32, Int32, Nil) | ::Nil","visibility":"Public","body":"hash = window.hash\nold_callback = @@framebuffer_size_callbacks[hash]?\n@@framebuffer_size_callbacks[hash] = block\nLibGLFW.set_framebuffer_size_callback(window.ptr, ->(window : ::Pointer(LibGLFW::Window), width : Int32, height : Int32) do\n  if cb = @@framebuffer_size_callbacks[window.hash]?\n    cb.call(window.unsafe_as(Window), width, height)\n  end\nend)\nold_callback\n"}},{"id":"set_gamma(monitor:Monitor,gamma:Float32):Nil-class-method","html_id":"set_gamma(monitor:Monitor,gamma:Float32):Nil-class-method","name":"set_gamma","doc":"Generates a gamma ramp and sets it for the specified monitor.\n\nThis function generates a 256-element gamma ramp from the specified exponent\nand then calls `GLFW.set_gamma_ramp` with it. The value must be a finite\nnumber greater than zero.\n\n`Parameters:`\n\n*`monitor`* The monitor whose gamma ramp to set.\n*`gamma`* The desired exponent.\n\nNOTE: Possible errors include `GLFW::Error::InvalidValue` and `GLFW::Error::PlatformError`.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 3.0.\n```\nif GLFW.init && (monitor = GLFW.get_primary_monitor)\n  GLFW.set_gamma(monitor, 1.0f32)\nend\n```","summary":"<p>Generates a gamma ramp and sets it for the specified monitor.</p>","abstract":false,"args":[{"name":"monitor","doc":null,"default_value":"","external_name":"monitor","restriction":"Monitor"},{"name":"gamma","doc":null,"default_value":"","external_name":"gamma","restriction":"Float32"}],"args_string":"(monitor : Monitor, gamma : Float32) : Nil","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/monitor/monitor.cr#L338","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/monitor/monitor.cr#L338","def":{"name":"set_gamma","args":[{"name":"monitor","doc":null,"default_value":"","external_name":"monitor","restriction":"Monitor"},{"name":"gamma","doc":null,"default_value":"","external_name":"gamma","restriction":"Float32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"LibGLFW.set_gamma(monitor.ptr, gamma)"}},{"id":"set_gamma_ramp(monitor:Monitor,ramp:GammaRamp):Nil-class-method","html_id":"set_gamma_ramp(monitor:Monitor,ramp:GammaRamp):Nil-class-method","name":"set_gamma_ramp","doc":"Sets the current gamma ramp for the specified monitor.\n\nThis function sets the current gamma ramp for the specified monitor. The\noriginal gamma ramp for that monitor is saved by GLFW the first time this\nfunction is called and is restored by `GLFW.terminate`.\n\nNOTE: Possible errors include `GLFW::Error::PlatformError`.\n\nNOTE: Gamma ramp sizes other than 256 are not supported by all platforms or graphics hardware.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 3.0.\n```\nif GLFW.init && (monitor = GLFW.get_primary_monitor)\n  if gamma_ramp = GLFW.get_gamma_ramp(monitor)\n    GLFW.set_gamma_ramp(monitor, gamma_ramp)\n  end \nend\n```","summary":"<p>Sets the current gamma ramp for the specified monitor.</p>","abstract":false,"args":[{"name":"monitor","doc":null,"default_value":"","external_name":"monitor","restriction":"Monitor"},{"name":"ramp","doc":null,"default_value":"","external_name":"ramp","restriction":"GammaRamp"}],"args_string":"(monitor : Monitor, ramp : GammaRamp) : Nil","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/monitor/monitor.cr#L391","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/monitor/monitor.cr#L391","def":{"name":"set_gamma_ramp","args":[{"name":"monitor","doc":null,"default_value":"","external_name":"monitor","restriction":"Monitor"},{"name":"ramp","doc":null,"default_value":"","external_name":"ramp","restriction":"GammaRamp"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"LibGLFW.set_gamma_ramp(monitor.ptr, ramp.ptr)"}},{"id":"set_joystick_callback(&block:Joystick,Event->Nil):Proc(Joystick,Event,Nil)?-class-method","html_id":"set_joystick_callback(&amp;block:Joystick,Event-&gt;Nil):Proc(Joystick,Event,Nil)?-class-method","name":"set_joystick_callback","doc":"Sets the joystick configuration callback.\n\nThis function sets the joystick configuration callback.\nThis is called when a joystick is connected to or\ndisconnected from the system.\n\n`Parameters:`\n\n*`block`* The new joystick callback.\n\nReturns the previously set callback, or `nil` if no callback was set or the\nlibrary had not been initialized.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized`.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 3.2.\n```\nUSING_METHOD = true\nUSING_MACRO = true\n\ndef joystick_callback(joy : GLFW::Joystick, event : GLFW::Event)\n  puts \"joy: #{joy} event: #{event}\"\nend\n\nif GLFW.init && (window = GLFW.create_window(640, 480, \"Window\"))\n  GLFW.make_context_current(window)\n\n  if USING_METHOD\n    if USING_MACRO\n      # macro with the same name allows you to avoid writing boilerplate code, \n      # but compiler errors will be more difficult to understand.\n      GLFW.set_joystick_callback(joystick_callback)\n    else\n      GLFW.set_joystick_callback(&->joystick_callback(GLFW::Joystick, GLFW::Event))\n    end\n  else\n    GLFW.set_joystick_callback do |joy, event|\n      puts \"joy: #{joy} event: #{event}\"\n    end\n  end\n\n  while !GLFW.window_should_close(window)\n    GLFW.poll_events\n    GLFW.swap_buffers(window)\n  end\n\n  GLFW.terminate\nend\n```","summary":"<p>Sets the joystick configuration callback.</p>","abstract":false,"args":[],"args_string":"(&block : Joystick, Event -> Nil) : Proc(Joystick, Event, Nil)?","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/input/input.cr#L1082","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/input/input.cr#L1082","def":{"name":"set_joystick_callback","args":[],"double_splat":null,"splat_index":null,"yields":2,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(Joystick, Event -> Nil)"},"return_type":"Proc(Joystick, Event, Nil) | ::Nil","visibility":"Public","body":"old_callback = @@joystick_callback\n@@joystick_callback = block\nLibGLFW.set_joystick_callback(->(joystick : Int32, event : Int32) do\n  if cb = @@joystick_callback\n    cb.call(Joystick.new(joystick), Event.new(event))\n  end\nend)\nold_callback\n"}},{"id":"set_key_callback(window:Window,&block:Window,Key,Int32,Action,Mod->Nil):Proc(Window,Key,Int32,Action,Mod,Nil)?-class-method","html_id":"set_key_callback(window:Window,&amp;block:Window,Key,Int32,Action,Mod-&gt;Nil):Proc(Window,Key,Int32,Action,Mod,Nil)?-class-method","name":"set_key_callback","doc":"Sets the key callback.\n\nThis function sets the key callback of the specified window, which is called\nwhen a key is pressed, repeated or released.\n\nThe key functions deal with physical keys, with layout independent\nkey tokens named after their values in the standard US keyboard\nlayout. If you want to input text, use the `GLFW.set_char_callback` instead.\n\nWhen a window loses input focus, it will generate synthetic key release\nevents for all pressed keys. You can tell these events from user-generated\nevents by the fact that the synthetic ones are generated after the focus\nloss event has been processed, i.e. after the callback set by\n`GLFW.set_window_focus_callback` has been called.\n\nThe scancode of a key is specific to that platform or sometimes even to that\nmachine. Scancodes are intended to allow users to bind keys that don't have\na GLFW key token. Such keys have `key` set to `GLFW::Key::Unknown`, their\nstate is not saved and so it cannot be queried with `GLFW.get_key`.\n\nSometimes GLFW needs to generate synthetic key events, in which case the\nscancode may be zero.\n\n`Parameters:`\n\n*`window`* The window whose callback to set.\n\n*`block`* The new key callback.\n\nReturns the previously set callback, or `nil` if no callback was set.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized`.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 1.0.\n```\nUSING_METHOD = true\nUSING_MACRO = true\n\ndef key_callback(window : GLFW::Window, key : GLFW::Key, scancode : Int32, action : GLFW::Action, mods : GLFW::Mod)\n  puts \"key: #{key} action: #{action} mods: #{mods}\"\nend\n\nif GLFW.init && (window = GLFW.create_window(640, 480, \"Window\"))\n  GLFW.make_context_current(window)\n\n  if USING_METHOD\n    if USING_MACRO\n      # macro with the same name allows you to avoid writing boilerplate code, \n      # but compiler errors will be more difficult to understand.\n      GLFW.set_key_callback(window, key_callback)\n    else\n      GLFW.set_key_callback(window, &->key_callback(GLFW::Window, GLFW::Key, Int32, GLFW::Action, GLFW::Mod))\n    end\n  else\n    GLFW.set_key_callback(window) do |window, key, scancode, action, mods|\n      puts \"key: #{key} action: #{action} mods: #{mods}\"\n    end\n  end\n\n  while !GLFW.window_should_close(window)\n    GLFW.poll_events\n    GLFW.swap_buffers(window)\n  end\n\n  GLFW.terminate\nend\n```","summary":"<p>Sets the key callback.</p>","abstract":false,"args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"args_string":"(window : Window, &block : Window, Key, Int32, Action, Mod -> Nil) : Proc(Window, Key, Int32, Action, Mod, Nil)?","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/input/input.cr#L397","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/input/input.cr#L397","def":{"name":"set_key_callback","args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"double_splat":null,"splat_index":null,"yields":5,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(Window, Key, Int32, Action, Mod -> Nil)"},"return_type":"Proc(Window, Key, Int32, Action, Mod, Nil) | ::Nil","visibility":"Public","body":"hash = window.hash\nold_callback = @@key_callbacks[hash]?\n@@key_callbacks[hash] = block\nLibGLFW.set_key_callback(window.ptr, ->(window : ::Pointer(LibGLFW::Window), key : Int32, scancode : Int32, action : Int32, mods : Int32) do\n  if cb = @@key_callbacks[window.hash]\n    cb.call(window.unsafe_as(Window), Key.new(key), scancode, Action.new(action), Mod.new(mods))\n  end\nend)\nold_callback\n"}},{"id":"set_monitor_callback(&block:Monitor,Event->Nil):Proc(Monitor,Event,Nil)?-class-method","html_id":"set_monitor_callback(&amp;block:Monitor,Event-&gt;Nil):Proc(Monitor,Event,Nil)?-class-method","name":"set_monitor_callback","doc":"Sets the monitor configuration callback.\n\nThis function sets the monitor configuration callback. \nThis is called when a monitor is connected to or disconnected from the system.\n\n`Parameters:`\n\n*`block`* The new monitor callback.\n\nReturns the previously set callback, or `nil` if no callback was set or the\nlibrary had not been initialized.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized`.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 3.0.\n```\nUSING_METHOD = true\nUSING_MACRO = true\n\ndef monitor_callback(monitor : GLFW::Monitor, event : GLFW::Event)\n  puts \"monitor: #{monitor} event: #{event}\"\nend\n\nif GLFW.init && (window = GLFW.create_window(640, 480, \"Window\"))\n  GLFW.make_context_current(window)\n\n  if USING_METHOD\n    if USING_MACRO\n      # macro with the same name allows you to avoid writing boilerplate code, \n      # but compiler errors will be more difficult to understand.\n      GLFW.set_monitor_callback(monitor_callback)\n    else\n      GLFW.set_monitor_callback(&->monitor_callback(GLFW::Monitor, GLFW::Event))\n    end\n  else\n    GLFW.set_monitor_callback do |monitor, event|\n      puts \"monitor: #{monitor} event: #{event}\"\n    end\n  end\n\n  while !GLFW.window_should_close(window)\n    GLFW.poll_events\n    GLFW.swap_buffers(window)\n  end\n\n  GLFW.terminate\nend\n```","summary":"<p>Sets the monitor configuration callback.</p>","abstract":false,"args":[],"args_string":"(&block : Monitor, Event -> Nil) : Proc(Monitor, Event, Nil)?","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/monitor/monitor.cr#L234","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/monitor/monitor.cr#L234","def":{"name":"set_monitor_callback","args":[],"double_splat":null,"splat_index":null,"yields":2,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(Monitor, Event -> Nil)"},"return_type":"Proc(Monitor, Event, Nil) | ::Nil","visibility":"Public","body":"old_callback = @@monitor_callback\n@@monitor_callback = block\nLibGLFW.set_monitor_callback(->(monitor : ::Pointer(LibGLFW::Monitor), event : Int32) do\n  if cb = @@monitor_callback\n    cb.call(monitor.unsafe_as(Monitor), Event.new(event))\n  end\nend)\nold_callback\n"}},{"id":"set_mouse_button_callback(window:Window,&block:Window,MouseButton,Action,Mod->Nil):Proc(Window,MouseButton,Action,Mod,Nil)?-class-method","html_id":"set_mouse_button_callback(window:Window,&amp;block:Window,MouseButton,Action,Mod-&gt;Nil):Proc(Window,MouseButton,Action,Mod,Nil)?-class-method","name":"set_mouse_button_callback","doc":"Sets the mouse button callback.\n\nThis function sets the mouse button callback of the specified window, which\nis called when a mouse button is pressed or released.\n\nWhen a window loses input focus, it will generate synthetic mouse button\nrelease events for all pressed mouse buttons. You can tell these events\nfrom user-generated events by the fact that the synthetic ones are generated\nafter the focus loss event has been processed, i.e. after the callback set by\n`GLFW.set_window_focus_callback` has been called.\n\n`Parameters:`\n\n*`window`* The window whose callback to set.\n\n*`block`* The new mouse button callback.\n\nReturns the previously set callback, or `nil` if no callback was set.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 1.0.\n```\nUSING_METHOD = true\nUSING_MACRO = true\n\ndef mouse_button_callback(window : GLFW::Window, button : GLFW::MouseButton, action : GLFW::Action, mods : GLFW::Mod)\n  puts \"button: #{button} action: #{action} mods: #{mods}\"\nend\n\nif GLFW.init && (window = GLFW.create_window(640, 480, \"Window\"))\n  GLFW.make_context_current(window)\n\n  if USING_METHOD\n    if USING_MACRO\n      # macro with the same name allows you to avoid writing boilerplate code, \n      # but compiler errors will be more difficult to understand.\n      GLFW.set_mouse_button_callback(window, mouse_button_callback)\n    else\n      GLFW.set_mouse_button_callback(window, &->mouse_button_callback(GLFW::Window, GLFW::MouseButton, GLFW::Action, GLFW::Mod))\n    end\n  else\n    GLFW.set_mouse_button_callback(window) do |window, button, action, mods|\n      puts \"button: #{button} action: #{action} mods: #{mods}\"\n    end\n  end\n\n  while !GLFW.window_should_close(window)\n    GLFW.poll_events\n    GLFW.swap_buffers(window)\n  end\n\n  GLFW.terminate\nend\n```","summary":"<p>Sets the mouse button callback.</p>","abstract":false,"args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"args_string":"(window : Window, &block : Window, MouseButton, Action, Mod -> Nil) : Proc(Window, MouseButton, Action, Mod, Nil)?","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/input/input.cr#L624","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/input/input.cr#L624","def":{"name":"set_mouse_button_callback","args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"double_splat":null,"splat_index":null,"yields":4,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(Window, MouseButton, Action, Mod -> Nil)"},"return_type":"Proc(Window, MouseButton, Action, Mod, Nil) | ::Nil","visibility":"Public","body":"hash = window.hash\nold_callback = @@mouse_button_callbacks[hash]?\n@@mouse_button_callbacks[hash] = block\nLibGLFW.set_mouse_button_callback(window.ptr, ->(window : ::Pointer(LibGLFW::Window), button : Int32, action : Int32, mods : Int32) do\n  if cb = @@mouse_button_callbacks[window.hash]?\n    cb.call(window.unsafe_as(Window), MouseButton.new(button), Action.new(action), Mod.new(mods))\n  end\nend)\nold_callback\n"}},{"id":"set_scroll_callback(window:Window,&block:Window,Float64,Float64->Nil):Proc(Window,Float64,Float64,Nil)?-class-method","html_id":"set_scroll_callback(window:Window,&amp;block:Window,Float64,Float64-&gt;Nil):Proc(Window,Float64,Float64,Nil)?-class-method","name":"set_scroll_callback","doc":"Sets the scroll callback.\n\nThis function sets the scroll callback of the specified window, which is\ncalled when a scrolling device is used, such as a mouse wheel or scrolling\narea of a touchpad.\n\nThe scroll callback receives all scrolling input, like that from a mouse\nwheel or a touchpad scrolling area.\n\n`Parameters:`\n\n*`window`* The window whose callback to set.\n\n*`block`* The new scroll callback.\n\nReturns the previously set callback, or `nil` if no callback was set.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 3.0.\n```\nUSING_METHOD = true\nUSING_MACRO = true\n\ndef scroll_callback(window : GLFW::Window, dx : Float64, dy : Float64)\n  puts \"dx: #{dx} dy: #{dy}\"\nend\n\nif GLFW.init && (window = GLFW.create_window(640, 480, \"Window\"))\n  GLFW.make_context_current(window)\n\n  if USING_METHOD\n    if USING_MACRO\n      # macro with the same name allows you to avoid writing boilerplate code, \n      # but compiler errors will be more difficult to understand.\n      GLFW.set_scroll_callback(window, scroll_callback)\n    else\n      GLFW.set_scroll_callback(window, &->scroll_callback(GLFW::Window, Float64, Float64))\n    end\n  else\n    GLFW.set_scroll_callback(window) do |window, dx, dy|\n      puts \"dx: #{dx} dy: #{dy}\"\n    end\n  end\n\n  while !GLFW.window_should_close(window)\n    GLFW.poll_events\n    GLFW.swap_buffers(window)\n  end\n\n  GLFW.terminate\nend\n```","summary":"<p>Sets the scroll callback.</p>","abstract":false,"args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"args_string":"(window : Window, &block : Window, Float64, Float64 -> Nil) : Proc(Window, Float64, Float64, Nil)?","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/input/input.cr#L826","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/input/input.cr#L826","def":{"name":"set_scroll_callback","args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"double_splat":null,"splat_index":null,"yields":3,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(Window, Float64, Float64 -> Nil)"},"return_type":"Proc(Window, Float64, Float64, Nil) | ::Nil","visibility":"Public","body":"hash = window.hash\nold_callback = @@scroll_callbacks[hash]?\n@@scroll_callbacks[hash] = block\nLibGLFW.set_scroll_callback(window.ptr, ->(window : ::Pointer(LibGLFW::Window), dx : Float64, dy : Float64) do\n  if cb = @@scroll_callbacks[window.hash]?\n    cb.call(window.unsafe_as(Window), dx, dy)\n  end\nend)\nold_callback\n"}},{"id":"set_sticky_keys(window:Window,value:Bool):Nil-class-method","html_id":"set_sticky_keys(window:Window,value:Bool):Nil-class-method","name":"set_sticky_keys","doc":"Sets an input option for the specified window.","summary":"<p>Sets an input option for the specified window.</p>","abstract":false,"args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Bool"}],"args_string":"(window : Window, value : Bool) : Nil","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/input/input.cr#L28","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/input/input.cr#L28","def":{"name":"set_sticky_keys","args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"LibGLFW.set_input_mode(window.ptr, InputMode::StickyKeys.value, value == true ? LibGLFW::TRUE : LibGLFW::FALSE)"}},{"id":"set_sticky_mouse_buttons(window:Window,value:Bool):Nil-class-method","html_id":"set_sticky_mouse_buttons(window:Window,value:Bool):Nil-class-method","name":"set_sticky_mouse_buttons","doc":"Sets an input option for the specified window.","summary":"<p>Sets an input option for the specified window.</p>","abstract":false,"args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Bool"}],"args_string":"(window : Window, value : Bool) : Nil","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/input/input.cr#L34","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/input/input.cr#L34","def":{"name":"set_sticky_mouse_buttons","args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"LibGLFW.set_input_mode(window.ptr, InputMode::StickyMouseButtons.value, value == true ? LibGLFW::TRUE : LibGLFW::FALSE)"}},{"id":"set_time(time:Float64):Nil-class-method","html_id":"set_time(time:Float64):Nil-class-method","name":"set_time","doc":"Sets the GLFW timer.\n\nThis function sets the value of the GLFW timer. It then continues to count\nup from that value. The value must be a positive finite number less than\nor equal to 18446744073.0, which is approximately 584.5 years.\n\n`Parameters:`\n\n*`time`* The new value, in seconds.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized` and `GLFW::Error::InvalidValue`.\n\nNOTE: This function may be called from any thread. Reading and\nwriting of the internal timer offset is not atomic, so it needs to be\nexternally synchronized with calls to `GLFW.get_time`.\n\nNOTE: Added in version 2.2.","summary":"<p>Sets the GLFW timer.</p>","abstract":false,"args":[{"name":"time","doc":null,"default_value":"","external_name":"time","restriction":"Float64"}],"args_string":"(time : Float64) : Nil","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/input/input.cr#L1183","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/input/input.cr#L1183","def":{"name":"set_time","args":[{"name":"time","doc":null,"default_value":"","external_name":"time","restriction":"Float64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"LibGLFW.set_time(time)"}},{"id":"set_window_aspect_ratio(window:Window,numerator:Int32?,denominator:Int32?):Nil-class-method","html_id":"set_window_aspect_ratio(window:Window,numerator:Int32?,denominator:Int32?):Nil-class-method","name":"set_window_aspect_ratio","doc":"Sets the aspect ratio of the specified window.\n\nThis function sets the required aspect ratio of the client area of the\nspecified window. If the window is full screen, the aspect ratio only takes\neffect once it is made windowed. If the window is not resizable, this\nfunction does nothing.\n\nThe aspect ratio is specified as a numerator and a denominator and both\nvalues must be greater than zero. For example, the common 16:9 aspect ratio\nis specified as 16 and 9, respectively.\n\nIf the numerator and denominator is set to `nil` then the aspect\nratio limit is disabled.\n\nThe aspect ratio is applied immediately to a windowed mode window and may\ncause it to be resized.\n\n`Parameters:`\n\n*`window`* The window to set limits for.\n\n*`numerator`* The numerator of the desired aspect ratio, or `nil`.\n\n*`denominator`* The denominator of the desired aspect ratio, or `nil`.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized`, `GLFW::Error::InvalidValue`\nand `GLFW::Error::PlatformError`.\n\nNOTE: If you set size limits and an aspect ratio that conflict, the\nresults are undefined.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 3.2.\n```\nif GLFW.init\n  if window = GLFW.create_window(640, 480, \"Window\")\n    GLFW.set_window_aspect_ratio(window, 4, 3)\n  end\n  GLFW.terminate\nend\n```","summary":"<p>Sets the aspect ratio of the specified window.</p>","abstract":false,"args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"},{"name":"numerator","doc":null,"default_value":"","external_name":"numerator","restriction":"Int32 | ::Nil"},{"name":"denominator","doc":null,"default_value":"","external_name":"denominator","restriction":"Int32 | ::Nil"}],"args_string":"(window : Window, numerator : Int32?, denominator : Int32?) : Nil","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L1547","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L1547","def":{"name":"set_window_aspect_ratio","args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"},{"name":"numerator","doc":null,"default_value":"","external_name":"numerator","restriction":"Int32 | ::Nil"},{"name":"denominator","doc":null,"default_value":"","external_name":"denominator","restriction":"Int32 | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"LibGLFW.set_window_aspect_ratio(window.ptr, numerator ? numerator : LibGLFW::DONT_CARE, denominator ? denominator : LibGLFW::DONT_CARE)"}},{"id":"set_window_close_callback(window:Window,&block:Window->Nil):Proc(Window,Nil)?-class-method","html_id":"set_window_close_callback(window:Window,&amp;block:Window-&gt;Nil):Proc(Window,Nil)?-class-method","name":"set_window_close_callback","doc":"Sets the close callback for the specified window.\n\nThis function sets the close callback of the specified window, which is\ncalled when the user attempts to close the window, for example by clicking\nthe close widget in the title bar.\n\nThe close flag is set before this callback is called, but you can modify it\nat any time with `GLFW.set_window_should_close`.\n\nThe close callback is not triggered by `GLFW.destroy_window`.\n\n`Parameters:`\n\n*`window`* The window whose callback to set.\n\n*`block`* The new window close callback.\n\nReturns the previously set callback, or `nil` if no callback was set.\n\nNOTE: On Mac OS X selecting quit from the application menu will trigger the close\ncallback for all windows.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 2.5.\n```\nUSING_METHOD = true\nUSING_MACRO = true\n\ndef window_close_callback(window : GLFW::Window)\n  puts \"closing #{window}\"\nend\n\nif GLFW.init && (window = GLFW.create_window(640, 480, \"Window\"))\n  GLFW.make_context_current(window)\n\n  if USING_METHOD\n    if USING_MACRO\n      # macro with the same name allows you to avoid writing boilerplate code, \n      # but compiler errors will be more difficult to understand.\n      GLFW.set_window_close_callback(window, window_close_callback)\n    else\n      GLFW.set_window_close_callback(window, &->window_close_callback(GLFW::Window))\n    end\n  else\n    GLFW.set_window_close_callback(window) do |window|\n      puts \"closing #{window}\"\n    end\n  end\n\n  while !GLFW.window_should_close(window)\n    GLFW.poll_events\n    GLFW.swap_buffers(window)\n  end\n\n  GLFW.terminate\nend\n```","summary":"<p>Sets the close callback for the specified window.</p>","abstract":false,"args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"args_string":"(window : Window, &block : Window -> Nil) : Proc(Window, Nil)?","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L2314","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L2314","def":{"name":"set_window_close_callback","args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(Window -> Nil)"},"return_type":"Proc(Window, Nil) | ::Nil","visibility":"Public","body":"hash = window.hash\nold_callback = @@close_callbacks[hash]?\n@@close_callbacks[hash] = block\nLibGLFW.set_window_close_callback(window.ptr, ->(window : ::Pointer(LibGLFW::Window)) do\n  if cb = @@close_callbacks[window.hash]?\n    cb.call(window.unsafe_as(Window))\n  end\nend)\nold_callback\n"}},{"id":"set_window_focus_callback(window:Window,&block:Window,Bool->Nil):Proc(Window,Bool,Nil)?-class-method","html_id":"set_window_focus_callback(window:Window,&amp;block:Window,Bool-&gt;Nil):Proc(Window,Bool,Nil)?-class-method","name":"set_window_focus_callback","doc":"Sets the focus callback for the specified window.\n\nThis function sets the focus callback of the specified window, which is\ncalled when the window gains or loses input focus.\n\nAfter the focus callback is called for a window that lost input focus,\nsynthetic key and mouse button release events will be generated for all such\nthat had been pressed. For more information, see `GLFW.set_key_callback`\nand `GLFW.set_mouse_button_callback`.\n\n`Parameters:`\n\n*`window`* The window whose callback to set.\n\n*`block`* The new window focus callback.\n\nReturns the previously set callback, or `nil` if no callback was set.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 3.0.\n```\nUSING_METHOD = true\nUSING_MACRO = true\n\ndef window_focus_callback(window : GLFW::Window, focused : Bool)\n  puts \"focused: #{focused}\"\nend\n\nif GLFW.init && (window = GLFW.create_window(640, 480, \"Window\"))\n  GLFW.make_context_current(window)\n\n  if USING_METHOD\n    if USING_MACRO\n      # macro with the same name allows you to avoid writing boilerplate code, \n      # but compiler errors will be more difficult to understand.\n      GLFW.set_window_focus_callback(window, window_focus_callback)\n    else\n      GLFW.set_window_focus_callback(window, &->window_focus_callback(GLFW::Window, Bool))\n    end\n  else\n    GLFW.set_window_focus_callback(window) do |window, focused|\n      puts \"focused: #{focused}\"\n    end\n  end\n\n  while !GLFW.window_should_close(window)\n    GLFW.poll_events\n    GLFW.swap_buffers(window)\n  end\n\n  GLFW.terminate\nend\n```","summary":"<p>Sets the focus callback for the specified window.</p>","abstract":false,"args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"args_string":"(window : Window, &block : Window, Bool -> Nil) : Proc(Window, Bool, Nil)?","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L2454","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L2454","def":{"name":"set_window_focus_callback","args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"double_splat":null,"splat_index":null,"yields":2,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(Window, Bool -> Nil)"},"return_type":"Proc(Window, Bool, Nil) | ::Nil","visibility":"Public","body":"hash = window.hash\nold_callback = @@focus_callbacks[hash]?\n@@focus_callbacks[hash] = block\nLibGLFW.set_window_focus_callback(window.ptr, ->(window : ::Pointer(LibGLFW::Window), focused : Int32) do\n  if cb = @@focus_callbacks[window.hash]?\n    cb.call(window.unsafe_as(Window), focused == LibGLFW::TRUE ? true : false)\n  end\nend)\nold_callback\n"}},{"id":"set_window_icon(window:Window,image:Image?):Nil-class-method","html_id":"set_window_icon(window:Window,image:Image?):Nil-class-method","name":"set_window_icon","doc":"Sets the icon for the specified window.\n\nThis function sets the icon of the specified window. If there\nis no image specified, the window reverts to its default icon.\n\nThe desired image size varies depending on platform and system settings.\nThe selected image will be rescaled as needed. Good sizes include 16x16,\n32x32 and 48x48.\n\n`Parameters:`\n\n*`window`* The window whose icon to set.\n\n*`image`* The image to create the icon from, or `nil` to revert to default icon.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized` and `GLFW::Error::PlatformError`.\n\nNOTE: On Mac OS X the GLFW window has no icon, as it is not a document\nwindow, so this function does nothing. The dock icon will be the same as\nthe application bundle's icon.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 3.2.","summary":"<p>Sets the icon for the specified window.</p>","abstract":false,"args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"},{"name":"image","doc":null,"default_value":"","external_name":"image","restriction":"Image | ::Nil"}],"args_string":"(window : Window, image : Image?) : Nil","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L1340","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L1340","def":{"name":"set_window_icon","args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"},{"name":"image","doc":null,"default_value":"","external_name":"image","restriction":"Image | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"if image\n  LibGLFW.set_window_icon(window.ptr, 1, image.to_unsafe)\nelse\n  LibGLFW.set_window_icon(window.ptr, 0, nil)\nend"}},{"id":"set_window_iconify_callback(window:Window,&block:Window,Bool->Nil):Proc(Window,Bool,Nil)?-class-method","html_id":"set_window_iconify_callback(window:Window,&amp;block:Window,Bool-&gt;Nil):Proc(Window,Bool,Nil)?-class-method","name":"set_window_iconify_callback","doc":"Sets the iconify callback for the specified window.\n\nThis function sets the iconification callback of the specified window, which\nis called when the window is iconified or restored.\n\n`Parameters:`\n\n*`window`* The window whose callback to set.\n\n*`block`* The new window iconify callback.\n\nReturns the previously set callback, or `nil` if no callback was set.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 3.0.\n```\nUSING_METHOD = true\nUSING_MACRO = true\n\ndef window_iconify_callback(window : GLFW::Window, iconified : Bool)\n  puts \"iconified: #{iconified}\"\nend\n\nif GLFW.init && (window = GLFW.create_window(640, 480, \"Window\"))\n  GLFW.make_context_current(window)\n\n  if USING_METHOD\n    if USING_MACRO\n      # macro with the same name allows you to avoid writing boilerplate code, \n      # but compiler errors will be more difficult to understand.\n      GLFW.set_window_iconify_callback(window, window_iconify_callback)\n    else\n      GLFW.set_window_iconify_callback(window, &->window_iconify_callback(GLFW::Window, Bool))\n    end\n  else\n    GLFW.set_window_iconify_callback(window) do |window, iconified|\n      puts \"iconified: #{iconified}\"\n    end\n  end\n\n  while !GLFW.window_should_close(window)\n    GLFW.poll_events\n    GLFW.swap_buffers(window)\n  end\n\n  GLFW.terminate\nend\n```","summary":"<p>Sets the iconify callback for the specified window.</p>","abstract":false,"args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"args_string":"(window : Window, &block : Window, Bool -> Nil) : Proc(Window, Bool, Nil)?","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L2519","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L2519","def":{"name":"set_window_iconify_callback","args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"double_splat":null,"splat_index":null,"yields":2,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(Window, Bool -> Nil)"},"return_type":"Proc(Window, Bool, Nil) | ::Nil","visibility":"Public","body":"hash = window.hash\nold_callback = @@iconify_callbacks[hash]?\n@@iconify_callbacks[hash] = block\nLibGLFW.set_window_iconify_callback(window.ptr, ->(window : ::Pointer(LibGLFW::Window), iconified : Int32) do\n  if cb = @@iconify_callbacks[window.hash]?\n    cb.call(window.unsafe_as(Window), iconified == LibGLFW::TRUE ? true : false)\n  end\nend)\nold_callback\n"}},{"id":"set_window_monitor(window:Window,monitor:Monitor?,xpos:Int32,ypos:Int32,width:Int32,height:Int32,refresh_rate:Int32?):Nil-class-method","html_id":"set_window_monitor(window:Window,monitor:Monitor?,xpos:Int32,ypos:Int32,width:Int32,height:Int32,refresh_rate:Int32?):Nil-class-method","name":"set_window_monitor","doc":"Sets the mode, monitor, video mode and placement of a window.\n\nThis function sets the monitor that the window uses for full screen mode or,\nif the monitor is `nil`, makes it windowed mode.\n\nWhen setting a monitor, this function updates the width, height and refresh\nrate of the desired video mode and switches to the video mode closest to it.\nThe window position is ignored when setting a monitor.\n\nWhen the monitor is `nil`, the position, width and height are used to\nplace the window client area. The refresh rate is ignored when no monitor\nis specified.\n\nIf you only wish to update the resolution of a full screen window or the\nsize of a windowed mode window, see `GLFW.set_window_size`.\n\nWhen a window transitions from full screen to windowed mode, this function\nrestores any previous window settings such as whether it is decorated,\nfloating, resizable, has size or aspect ratio limits, etc..\n\n`Parameters:`\n\n*`window`* The window whose monitor, size or video mode to set.\n\n`monitor` The desired monitor, or `nil` to set windowed mode.\n\n`xpos` The desired x-coordinate of the upper-left corner of the\n client area.\n\n`ypos` The desired y-coordinate of the upper-left corner of the\n client area.\n\n`width` The desired width, in screen coordinates, of the client area\n or video mode.\n\n`height` The desired height, in screen coordinates, of the client\n area or video mode.\n\n`refresh_rate` The desired refresh rate, in Hz, of the video mode, or `nil`.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized` and `GLFW::Error::PlatformError`.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 3.2.\n```\nif GLFW.init\n  if window = GLFW.create_window(640, 480, \"Window\")\n    GLFW.set_window_monitor(window, nil, 0, 0, 320, 240, nil)\n  end\n  GLFW.terminate\nend\n```","summary":"<p>Sets the mode, monitor, video mode and placement of a window.</p>","abstract":false,"args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"},{"name":"monitor","doc":null,"default_value":"","external_name":"monitor","restriction":"Monitor | ::Nil"},{"name":"xpos","doc":null,"default_value":"","external_name":"xpos","restriction":"Int32"},{"name":"ypos","doc":null,"default_value":"","external_name":"ypos","restriction":"Int32"},{"name":"width","doc":null,"default_value":"","external_name":"width","restriction":"Int32"},{"name":"height","doc":null,"default_value":"","external_name":"height","restriction":"Int32"},{"name":"refresh_rate","doc":null,"default_value":"","external_name":"refresh_rate","restriction":"Int32 | ::Nil"}],"args_string":"(window : Window, monitor : Monitor?, xpos : Int32, ypos : Int32, width : Int32, height : Int32, refresh_rate : Int32?) : Nil","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L1936","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L1936","def":{"name":"set_window_monitor","args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"},{"name":"monitor","doc":null,"default_value":"","external_name":"monitor","restriction":"Monitor | ::Nil"},{"name":"xpos","doc":null,"default_value":"","external_name":"xpos","restriction":"Int32"},{"name":"ypos","doc":null,"default_value":"","external_name":"ypos","restriction":"Int32"},{"name":"width","doc":null,"default_value":"","external_name":"width","restriction":"Int32"},{"name":"height","doc":null,"default_value":"","external_name":"height","restriction":"Int32"},{"name":"refresh_rate","doc":null,"default_value":"","external_name":"refresh_rate","restriction":"Int32 | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"LibGLFW.set_window_monitor(window.ptr, monitor ? monitor.ptr : nil, xpos, ypos, width, height, refresh_rate ? refresh_rate : LibGLFW::DONT_CARE)"}},{"id":"set_window_pos(window:Window,pos:::NamedTuple()):Nil-class-method","html_id":"set_window_pos(window:Window,pos:::NamedTuple()):Nil-class-method","name":"set_window_pos","doc":"Sets the position of the client area of the specified window.\n\nThis function sets the position, in screen coordinates, of the upper-left\ncorner of the client area of the specified windowed mode window. If the\nwindow is a full screen window, this function does nothing.\n\nThe window manager may put limits on what positions are allowed. GLFW\ncannot and should not override these limits.\n\n`Parameters:`\n\n*`window`* The window to query.\n\n*`pos`* The x and y coordinate of the upper-left corner of the client area\nas NamedTuple with keys: `x : Int32`, `y : Int32`.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized` and `GLFW::Error::PlatformError`.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 1.0.\n```\nif GLFW.init\n  if window = GLFW.create_window(640, 480, \"Window\")\n    GLFW.set_window_pos(window, {x: 0, y: 0})\n  end\n  GLFW.terminate\nend\n```","summary":"<p>Sets the position of the client area of the specified window.</p>","abstract":false,"args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"},{"name":"pos","doc":null,"default_value":"","external_name":"pos","restriction":"::NamedTuple(x: Int32, y: Int32)"}],"args_string":"(window : Window, pos : ::NamedTuple()) : Nil","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L1411","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L1411","def":{"name":"set_window_pos","args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"},{"name":"pos","doc":null,"default_value":"","external_name":"pos","restriction":"::NamedTuple(x: Int32, y: Int32)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"LibGLFW.set_window_pos(window.ptr, pos[:x], pos[:y])"}},{"id":"set_window_pos_callback(window:Window,&block:Window,Int32,Int32->Nil):Proc(Window,Int32,Int32,Nil)?-class-method","html_id":"set_window_pos_callback(window:Window,&amp;block:Window,Int32,Int32-&gt;Nil):Proc(Window,Int32,Int32,Nil)?-class-method","name":"set_window_pos_callback","doc":"Sets the position callback for the specified window.\n\nThis function sets the position callback of the specified window, which is\ncalled when the window is moved. The callback is provided with the screen\nposition of the upper-left corner of the client area of the window.\n\n`Parameters:`\n\n*`window`* The window whose callback to set.\n\n*`block`* The new window pos callback.\n\nReturns the previously set callback, or `nil` if no callback was set.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 3.0.\n```\nUSING_METHOD = true\nUSING_MACRO = true\n\ndef window_pos_callback(window : GLFW::Window, x : Int32, y : Int32)\n  puts \"x: #{x} y: #{y}\"\nend\n\nif GLFW.init && (window = GLFW.create_window(640, 480, \"Window\"))\n  GLFW.make_context_current(window)\n\n  if USING_METHOD\n    if USING_MACRO\n      # macro with the same name allows you to avoid writing boilerplate code, \n      # but compiler errors will be more difficult to understand.\n      GLFW.set_window_pos_callback(window, window_pos_callback)\n    else\n      GLFW.set_window_pos_callback(window, &->window_pos_callback(GLFW::Window, Int32, Int32))\n    end\n  else\n    GLFW.set_window_pos_callback(window) do |window, x, y|\n      puts \"x: #{x} y: #{y}\"\n    end\n  end\n\n  while !GLFW.window_should_close(window)\n    GLFW.poll_events\n    GLFW.swap_buffers(window)\n  end\n\n  GLFW.terminate\nend\n```","summary":"<p>Sets the position callback for the specified window.</p>","abstract":false,"args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"args_string":"(window : Window, &block : Window, Int32, Int32 -> Nil) : Proc(Window, Int32, Int32, Nil)?","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L2174","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L2174","def":{"name":"set_window_pos_callback","args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"double_splat":null,"splat_index":null,"yields":3,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(Window, Int32, Int32 -> Nil)"},"return_type":"Proc(Window, Int32, Int32, Nil) | ::Nil","visibility":"Public","body":"hash = window.hash\nold_callback = @@pos_callbacks[hash]?\n@@pos_callbacks[hash] = block\nLibGLFW.set_window_pos_callback(window.ptr, ->(window : ::Pointer(LibGLFW::Window), x : Int32, y : Int32) do\n  if cb = @@pos_callbacks[window.hash]?\n    cb.call(window.unsafe_as(Window), x, y)\n  end\nend)\nold_callback\n"}},{"id":"set_window_refresh_callback(window:Window,&block:Window->Nil):Proc(Window,Nil)?-class-method","html_id":"set_window_refresh_callback(window:Window,&amp;block:Window-&gt;Nil):Proc(Window,Nil)?-class-method","name":"set_window_refresh_callback","doc":"Sets the refresh callback for the specified window.\n\nThis function sets the refresh callback of the specified window, which is\ncalled when the client area of the window needs to be redrawn, for example\nif the window has been exposed after having been covered by another window.\n\nOn compositing window systems such as Aero, Compiz or Aqua, where the window\ncontents are saved off-screen, this callback may be called only very\ninfrequently or never at all.\n\n`Parameters:`\n\n*`window`* The window whose callback to set.\n\n*`block`* The new window refresh callback.\n\nReturns the previously set callback, or `nil` if no callback was set.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 2.5.\n```\nUSING_METHOD = true\nUSING_MACRO = true\n\ndef window_refresh_callback(window : GLFW::Window)\n  puts \"refreshing #{window}\"\nend\n\nif GLFW.init && (window = GLFW.create_window(640, 480, \"Window\"))\n  GLFW.make_context_current(window)\n\n  if USING_METHOD\n    if USING_MACRO\n      # macro with the same name allows you to avoid writing boilerplate code, \n      # but compiler errors will be more difficult to understand.\n      GLFW.set_window_refresh_callback(window, window_refresh_callback)\n    else\n      GLFW.set_window_refresh_callback(window, &->window_refresh_callback(GLFW::Window))\n    end\n  else\n    GLFW.set_window_refresh_callback(window) do |window|\n      puts \"refreshing #{window}\"\n    end\n  end\n\n  while !GLFW.window_should_close(window)\n    GLFW.poll_events\n    GLFW.swap_buffers(window)\n  end\n\n  GLFW.terminate\nend\n```","summary":"<p>Sets the refresh callback for the specified window.</p>","abstract":false,"args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"args_string":"(window : Window, &block : Window -> Nil) : Proc(Window, Nil)?","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L2384","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L2384","def":{"name":"set_window_refresh_callback","args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(Window -> Nil)"},"return_type":"Proc(Window, Nil) | ::Nil","visibility":"Public","body":"hash = window.hash\nold_callback = @@refresh_callbacks[hash]?\n@@refresh_callbacks[hash] = block\nLibGLFW.set_window_refresh_callback(window.ptr, ->(window : ::Pointer(LibGLFW::Window)) do\n  if cb = @@refresh_callbacks[window.hash]?\n    cb.call(window.unsafe_as(Window))\n  end\nend)\nold_callback\n"}},{"id":"set_window_should_close(window:Window,value:Bool):Nil-class-method","html_id":"set_window_should_close(window:Window,value:Bool):Nil-class-method","name":"set_window_should_close","doc":"Sets the close flag of the specified window.\n\nThis function sets the value of the close flag of the specified window.\nThis can be used to override the user's attempt to close the window, or\nto signal that it should be closed.\n\n`Parameters:`\n\n *`window`* The window whose flag to change.\n\n *`value`* The new value.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized`.\n\nNOTE: This function may be called from any thread. Access is not\nsynchronized.\n\nNOTE: Added in version 3.0.","summary":"<p>Sets the close flag of the specified window.</p>","abstract":false,"args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Bool"}],"args_string":"(window : Window, value : Bool) : Nil","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L1287","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L1287","def":{"name":"set_window_should_close","args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"LibGLFW.set_window_should_close(window.ptr, value == true ? LibGLFW::TRUE : LibGLFW::FALSE)"}},{"id":"set_window_size(window:Window,width:Int32,height:Int32):Nil-class-method","html_id":"set_window_size(window:Window,width:Int32,height:Int32):Nil-class-method","name":"set_window_size","doc":"Sets the size of the client area of the specified window.\n\nThis function sets the size, in screen coordinates, of the client area of\nthe specified window.\n\nFor full screen windows, this function updates the resolution of its desired\nvideo mode and switches to the video mode closest to it, without affecting\nthe window's context. As the context is unaffected, the bit depths of the\nframebuffer remain unchanged.\n\nIf you wish to update the refresh rate of the desired video mode in addition\nto its resolution, see `GLFW.set_window_monitor`.\n\nThe window manager may put limits on what sizes are allowed. GLFW cannot\nand should not override these limits.\n\n`Parameters:`\n\n*`window`* The window to resize.\n\n*`width`* The desired width, in screen coordinates, of the window client area.\n\n*`height`* The desired height, in screen coordinates, of the window client area.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized` and `GLFW::Error::PlatformError`.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 1.0.\n```\nif GLFW.init\n  if window = GLFW.create_window(640, 480, \"Window\")\n    GLFW.set_window_size(window, 320, 240)\n  end\n  GLFW.terminate\nend\n```","summary":"<p>Sets the size of the client area of the specified window.</p>","abstract":false,"args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"},{"name":"width","doc":null,"default_value":"","external_name":"width","restriction":"Int32"},{"name":"height","doc":null,"default_value":"","external_name":"height","restriction":"Int32"}],"args_string":"(window : Window, width : Int32, height : Int32) : Nil","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L1591","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L1591","def":{"name":"set_window_size","args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"},{"name":"width","doc":null,"default_value":"","external_name":"width","restriction":"Int32"},{"name":"height","doc":null,"default_value":"","external_name":"height","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"LibGLFW.set_window_size(window.ptr, width, height)"}},{"id":"set_window_size_callback(window:Window,&block:Window,Int32,Int32->Nil):Proc(Window,Int32,Int32,Nil)?-class-method","html_id":"set_window_size_callback(window:Window,&amp;block:Window,Int32,Int32-&gt;Nil):Proc(Window,Int32,Int32,Nil)?-class-method","name":"set_window_size_callback","doc":"Sets the size callback for the specified window.\n\nThis function sets the size callback of the specified window, which is\ncalled when the window is resized. The callback is provided with the size,\nin screen coordinates, of the client area of the window.\n\n`Parameters:`\n\n*`window`* The window whose callback to set.\n\n*`block`* The new window size callback.\n\nReturns the previously set callback, or `nil` if no callback was set.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 1.0.\n```\nUSING_METHOD = true\nUSING_MACRO = true\n\ndef window_size_callback(window : GLFW::Window, width : Int32, height : Int32)\n  puts \"width: #{width} height: #{height}\"\nend\n\nif GLFW.init && (window = GLFW.create_window(640, 480, \"Window\"))\n  GLFW.make_context_current(window)\n\n  if USING_METHOD\n    if USING_MACRO\n      # macro with the same name allows you to avoid writing boilerplate code, \n      # but compiler errors will be more difficult to understand.\n      GLFW.set_window_size_callback(window, window_size_callback)\n    else\n      GLFW.set_window_size_callback(window, &->window_size_callback(GLFW::Window, Int32, Int32))\n    end\n  else\n    GLFW.set_window_size_callback(window) do |window, width, height|\n      puts \"width: #{width} height: #{height}\"\n    end\n  end\n\n  while !GLFW.window_should_close(window)\n    GLFW.poll_events\n    GLFW.swap_buffers(window)\n  end\n\n  GLFW.terminate\nend\n```","summary":"<p>Sets the size callback for the specified window.</p>","abstract":false,"args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"args_string":"(window : Window, &block : Window, Int32, Int32 -> Nil) : Proc(Window, Int32, Int32, Nil)?","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L2240","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L2240","def":{"name":"set_window_size_callback","args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"double_splat":null,"splat_index":null,"yields":3,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(Window, Int32, Int32 -> Nil)"},"return_type":"Proc(Window, Int32, Int32, Nil) | ::Nil","visibility":"Public","body":"hash = window.hash\nold_callback = @@size_callbacks[hash]?\n@@size_callbacks[hash] = block\nLibGLFW.set_window_size_callback(window.ptr, ->(window : ::Pointer(LibGLFW::Window), width : Int32, height : Int32) do\n  if cb = @@size_callbacks[window.hash]?\n    cb.call(window.unsafe_as(Window), width, height)\n  end\nend)\nold_callback\n"}},{"id":"set_window_size_limits(window:Window,min_width:Int32?,min_height:Int32?,max_width:Int32?,max_height:Int32?):Nil-class-method","html_id":"set_window_size_limits(window:Window,min_width:Int32?,min_height:Int32?,max_width:Int32?,max_height:Int32?):Nil-class-method","name":"set_window_size_limits","doc":"Sets the size limits of the specified window.\n\nThis function sets the size limits of the client area of the specified\nwindow. If the window is full screen, the size limits only take effect\nonce it is made windowed. If the window is not resizable, this function\ndoes nothing.\n\nThe size limits are applied immediately to a windowed mode window and may\ncause it to be resized.\n\nThe maximum dimensions must be greater than or equal to the minimum\ndimensions and all must be greater than or equal to zero.\n\n`Parameters:`\n\n*`window`* The window to set limits for.\n\n*`min_width`* The minimum width, in screen coordinates, of the client\narea, or `nil`.\n\n*`min_height`* The minimum height, in screen coordinates, of the\nclient area, or `nil`.\n\n*`max_width`* The maximum width, in screen coordinates, of the client\narea, or `nil`.\n\n*`max_height`* The maximum height, in screen coordinates, of the\nclient area, or `nil`.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized`, `GLFW::Error::InvalidValue`\nand `GLFW::Error::PlatformError`.\n\nNOTE: If you set size limits and an aspect ratio that conflict, the\nresults are undefined.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 3.2.\n```\nif GLFW.init\n  if window = GLFW.create_window(640, 480, \"Window\")\n    GLFW.set_window_size_limits(window, nil, nil, 1000, 1000)\n  end\n  GLFW.terminate\nend\n```","summary":"<p>Sets the size limits of the specified window.</p>","abstract":false,"args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"},{"name":"min_width","doc":null,"default_value":"","external_name":"min_width","restriction":"Int32 | ::Nil"},{"name":"min_height","doc":null,"default_value":"","external_name":"min_height","restriction":"Int32 | ::Nil"},{"name":"max_width","doc":null,"default_value":"","external_name":"max_width","restriction":"Int32 | ::Nil"},{"name":"max_height","doc":null,"default_value":"","external_name":"max_height","restriction":"Int32 | ::Nil"}],"args_string":"(window : Window, min_width : Int32?, min_height : Int32?, max_width : Int32?, max_height : Int32?) : Nil","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L1496","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L1496","def":{"name":"set_window_size_limits","args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"},{"name":"min_width","doc":null,"default_value":"","external_name":"min_width","restriction":"Int32 | ::Nil"},{"name":"min_height","doc":null,"default_value":"","external_name":"min_height","restriction":"Int32 | ::Nil"},{"name":"max_width","doc":null,"default_value":"","external_name":"max_width","restriction":"Int32 | ::Nil"},{"name":"max_height","doc":null,"default_value":"","external_name":"max_height","restriction":"Int32 | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"LibGLFW.set_window_size_limits(window.ptr, min_width ? min_width : LibGLFW::DONT_CARE, min_height ? min_height : LibGLFW::DONT_CARE, max_width ? max_width : LibGLFW::DONT_CARE, max_height ? max_height : LibGLFW::DONT_CARE)"}},{"id":"set_window_title(window:Window,title:String):Nil-class-method","html_id":"set_window_title(window:Window,title:String):Nil-class-method","name":"set_window_title","doc":"Sets the title of the specified window.\n\nThis function sets the window title, encoded as UTF-8, of the specified\nwindow.\n\n`Parameters:`\n\n*`window`* The window whose title to change.\n\n*`title`* The UTF-8 encoded window title.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized` and `GLFW::Error::PlatformError`.\n\nNOTE: On Mac OS X the window title will not be updated until the next time you\nprocess events.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 1.0.","summary":"<p>Sets the title of the specified window.</p>","abstract":false,"args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"},{"name":"title","doc":null,"default_value":"","external_name":"title","restriction":"String"}],"args_string":"(window : Window, title : String) : Nil","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L1311","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L1311","def":{"name":"set_window_title","args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"},{"name":"title","doc":null,"default_value":"","external_name":"title","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"LibGLFW.set_window_title(window.ptr, title.to_unsafe)"}},{"id":"set_window_user_pointer(window:Window,pointer:Pointer(Void)):Nil-class-method","html_id":"set_window_user_pointer(window:Window,pointer:Pointer(Void)):Nil-class-method","name":"set_window_user_pointer","doc":"Sets the user pointer of the specified window.\n\nThis function sets the user-defined pointer of the specified window. The\ncurrent value is retained until the window is destroyed. The initial value\nis `nil`.\n\n`Parameters:`\n\n*`window`* The window whose pointer to set.\n\n*`pointer`* The new value.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized`.\n\nNOTE: This function may be called from any thread. Access is not\nsynchronized.\n\nNOTE: Added in version 3.0.","summary":"<p>Sets the user pointer of the specified window.</p>","abstract":false,"args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"},{"name":"pointer","doc":null,"default_value":"","external_name":"pointer","restriction":"Pointer(Void)"}],"args_string":"(window : Window, pointer : Pointer(Void)) : Nil","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L2098","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L2098","def":{"name":"set_window_user_pointer","args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"},{"name":"pointer","doc":null,"default_value":"","external_name":"pointer","restriction":"Pointer(Void)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"LibGLFW.set_window_user_pointer(window.ptr, pointer)"}},{"id":"show_window(window:Window):Nil-class-method","html_id":"show_window(window:Window):Nil-class-method","name":"show_window","doc":"Makes the specified window visible.\n\nThis function makes the specified window visible if it was previously\nhidden. If the window is already visible or is in full screen mode, this\nfunction does nothing.\n\n`Parameters:`\n\n*`window`* The window to make visible.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized` and `GLFW::Error::PlatformError`.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 3.0.\n```\nif GLFW.init\n  if window = GLFW.create_window(640, 480, \"Window\")\n    GLFW.show_window(window)\n  end\n  GLFW.terminate\nend\n```","summary":"<p>Makes the specified window visible.</p>","abstract":false,"args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"args_string":"(window : Window) : Nil","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L1783","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L1783","def":{"name":"show_window","args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"LibGLFW.show_window(window.ptr)"}},{"id":"swap_buffers(window:Window):Nil-class-method","html_id":"swap_buffers(window:Window):Nil-class-method","name":"swap_buffers","doc":"Swaps the front and back buffers of the specified window.\n\nThis function swaps the front and back buffers of the specified window when\nrendering with OpenGL or OpenGL ES. If the swap interval is greater than\nzero, the GPU driver waits the specified number of screen updates before\nswapping the buffers.\n\nThe specified window must have an OpenGL or OpenGL ES context. Specifying\na window without a context will generate a `GLFW::Error::NoWindowContext`\nerror.\n\nThis function does not apply to Vulkan. If you are rendering with Vulkan,\nsee `vkQueuePresentKHR` instead.\n\n`Parameters:`\n\n*`window`* The window whose buffers to swap.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized`, `GLFW::Error::NoWindowContext`\nand `GLFW::Error::PlatformError`.\n\nNOTE: When using EGL the context of the specified window must be current on the\ncalling thread.\n\nNOTE: This function may be called from any thread.\n\nNOTE: Added in version 1.0.","summary":"<p>Swaps the front and back buffers of the specified window.</p>","abstract":false,"args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"args_string":"(window : Window) : Nil","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L2773","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L2773","def":{"name":"swap_buffers","args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"LibGLFW.swap_buffers(window.ptr)"}},{"id":"swap_interval(interval:Int32):Nil-class-method","html_id":"swap_interval(interval:Int32):Nil-class-method","name":"swap_interval","doc":"Sets the swap interval for the current context.\n\nThis function sets the swap interval for the current OpenGL or OpenGL ES\ncontext, i.e. the number of screen updates to wait from the time\n`GLFW.swap_buffers` was called before swapping the buffers and returning. This\nis sometimes called vertical synchronization, vertical retrace\nsynchronization or just vsync.\n\nContexts that support either of the `WGL_EXT_swap_control_tear` and\n`GLX_EXT_swap_control_tear` extensions also accept negative swap intervals,\nwhich allow the driver to swap even if a frame arrives a little bit late.\nYou can check for the presence of these extensions using `GLFW.extension_supported`.\nFor more information about swap tearing, see the extension specifications.\n\nA context must be current on the calling thread. Calling this function\nwithout a current context will cause a `GLFW::Error::NoCurrentContext` error.\n\nThis function does not apply to Vulkan. If you are rendering with Vulkan,\nsee the present mode of your swapchain instead.\n\n`Parameters:`\n\n *`interval`* The minimum number of screen updates to wait for,\n until the buffers are swapped by `GLFW.swap_buffers`.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized`, `GLFW::Error::NoCurrentContext` \nand `GLFW::Error::PlatformError`.\n\nNOTE: This function is not called during context creation, leaving the\nswap interval set to whatever is the default on that platform. This is done\nbecause some swap interval extensions used by GLFW do not allow the swap\ninterval to be reset to zero once it has been set to a non-zero value.\n\nNOTE: Some GPU drivers do not honor the requested swap interval, either\nbecause of a user setting that overrides the application's request or due to\nbugs in the driver.\n\nNOTE: This function may be called from any thread.\n\nNOTE: Added in version 1.0.\n```\nif GLFW.init && (window = GLFW.create_window(640, 480, \"Window\"))\n  GLFW.swap_interval(1) # enable vsync\n  # do your thing...\n  GLFW.terminate\nend\n```","summary":"<p>Sets the swap interval for the current context.</p>","abstract":false,"args":[{"name":"interval","doc":null,"default_value":"","external_name":"interval","restriction":"Int32"}],"args_string":"(interval : Int32) : Nil","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/context/context.cr#L118","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/context/context.cr#L118","def":{"name":"swap_interval","args":[{"name":"interval","doc":null,"default_value":"","external_name":"interval","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"LibGLFW.swap_interval(interval)"}},{"id":"terminate:Nil-class-method","html_id":"terminate:Nil-class-method","name":"terminate","doc":"Terminates the GLFW library.\n\nThis function destroys all remaining windows and cursors, restores any\nmodified gamma ramps and frees any other allocated resources. Once this\nfunction is called, you must again call `GLFW.init` successfully before\nyou will be able to use most GLFW functions.\n\nIf GLFW has been successfully initialized, this function should be called\nbefore the application exits. If initialization fails, there is no need to\ncall this function, as it is called by `GLFW.init` before it returns\nfailure.\n\nNOTE: Possible errors include `GLFW::Error::PlatformError`.\n\nNOTE: This function may be called before `GLFW.init`.\n\nNOTE: This function must not be called from a callback.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 1.0.\n```\nif GLFW.init\n  puts \"Initialized GLFW successfully!\"\n  # do your thing...\n  GLFW.terminate\nelse\n  puts \"Unable to initialize GLFW.\"\nend\n```","summary":"<p>Terminates the GLFW library.</p>","abstract":false,"args":[],"args_string":" : Nil","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/init/init.cr#L68","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/init/init.cr#L68","def":{"name":"terminate","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"LibGLFW.terminate"}},{"id":"wait_events:Nil-class-method","html_id":"wait_events:Nil-class-method","name":"wait_events","doc":"Waits until events are queued and processes them.\n\nThis function puts the calling thread to sleep until at least one event is\navailable in the event queue. Once one or more events are available,\nit behaves exactly like `GLFW.poll_events`, i.e. the events in the queue\nare processed and the function then returns immediately. Processing events\nwill cause the window and input callbacks associated with those events to be\ncalled.\n\nSince not all events are associated with callbacks, this function may return\nwithout a callback having been called even if you are monitoring all\ncallbacks.\n\nOn some platforms, a window move, resize or menu operation will cause event\nprocessing to block. This is due to how event processing is designed on\nthose platforms. You can set the window refresh callback using \n`GLFW.set_window_refresh_callback` to redraw the contents of\nyour window when necessary during such operations.\n\nOn some platforms, certain callbacks may be called outside of a call to one\nof the event processing functions.\n\nIf no windows exist, this function returns immediately. For synchronization\nof threads in applications that do not create windows, use your threading\nlibrary of choice.\n\nEvent processing is not required for joystick input to work.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized` and `GLFW::Error::PlatformError`.\n\nNOTE: This function must not be called from a callback.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 2.5.\n```\nif GLFW.init && (window = GLFW.create_window(640, 480, \"Window\"))\n  while !GLFW.window_should_close(window)\n    GLFW.wait_events\n    GLFW.swap_buffers(window)\n  end\nend\n```","summary":"<p>Waits until events are queued and processes them.</p>","abstract":false,"args":[],"args_string":" : Nil","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L2678","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L2678","def":{"name":"wait_events","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"LibGLFW.wait_events"}},{"id":"wait_events_timeout(timeout:Float64):Nil-class-method","html_id":"wait_events_timeout(timeout:Float64):Nil-class-method","name":"wait_events_timeout","doc":"Waits with timeout until events are queued and processes them.\n\nThis function puts the calling thread to sleep until at least one event is\navailable in the event queue, or until the specified timeout is reached. If\none or more events are available, it behaves exactly like `GLFW.poll_events`, \ni.e. the events in the queue are processed and the function then returns \nimmediately. Processing events will cause the window and input callbacks \nassociated with those events to be called.\n\nThe timeout value must be a positive finite number.\n\nSince not all events are associated with callbacks, this function may return\nwithout a callback having been called even if you are monitoring all\ncallbacks.\n\nOn some platforms, a window move, resize or menu operation will cause event\nprocessing to block. This is due to how event processing is designed on\nthose platforms. You can set the window refresh callback using \n`GLFW.set_window_refresh_callback` to redraw the contents of\nyour window when necessary during such operations.\n\nOn some platforms, certain callbacks may be called outside of a call to one\nof the event processing functions.\n\nIf no windows exist, this function returns immediately. For synchronization\nof threads in applications that do not create windows, use your threading\nlibrary of choice.\n\nEvent processing is not required for joystick input to work.\n\n`Parameters:`\n\n*`timeout`* The maximum amount of time, in seconds, to wait.\n\nNOTE: This function must not be called from a callback.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 3.2.","summary":"<p>Waits with timeout until events are queued and processes them.</p>","abstract":false,"args":[{"name":"timeout","doc":null,"default_value":"","external_name":"timeout","restriction":"Float64"}],"args_string":"(timeout : Float64) : Nil","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L2722","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L2722","def":{"name":"wait_events_timeout","args":[{"name":"timeout","doc":null,"default_value":"","external_name":"timeout","restriction":"Float64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"LibGLFW.wait_events_timeout(timeout)"}},{"id":"window_hint_accum_alpha_bits(value:Int32?):Nil-class-method","html_id":"window_hint_accum_alpha_bits(value:Int32?):Nil-class-method","name":"window_hint_accum_alpha_bits","doc":"Specify the desired alpha bits depth of the default accumulation buffer,\n`nil` means the application has no preference.\n\n`Parameters:`\n\n*`value`* The new value of the window hint.\n\nThis function sets `accum_alpha_bits` hint for the next call to `GLFW.create_window`.\nThe hint, once set, retain its value until changed by another call to this\nfunction or `GLFW.default_window_hints`, or until the library is terminated.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized`.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 3.0.\n```\nif GLFW.init\n  GLFW.window_hint_accum_alpha_bits(0)\n  if window = GLFW.create_window(640, 480, \"Window\")\n    # do your thing...\n  end\n  GLFW.terminate\nend\n```","summary":"<p>Specify the desired alpha bits depth of the default accumulation buffer, <code>nil</code> means the application has no preference.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Int32 | ::Nil"}],"args_string":"(value : Int32?) : Nil","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L601","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L601","def":{"name":"window_hint_accum_alpha_bits","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Int32 | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"LibGLFW.window_hint(Hint::AccumAlphaBits.value, value ? value : LibGLFW::DONT_CARE)"}},{"id":"window_hint_accum_blue_bits(value:Int32?):Nil-class-method","html_id":"window_hint_accum_blue_bits(value:Int32?):Nil-class-method","name":"window_hint_accum_blue_bits","doc":"Specify the desired blue bits depth of the default accumulation buffer,\n`nil` means the application has no preference.\n\n`Parameters:`\n\n*`value`* The new value of the window hint.\n\nThis function sets `accum_blue_bits` hint for the next call to `GLFW.create_window`.\nThe hint, once set, retain its value until changed by another call to this\nfunction or `GLFW.default_window_hints`, or until the library is terminated.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized`.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 3.0.\n```\nif GLFW.init\n  GLFW.window_hint_accum_blue_bits(0)\n  if window = GLFW.create_window(640, 480, \"Window\")\n    # do your thing...\n  end\n  GLFW.terminate\nend\n```","summary":"<p>Specify the desired blue bits depth of the default accumulation buffer, <code>nil</code> means the application has no preference.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Int32 | ::Nil"}],"args_string":"(value : Int32?) : Nil","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L571","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L571","def":{"name":"window_hint_accum_blue_bits","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Int32 | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"LibGLFW.window_hint(Hint::AccumBlueBits.value, value ? value : LibGLFW::DONT_CARE)"}},{"id":"window_hint_accum_green_bits(value:Int32?):Nil-class-method","html_id":"window_hint_accum_green_bits(value:Int32?):Nil-class-method","name":"window_hint_accum_green_bits","doc":"Specify the desired green bits depth of the default accumulation buffer,\n`nil` means the application has no preference.\n\n`Parameters:`\n\n*`value`* The new value of the window hint.\n\nThis function sets `accum_green_bits` hint for the next call to `GLFW.create_window`.\nThe hint, once set, retain its value until changed by another call to this\nfunction or `GLFW.default_window_hints`, or until the library is terminated.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized`.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 3.0.\n```\nif GLFW.init\n  GLFW.window_hint_accum_green_bits(0)\n  if window = GLFW.create_window(640, 480, \"Window\")\n    # do your thing...\n  end\n  GLFW.terminate\nend\n```","summary":"<p>Specify the desired green bits depth of the default accumulation buffer, <code>nil</code> means the application has no preference.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Int32 | ::Nil"}],"args_string":"(value : Int32?) : Nil","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L541","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L541","def":{"name":"window_hint_accum_green_bits","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Int32 | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"LibGLFW.window_hint(Hint::AccumGreenBits.value, value ? value : LibGLFW::DONT_CARE)"}},{"id":"window_hint_accum_red_bits(value:Int32?):Nil-class-method","html_id":"window_hint_accum_red_bits(value:Int32?):Nil-class-method","name":"window_hint_accum_red_bits","doc":"Specify the desired red bits depth of the default accumulation buffer,\n`nil` means the application has no preference.\n\n`Parameters:`\n\n*`value`* The new value of the window hint.\n\nThis function sets `accum_red_bits` hint for the next call to `GLFW.create_window`.\nThe hint, once set, retain its value until changed by another call to this\nfunction or `GLFW.default_window_hints`, or until the library is terminated.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized`.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 3.0.\n```\nif GLFW.init\n  GLFW.window_hint_accum_red_bits(0)\n  if window = GLFW.create_window(640, 480, \"Window\")\n    # do your thing...\n  end\n  GLFW.terminate\nend\n```","summary":"<p>Specify the desired red bits depth of the default accumulation buffer, <code>nil</code> means the application has no preference.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Int32 | ::Nil"}],"args_string":"(value : Int32?) : Nil","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L511","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L511","def":{"name":"window_hint_accum_red_bits","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Int32 | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"LibGLFW.window_hint(Hint::AccumRedBits.value, value ? value : LibGLFW::DONT_CARE)"}},{"id":"window_hint_alpha_bits(value:Int32?):Nil-class-method","html_id":"window_hint_alpha_bits(value:Int32?):Nil-class-method","name":"window_hint_alpha_bits","doc":"Specify the desired alpha bits depth of the default framebuffer,\n`nil` means the application has no preference.\n\n`Parameters:`\n\n*`value`* The new value of the window hint.\n\nThis function sets `alpha_bits` hint for the next call to `GLFW.create_window`.\nThe hint, once set, retain their value until changed by another call to this\nfunction or `GLFW.default_window_hints`, or until the library is terminated.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized`.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 3.0.\n```\nif GLFW.init\n  GLFW.window_hint_alpha_bits(8)\n  if window = GLFW.create_window(640, 480, \"Window\")\n    # do your thing...\n  end\n  GLFW.terminate\nend\n```","summary":"<p>Specify the desired alpha bits depth of the default framebuffer, <code>nil</code> means the application has no preference.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Int32 | ::Nil"}],"args_string":"(value : Int32?) : Nil","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L421","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L421","def":{"name":"window_hint_alpha_bits","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Int32 | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"LibGLFW.window_hint(Hint::AlphaBits.value, value ? value : LibGLFW::DONT_CARE)"}},{"id":"window_hint_auto_iconify(value:Bool):Nil-class-method","html_id":"window_hint_auto_iconify(value:Bool):Nil-class-method","name":"window_hint_auto_iconify","doc":"Specifies whether the full screen window will automatically iconify and \nrestore the previous video mode on input focus loss.\n\nThis hint is ignored for windowed mode windows.\n\n`Parameters:`\n\n*`value`* The new value of the window hint.\n\nThis function sets `auto_iconify` hint for the next call to `GLFW.create_window`.\nThe hint, once set, retain its value until changed by another call to this\nfunction or `GLFW.default_window_hints`, or until the library is terminated.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized`.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 3.0.\n```\nif GLFW.init\n  GLFW.window_hint_auto_iconify(true)\n  if window = GLFW.create_window(640, 480, \"Window\")\n    # do your thing...\n  end\n  GLFW.terminate\nend\n```","summary":"<p>Specifies whether the full screen window will automatically iconify and  restore the previous video mode on input focus loss.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Bool"}],"args_string":"(value : Bool) : Nil","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L235","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L235","def":{"name":"window_hint_auto_iconify","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"LibGLFW.window_hint(Hint::AutoIconify.value, value == true ? LibGLFW::TRUE : LibGLFW::FALSE)"}},{"id":"window_hint_aux_buffers(value:Int32?):Nil-class-method","html_id":"window_hint_aux_buffers(value:Int32?):Nil-class-method","name":"window_hint_aux_buffers","doc":"Specifies the desired number of auxiliary buffers, \n`nil` means the application has no preference.\n\n`Parameters:`\n\n*`value`* The new value of the window hint.\n\nThis function sets `aux_buffers` hint for the next call to `GLFW.create_window`.\nThe hint, once set, retain its value until changed by another call to this\nfunction or `GLFW.default_window_hints`, or until the library is terminated.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized`.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 3.0.\n```\nif GLFW.init\n  GLFW.window_hint_aux_buffers(0)\n  if window = GLFW.create_window(640, 480, \"Window\")\n    # do your thing...\n  end\n  GLFW.terminate\nend\n```","summary":"<p>Specifies the desired number of auxiliary buffers,  <code>nil</code> means the application has no preference.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Int32 | ::Nil"}],"args_string":"(value : Int32?) : Nil","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L631","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L631","def":{"name":"window_hint_aux_buffers","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Int32 | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"LibGLFW.window_hint(Hint::AuxBuffers.value, value ? value : LibGLFW::DONT_CARE)"}},{"id":"window_hint_blue_bits(value:Int32?):Nil-class-method","html_id":"window_hint_blue_bits(value:Int32?):Nil-class-method","name":"window_hint_blue_bits","doc":"Specify the desired blue bits depth of the default framebuffer,\n`nil` means the application has no preference.\n\n`Parameters:`\n\n*`value`* The new value of the window hint.\n\nThis function sets `blue_bits` hint for the next call to `GLFW.create_window`.\nThe hint, once set, retain its value until changed by another call to this\nfunction or `GLFW.default_window_hints`, or until the library is terminated.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized`.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 3.0.\n```\nif GLFW.init\n  GLFW.window_hint_blue_bits(8)\n  if window = GLFW.create_window(640, 480, \"Window\")\n    # do your thing...\n  end\n  GLFW.terminate\nend\n```","summary":"<p>Specify the desired blue bits depth of the default framebuffer, <code>nil</code> means the application has no preference.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Int32 | ::Nil"}],"args_string":"(value : Int32?) : Nil","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L391","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L391","def":{"name":"window_hint_blue_bits","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Int32 | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"LibGLFW.window_hint(Hint::BlueBits.value, value ? value : LibGLFW::DONT_CARE)"}},{"id":"window_hint_client_api(value:ClientApi):Nil-class-method","html_id":"window_hint_client_api(value:ClientApi):Nil-class-method","name":"window_hint_client_api","doc":"Specifies which client API to create the context for.\n\nPossible values are `GLFW::ClientApi::OpenGL`, `GLFW::ClientApi::OpenGLES`\nand `GLFW::ClientApi::None`.\n\nThis is a hard constraint.\n\n`Parameters:`\n\n*`value`* The new value of the window hint.\n\nThis function sets `client_api` hint for the next call to `GLFW.create_window`.\nThe hint, once set, retain its value until changed by another call to this\nfunction or `GLFW.default_window_hints`, or until the library is terminated.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized` and `GLFW::Error::InvalidEnum`.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 3.0.\n```\nif GLFW.init\n  GLFW.window_hint_client_api(GLFW::ClientApi::OpenGL)\n  if window = GLFW.create_window(640, 480, \"Window\")\n    # do your thing...\n  end\n  GLFW.terminate\nend\n```","summary":"<p>Specifies which client API to create the context for.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"ClientApi"}],"args_string":"(value : ClientApi) : Nil","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L826","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L826","def":{"name":"window_hint_client_api","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"ClientApi"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"LibGLFW.window_hint(Hint::ClientApi.value, value.value)"}},{"id":"window_hint_context_creation_api(value:ContextCreationApi):Nil-class-method","html_id":"window_hint_context_creation_api(value:ContextCreationApi):Nil-class-method","name":"window_hint_context_creation_api","doc":"Specifies which context creation API to use to create the context. \n\nPossible values are `GLFW::ContextCreationApi::Native` and `GLFW::ContextCreationApi::EGL`. \nThis is a hard constraint. If no client API is requested, this hint is ignored.\n\n`Parameters:`\n\n*`value`* The new value of the window hint.\n\nThis function sets hint for the next call to `GLFW.create_window`. The\nhint, once set, retain its value until changed by another call \nto this function or `GLFW.default_window_hints`, or until the library \nis terminated.\n\nNOTE: The EGL API is not available on Mac OS X and requests to use it will fail.\n\nNOTE: The EGL API is the native context creation API on Wayland and Mir, \nso this hint will have no effect.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized` and `GLFW::Error::InvalidEnum`.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 3.0.","summary":"<p>Specifies which context creation API to use to create the context.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"ContextCreationApi"}],"args_string":"(value : ContextCreationApi) : Nil","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L1093","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L1093","def":{"name":"window_hint_context_creation_api","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"ContextCreationApi"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"LibGLFW.window_hint(Hint::ContextCreationApi.value, value.value)"}},{"id":"window_hint_context_no_error(value:Bool):Nil-class-method","html_id":"window_hint_context_no_error(value:Bool):Nil-class-method","name":"window_hint_context_no_error","doc":"Specifies whether errors should be generated by the context. \n\nIf enabled, situations that would have generated errors \ninstead cause undefined behavior.\n\nThe no error mode for OpenGL and OpenGL ES is described in detail by the \n`GL_KHR_no_error` extension.\n\n`Parameters:`\n\n*`value`* The new value of the window hint.\n\nThis function sets hint for the next call to `GLFW.create_window`. The\nhint, once set, retain its value until changed by another call \nto this function or `GLFW.default_window_hints`, or until the library \nis terminated.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized`.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 3.0.","summary":"<p>Specifies whether errors should be generated by the context.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Bool"}],"args_string":"(value : Bool) : Nil","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L1064","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L1064","def":{"name":"window_hint_context_no_error","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"LibGLFW.window_hint(Hint::ContextNoError.value, value == true ? LibGLFW::TRUE : LibGLFW::FALSE)"}},{"id":"window_hint_context_release_behavior(value:ContextReleaseBehavior):Nil-class-method","html_id":"window_hint_context_release_behavior(value:ContextReleaseBehavior):Nil-class-method","name":"window_hint_context_release_behavior","doc":"Specifies the release behavior to be used by the context. \n\nPossible values are one of `GLFW::ContextReleaseBehavior::Any`, \n`GLFW::ContextReleaseBehavior::Flush` or `GLFW::ContextReleaseBehavior::None`.\n\nIf the behavior is `GLFW::ContextReleaseBehavior::Any`, the default behavior \nof the context creation API will be used. If the behavior is \n`GLFW::ContextReleaseBehavior::Flush`, the pipeline will be flushed whenever\nthe context is released from being the current one. If the behavior is \n`GLFW::ContextReleaseBehavior::None`, the pipeline will not be flushed on release.\n\nContext release behaviors are described in detail by the \n`GL_KHR_context_flush_control` extension.\n\n`Parameters:`\n\n*`value`* The new value of the window hint.\n\nThis function sets hint for the next call to `GLFW.create_window`. The\nhint, once set, retain its value until changed by another call \nto this function or `GLFW.default_window_hints`, or until the library \nis terminated.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized` and `GLFW::Error::InvalidEnum`.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 3.0.","summary":"<p>Specifies the release behavior to be used by the context.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"ContextReleaseBehavior"}],"args_string":"(value : ContextReleaseBehavior) : Nil","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L1037","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L1037","def":{"name":"window_hint_context_release_behavior","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"ContextReleaseBehavior"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"LibGLFW.window_hint(Hint::ContextReleaseBehavior.value, value.value)"}},{"id":"window_hint_context_robustness(value:ContextRobustness):Nil-class-method","html_id":"window_hint_context_robustness(value:ContextRobustness):Nil-class-method","name":"window_hint_context_robustness","doc":"Specifies the robustness strategy to be used by the context.\n\nThis can be one of `GLFW::ContextRobustness::NoResetNotification` or\n`GLFW::ContextRobustness::LoseContextOnReset`, or \n`GLFW::ContextRobustness::None` to not request a robustness strategy.\n\n`Parameters:`\n\n*`value`* The new value of the window hint.\n\nThis function sets `context_robustness` hint for the next call to `GLFW.create_window`.\nThe hint, once set, retain its value until changed by another call to this\nfunction or `GLFW.default_window_hints`, or until the library is terminated.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized` and `GLFW::Error::InvalidEnum`.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 3.0.\n```\nif GLFW.init\n  GLFW.window_hint_context_robustness(GLFW::ContextRobustness::None)\n  if window = GLFW.create_window(640, 480, \"Window\")\n    # do your thing...\n  end\n  GLFW.terminate\nend\n```","summary":"<p>Specifies the robustness strategy to be used by the context.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"ContextRobustness"}],"args_string":"(value : ContextRobustness) : Nil","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L917","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L917","def":{"name":"window_hint_context_robustness","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"ContextRobustness"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"LibGLFW.window_hint(Hint::ContextRobustness.value, value.value)"}},{"id":"window_hint_context_version_major(value:Int32):Nil-class-method","html_id":"window_hint_context_version_major(value:Int32):Nil-class-method","name":"window_hint_context_version_major","doc":"Specify the client API major version that the created context must be compatible with.\n\n`Parameters:`\n\n*`value`* The new value of the window hint.\n\nThis function sets `context_version_major` hint for the next call to `GLFW.create_window`.\nThe hint, once set, retain its value until changed by another call to this\nfunction or `GLFW.default_window_hints`, or until the library is terminated.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized`.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 3.0.\n```\nif GLFW.init\n  GLFW.window_hint_context_version_major(1)\n  if window = GLFW.create_window(640, 480, \"Window\")\n    # do your thing...\n  end\n  GLFW.terminate\nend\n```","summary":"<p>Specify the client API major version that the created context must be compatible with.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Int32"}],"args_string":"(value : Int32) : Nil","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L855","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L855","def":{"name":"window_hint_context_version_major","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"LibGLFW.window_hint(Hint::ContextVersionMajor.value, value)"}},{"id":"window_hint_context_version_minor(value:Int32):Nil-class-method","html_id":"window_hint_context_version_minor(value:Int32):Nil-class-method","name":"window_hint_context_version_minor","doc":"Specify the client API minor version that the created context must be compatible with.\n\n`Parameters:`\n\n*`value`* The new value of the window hint.\n\nThis function sets `context_version_minor` hint for the next call to `GLFW.create_window`.\nThe hint, once set, retain its value until changed by another call to this\nfunction or `GLFW.default_window_hints`, or until the library is terminated.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized`.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 3.0.\n```\nif GLFW.init\n  GLFW.window_hint_context_version_minor(0)\n  if window = GLFW.create_window(640, 480, \"Window\")\n    # do your thing...\n  end\n  GLFW.terminate\nend\n```","summary":"<p>Specify the client API minor version that the created context must be compatible with.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Int32"}],"args_string":"(value : Int32) : Nil","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L884","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L884","def":{"name":"window_hint_context_version_minor","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"LibGLFW.window_hint(Hint::ContextVersionMinor.value, value)"}},{"id":"window_hint_decorated(value:Bool):Nil-class-method","html_id":"window_hint_decorated(value:Bool):Nil-class-method","name":"window_hint_decorated","doc":"Specifies whether the windowed mode window will have window decorations\nsuch as a border, a close widget, etc.\n\nAn undecorated window may still allow the user to generate close events on some platforms.\n\nThis hint is ignored for full screen windows.\n\n`Parameters:`\n\n*`value`* The new value of the window hint.\n\nThis function sets `decorated` hint for the next call to `GLFW.create_window`.\nThe hint, once set, retain its value until changed by another call to this\nfunction or `GLFW.default_window_hints`, or until the library is terminated.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized`.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 3.0.\n```\nif GLFW.init\n  GLFW.window_hint_decorated(true)\n  if window = GLFW.create_window(640, 480, \"Window\")\n    # do your thing...\n  end\n  GLFW.terminate\nend\n```","summary":"<p>Specifies whether the windowed mode window will have window decorations such as a border, a close widget, etc.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Bool"}],"args_string":"(value : Bool) : Nil","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L203","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L203","def":{"name":"window_hint_decorated","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"LibGLFW.window_hint(Hint::Decorated.value, value == true ? LibGLFW::TRUE : LibGLFW::FALSE)"}},{"id":"window_hint_depth_bits(value:Int32?):Nil-class-method","html_id":"window_hint_depth_bits(value:Int32?):Nil-class-method","name":"window_hint_depth_bits","doc":"Specify the desired depth bits depth of the default framebuffer,\n`nil` means the application has no preference.\n\n`Parameters:`\n\n*`value`* The new value of the window hint.\n\nThis function sets `depth_bits` hint for the next call to `GLFW.create_window`.\nThe hint, once set, retain its value until changed by another call to this\nfunction or `GLFW.default_window_hints`, or until the library is terminated.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized`.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 3.0.\n```\nif GLFW.init\n  GLFW.window_hint_depth_bits(24)\n  if window = GLFW.create_window(640, 480, \"Window\")\n    # do your thing...\n  end\n  GLFW.terminate\nend\n```","summary":"<p>Specify the desired depth bits depth of the default framebuffer, <code>nil</code> means the application has no preference.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Int32 | ::Nil"}],"args_string":"(value : Int32?) : Nil","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L451","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L451","def":{"name":"window_hint_depth_bits","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Int32 | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"LibGLFW.window_hint(Hint::DepthBits.value, value ? value : LibGLFW::DONT_CARE)"}},{"id":"window_hint_double_buffer(value:Bool):Nil-class-method","html_id":"window_hint_double_buffer(value:Bool):Nil-class-method","name":"window_hint_double_buffer","doc":"Specifies whether the framebuffer should be double buffered.\n\nYou nearly always want to use double buffering. \n\nThis is a hard constraint.\n\n`Parameters:`\n\n*`value`* The new value of the window hint.\n\nThis function sets `double_buffer` hint for the next call to `GLFW.create_window`.\nThe hint, once set, retain its value until changed by another call to this\nfunction or `GLFW.default_window_hints`, or until the library is terminated.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized`.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 3.0.\n```\nif GLFW.init\n  GLFW.window_hint_double_buffer(true)\n  if window = GLFW.create_window(640, 480, \"Window\")\n    # do your thing...\n  end\n  GLFW.terminate\nend\n```","summary":"<p>Specifies whether the framebuffer should be double buffered.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Bool"}],"args_string":"(value : Bool) : Nil","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L792","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L792","def":{"name":"window_hint_double_buffer","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"LibGLFW.window_hint(Hint::DoubleBuffer.value, value == true ? LibGLFW::TRUE : LibGLFW::FALSE)"}},{"id":"window_hint_floating(value:Bool):Nil-class-method","html_id":"window_hint_floating(value:Bool):Nil-class-method","name":"window_hint_floating","doc":"Specifies whether the windowed mode window will be floating above other regular windows, \nalso called topmost or always-on-top.\n\nThis is intended primarily for debugging purposes and cannot be used \nto implement proper full screen windows.\n\nThis hint is ignored for full screen windows.\n\n`Parameters:`\n\n*`value`* The new value of the window hint.\n\nThis function sets `floating` hint for the next call to `GLFW.create_window`.\nThe hint, once set, retain its value until changed by another call to this\nfunction or `GLFW.default_window_hints`, or until the library is terminated.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized`.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 3.0.\n```\nif GLFW.init\n  GLFW.window_hint_floating(false)\n  if window = GLFW.create_window(640, 480, \"Window\")\n    # do your thing...\n  end\n  GLFW.terminate\nend\n```","summary":"<p>Specifies whether the windowed mode window will be floating above other regular windows,  also called topmost or always-on-top.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Bool"}],"args_string":"(value : Bool) : Nil","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L270","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L270","def":{"name":"window_hint_floating","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"LibGLFW.window_hint(Hint::Floating.value, value == true ? LibGLFW::TRUE : LibGLFW::FALSE)"}},{"id":"window_hint_focused(value:Bool):Nil-class-method","html_id":"window_hint_focused(value:Bool):Nil-class-method","name":"window_hint_focused","doc":"Specifies whether the windowed mode window will be given input focus when created.\n\nThis hint is ignored for full screen and initially hidden windows.\n\n`Parameters:`\n\n*`value`* The new value of the window hint.\n\nThis function sets `focused` hint for the next call to `GLFW.create_window`.\nThe hint, once set, retain its value until changed by another call to this\nfunction or `GLFW.default_window_hints`, or until the library is terminated.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized`.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 3.0.\n```\nif GLFW.init\n  GLFW.window_hint_focused(true)\n  if window = GLFW.create_window(640, 480, \"Window\")\n    # do your thing...\n  end\n  GLFW.terminate\nend\n```","summary":"<p>Specifies whether the windowed mode window will be given input focus when created.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Bool"}],"args_string":"(value : Bool) : Nil","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L106","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L106","def":{"name":"window_hint_focused","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"LibGLFW.window_hint(Hint::Focused.value, value == true ? LibGLFW::TRUE : LibGLFW::FALSE)"}},{"id":"window_hint_green_bits(value:Int32?):Nil-class-method","html_id":"window_hint_green_bits(value:Int32?):Nil-class-method","name":"window_hint_green_bits","doc":"Specify the desired green bits depth of the default framebuffer,\n`nil` means the application has no preference.\n\n`Parameters:`\n\n*`value`* The new value of the window hint.\n\nThis function sets `green_bits` hint for the next call to `GLFW.create_window`.\nThe hint, once set, retain its value until changed by another call to this\nfunction or `GLFW.default_window_hints`, or until the library is terminated.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized`.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 3.0.\n```\nif GLFW.init\n  GLFW.window_hint_green_bits(8)\n  if window = GLFW.create_window(640, 480, \"Window\")\n    # do your thing...\n  end\n  GLFW.terminate\nend\n```","summary":"<p>Specify the desired green bits depth of the default framebuffer, <code>nil</code> means the application has no preference.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Int32 | ::Nil"}],"args_string":"(value : Int32?) : Nil","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L361","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L361","def":{"name":"window_hint_green_bits","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Int32 | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"LibGLFW.window_hint(Hint::GreenBits.value, value ? value : LibGLFW::DONT_CARE)"}},{"id":"window_hint_maximized(value:Bool):Nil-class-method","html_id":"window_hint_maximized(value:Bool):Nil-class-method","name":"window_hint_maximized","doc":"Specifies whether the windowed mode window will be maximized when created.\n\nThis hint is ignored for full screen windows.\n\n`Parameters:`\n\n*`value`* The new value of the window hint.\n\nThis function sets `maximized` hint for the next call to `GLFW.create_window`.\nThe hint, once set, retain its value until changed by another call to this\nfunction or `GLFW.default_window_hints`, or until the library is terminated.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized`.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 3.0.\n```\nif GLFW.init\n  GLFW.window_hint_maximized(false)\n  if window = GLFW.create_window(640, 480, \"Window\")\n    # do your thing...\n  end\n  GLFW.terminate\nend\n```","summary":"<p>Specifies whether the windowed mode window will be maximized when created.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Bool"}],"args_string":"(value : Bool) : Nil","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L301","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L301","def":{"name":"window_hint_maximized","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"LibGLFW.window_hint(Hint::Maximized.value, value == true ? LibGLFW::TRUE : LibGLFW::FALSE)"}},{"id":"window_hint_open_gl_debug_context(value:Bool):Nil-class-method","html_id":"window_hint_open_gl_debug_context(value:Bool):Nil-class-method","name":"window_hint_open_gl_debug_context","doc":"Specifies whether to create a debug OpenGL context.\n\nOpenGL debug context may have additional error and \nperformance issue reporting functionality. If \nOpenGL ES is requested, this hint is ignored.\n\n`Parameters:`\n\n*`value`* The new value of the window hint.\n\nThis function sets hint for the next call to `GLFW.create_window`. The\nhint, once set, retain its value until changed by another call \nto this function or `GLFW.default_window_hints`, or until the library \nis terminated.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized`.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 3.0.","summary":"<p>Specifies whether to create a debug OpenGL context.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Bool"}],"args_string":"(value : Bool) : Nil","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L978","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L978","def":{"name":"window_hint_open_gl_debug_context","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"LibGLFW.window_hint(Hint::OpenGLDebugContext.value, value == true ? LibGLFW::TRUE : LibGLFW::FALSE)"}},{"id":"window_hint_open_gl_forward_compat(value:Bool):Nil-class-method","html_id":"window_hint_open_gl_forward_compat(value:Bool):Nil-class-method","name":"window_hint_open_gl_forward_compat","doc":"Specifies whether the OpenGL context should be forward-compatible.\n\nIt means that all functionality deprecated in the requested version\nof OpenGL will be removed.\n\nThis must only be used if the requested OpenGL version is 3.0 or above. \n\nIf OpenGL ES is requested, this hint is ignored.\n\n`Parameters:`\n\n*`value`* The new value of the window hint.\n\nThis function sets `open_gl_forward_compat` hint for the next call to `GLFW.create_window`.\nThe hint, once set, retain its value until changed by another call to this\nfunction or `GLFW.default_window_hints`, or until the library is terminated.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized`.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 3.0.\n```\nif GLFW.init\n  GLFW.window_hint_open_gl_forward_compat(false)\n  if window = GLFW.create_window(640, 480, \"Window\")\n    # do your thing...\n  end\n  GLFW.terminate\nend\n```","summary":"<p>Specifies whether the OpenGL context should be forward-compatible.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Bool"}],"args_string":"(value : Bool) : Nil","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L953","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L953","def":{"name":"window_hint_open_gl_forward_compat","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"LibGLFW.window_hint(Hint::OpenGLForwardCompat.value, value == true ? LibGLFW::TRUE : LibGLFW::FALSE)"}},{"id":"window_hint_open_gl_profile(value:OpenGLProfile):Nil-class-method","html_id":"window_hint_open_gl_profile(value:OpenGLProfile):Nil-class-method","name":"window_hint_open_gl_profile","doc":"Specifies which OpenGL profile to create the context for.\n\nPossible values are one of `GLFW::OpenGLProfile::Core` or `GLFW::OpenGLProfile::Compat`, \nor `GLFW::OpenGLProfile::Any` to not request a specific profile. \nIf requesting an OpenGL version below 3.2, `GLFW::OpenGLProfile::Any` must be used. \nIf OpenGL ES is requested, this hint is ignored.\n\n`Parameters:`\n\n*`value`* The new value of the window hint.\n\nThis function sets hint for the next call to `GLFW.create_window`. The\nhint, once set, retain its value until changed by another call \nto this function or `GLFW.default_window_hints`, or until the library \nis terminated.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized` and `GLFW::Error::InvalidEnum`.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 3.0.","summary":"<p>Specifies which OpenGL profile to create the context for.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"OpenGLProfile"}],"args_string":"(value : OpenGLProfile) : Nil","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L1004","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L1004","def":{"name":"window_hint_open_gl_profile","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"OpenGLProfile"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"LibGLFW.window_hint(Hint::OpenGLProfile.value, value.value)"}},{"id":"window_hint_red_bits(value:Int32?):Nil-class-method","html_id":"window_hint_red_bits(value:Int32?):Nil-class-method","name":"window_hint_red_bits","doc":"Specify the desired red bits depth of the default framebuffer,\n`nil` means the application has no preference.\n\n`Parameters:`\n\n*`value`* The new value of the window hint.\n\nThis function sets `red_bits` hint for the next call to `GLFW.create_window`.\nThe hint, once set, retain its value until changed by another call to this\nfunction or `GLFW.default_window_hints`, or until the library is terminated.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized`.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 3.0.\n```\nif GLFW.init\n  GLFW.window_hint_red_bits(8)\n  if window = GLFW.create_window(640, 480, \"Window\")\n    # do your thing...\n  end\n  GLFW.terminate\nend\n```","summary":"<p>Specify the desired red bits depth of the default framebuffer, <code>nil</code> means the application has no preference.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Int32 | ::Nil"}],"args_string":"(value : Int32?) : Nil","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L331","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L331","def":{"name":"window_hint_red_bits","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Int32 | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"LibGLFW.window_hint(Hint::RedBits.value, value ? value : LibGLFW::DONT_CARE)"}},{"id":"window_hint_refresh_rate(value:Int32?):Nil-class-method","html_id":"window_hint_refresh_rate(value:Int32?):Nil-class-method","name":"window_hint_refresh_rate","doc":"Specifies the desired refresh rate for full screen windows.\n\nIf set to `nil`, the highest available refresh rate will be used.\n\nThis hint is ignored for windowed mode windows.\n\n`Parameters:`\n\n*`value`* The new value of the window hint.\n\nThis function sets `refresh_rate` hint for the next call to `GLFW.create_window`.\nThe hint, once set, retain its value until changed by another call to this\nfunction or `GLFW.default_window_hints`, or until the library is terminated.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized`.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 3.0.\n```\nif GLFW.init\n  GLFW.window_hint_refresh_rate(nil)\n  if window = GLFW.create_window(640, 480, \"Window\")\n    # do your thing...\n  end\n  GLFW.terminate\nend\n```","summary":"<p>Specifies the desired refresh rate for full screen windows.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Int32 | ::Nil"}],"args_string":"(value : Int32?) : Nil","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L759","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L759","def":{"name":"window_hint_refresh_rate","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Int32 | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"LibGLFW.window_hint(Hint::RefreshRate.value, value ? value : LibGLFW::DONT_CARE)"}},{"id":"window_hint_resizable(value:Bool):Nil-class-method","html_id":"window_hint_resizable(value:Bool):Nil-class-method","name":"window_hint_resizable","doc":"Specifies whether the windowed mode window will be resizable by the user.\n\nThe window will still be resizable using the `GLFW.set_window_size` function. \nThis hint is ignored for full screen windows.\n\n`Parameters:`\n\n*`value`* The new value of the window hint.\n\nThis function sets `resizable` hint for the next call to `GLFW.create_window`.\nThe hint, once set, retain its value until changed by another call to this\nfunction or `GLFW.default_window_hints`, or until the library is terminated.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized`.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 3.0.\n```\nif GLFW.init\n  GLFW.window_hint_resizable(true)\n  if window = GLFW.create_window(640, 480, \"Window\")\n    # do your thing...\n  end\n  GLFW.terminate\nend\n```","summary":"<p>Specifies whether the windowed mode window will be resizable by the user.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Bool"}],"args_string":"(value : Bool) : Nil","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L138","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L138","def":{"name":"window_hint_resizable","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"LibGLFW.window_hint(Hint::Resizable.value, value == true ? LibGLFW::TRUE : LibGLFW::FALSE)"}},{"id":"window_hint_samples(value:Int32?):Nil-class-method","html_id":"window_hint_samples(value:Int32?):Nil-class-method","name":"window_hint_samples","doc":"Specifies the desired number of samples to use for multisampling.\n\nZero disables multisampling, `nil` means the application has no preference.\n\n`Parameters:`\n\n*`value`* The new value of the window hint.\n\nThis function sets `samples` hint for the next call to `GLFW.create_window`.\nThe hint, once set, retain its value until changed by another call to this\nfunction or `GLFW.default_window_hints`, or until the library is terminated.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized`.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 3.0.\n```\nif GLFW.init\n  GLFW.window_hint_samples(0)\n  if window = GLFW.create_window(640, 480, \"Window\")\n    # do your thing...\n  end\n  GLFW.terminate\nend\n```","summary":"<p>Specifies the desired number of samples to use for multisampling.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Int32 | ::Nil"}],"args_string":"(value : Int32?) : Nil","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L693","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L693","def":{"name":"window_hint_samples","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Int32 | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"LibGLFW.window_hint(Hint::Samples.value, value ? value : LibGLFW::DONT_CARE)"}},{"id":"window_hint_srgb_capable(value:Bool):Nil-class-method","html_id":"window_hint_srgb_capable(value:Bool):Nil-class-method","name":"window_hint_srgb_capable","doc":"Specifies whether the framebuffer should be sRGB capable.\n\nIf supported, a created OpenGL context will support the `GL_FRAMEBUFFER_SRGB` enable, \nalso called `GL_FRAMEBUFFER_SRGB_EXT` for controlling sRGB rendering and a created \nOpenGL ES context will always have sRGB rendering enabled.\n\n`Parameters:`\n\n*`value`* The new value of the window hint.\n\nThis function sets `srgb_capable` hint for the next call to `GLFW.create_window`.\nThe hint, once set, retain its value until changed by another call to this\nfunction or `GLFW.default_window_hints`, or until the library is terminated.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized`.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 3.0.\n```\nif GLFW.init\n  GLFW.window_hint_srgb_capable(false)\n  if window = GLFW.create_window(640, 480, \"Window\")\n    # do your thing...\n  end\n  GLFW.terminate\nend\n```","summary":"<p>Specifies whether the framebuffer should be sRGB capable.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Bool"}],"args_string":"(value : Bool) : Nil","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L726","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L726","def":{"name":"window_hint_srgb_capable","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"LibGLFW.window_hint(Hint::SrgbCapable.value, value == true ? LibGLFW::TRUE : LibGLFW::FALSE)"}},{"id":"window_hint_stencil_bits(value:Int32?):Nil-class-method","html_id":"window_hint_stencil_bits(value:Int32?):Nil-class-method","name":"window_hint_stencil_bits","doc":"Specify the desired stencil bits depth of the default framebuffer,\n`nil` means the application has no preference.\n\n`Parameters:`\n\n*`value`* The new value of the window hint.\n\nThis function sets `stencil_bits` hint for the next call to `GLFW.create_window`.\nThe hint, once set, retain its value until changed by another call to this\nfunction or `GLFW.default_window_hints`, or until the library is terminated.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized`.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 3.0.\n```\nif GLFW.init\n  GLFW.window_hint_stencil_bits(8)\n  if window = GLFW.create_window(640, 480, \"Window\")\n    # do your thing...\n  end\n  GLFW.terminate\nend\n```","summary":"<p>Specify the desired stencil bits depth of the default framebuffer, <code>nil</code> means the application has no preference.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Int32 | ::Nil"}],"args_string":"(value : Int32?) : Nil","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L481","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L481","def":{"name":"window_hint_stencil_bits","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Int32 | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"LibGLFW.window_hint(Hint::StencilBits.value, value ? value : LibGLFW::DONT_CARE)"}},{"id":"window_hint_stereo(value:Bool):Nil-class-method","html_id":"window_hint_stereo(value:Bool):Nil-class-method","name":"window_hint_stereo","doc":"Specifies whether to use stereoscopic rendering.\n\nThis is a hard constraint.\n\n`Parameters:`\n\n*`value`* The new value of the window hint.\n\nThis function sets `stereo` hint for the next call to `GLFW.create_window`.\nThe hint, once set, retain its value until changed by another call to this\nfunction or `GLFW.default_window_hints`, or until the library is terminated.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized`.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 3.0.\n```\nif GLFW.init\n  GLFW.window_hint_stereo(false)\n  if window = GLFW.create_window(640, 480, \"Window\")\n    # do your thing...\n  end\n  GLFW.terminate\nend\n```","summary":"<p>Specifies whether to use stereoscopic rendering.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Bool"}],"args_string":"(value : Bool) : Nil","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L662","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L662","def":{"name":"window_hint_stereo","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"LibGLFW.window_hint(Hint::Stereo.value, value == true ? LibGLFW::TRUE : LibGLFW::FALSE)"}},{"id":"window_hint_visible(value:Bool):Nil-class-method","html_id":"window_hint_visible(value:Bool):Nil-class-method","name":"window_hint_visible","doc":"Specifies whether the windowed mode window will be initially visible.\n\nThis hint is ignored for full screen windows.\n\n`Parameters:`\n\n*`value`* The new value of the window hint.\n\nThis function sets `visible` hint for the next call to `GLFW.create_window`.\nThe hint, once set, retain its value until changed by another call to this\nfunction or `GLFW.default_window_hints`, or until the library is terminated.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized`.\n\nNOTE: This function must only be called from the main thread.\n\nNOTE: Added in version 3.0.\n```\nif GLFW.init\n  GLFW.window_hint_visible(true)\n  if window = GLFW.create_window(640, 480, \"Window\")\n    # do your thing...\n  end\n  GLFW.terminate\nend\n```","summary":"<p>Specifies whether the windowed mode window will be initially visible.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Bool"}],"args_string":"(value : Bool) : Nil","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L169","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L169","def":{"name":"window_hint_visible","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"LibGLFW.window_hint(Hint::Visible.value, value == true ? LibGLFW::TRUE : LibGLFW::FALSE)"}},{"id":"window_should_close(window:Window):Bool-class-method","html_id":"window_should_close(window:Window):Bool-class-method","name":"window_should_close","doc":"Checks the close flag of the specified window.\n\nThis function returns the value of the close flag of the specified window.\n\n`Parameters:`\n\n*`window`* The window to query.\n\nReturns the value of the close flag.\n\nNOTE: Possible errors include `GLFW::Error::NotInitialized`.\n\nNOTE: This function may be called from any thread. Access is not\nsynchronized.\n\nNOTE: Added in version 3.0.","summary":"<p>Checks the close flag of the specified window.</p>","abstract":false,"args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"args_string":"(window : Window) : Bool","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L1264","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L1264","def":{"name":"window_should_close","args":[{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":"Window"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"(LibGLFW.window_should_close(window.ptr)) == LibGLFW::TRUE ? true : false"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/Heaven31415/light_glfw/GLFW/Action","path":"GLFW/Action.html","kind":"enum","full_name":"GLFW::Action","name":"Action","abstract":false,"superclass":null,"ancestors":[{"html_id":"github.com/Heaven31415/light_glfw/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"github.com/Heaven31415/light_glfw/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/Heaven31415/light_glfw/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/Heaven31415/light_glfw/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"enums.cr","line_number":2,"url":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr"}],"repository_name":"github.com/Heaven31415/light_glfw","program":false,"enum":true,"alias":false,"aliased":"","const":false,"constants":[{"id":"Release","name":"Release","value":"0","doc":null,"summary":null},{"id":"Press","name":"Press","value":"1","doc":null,"summary":null},{"id":"Repeat","name":"Repeat","value":"2","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/Heaven31415/light_glfw/GLFW","kind":"module","full_name":"GLFW","name":"GLFW"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"press?-instance-method","html_id":"press?-instance-method","name":"press?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L4","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L4","def":{"name":"press?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Press"}},{"id":"release?-instance-method","html_id":"release?-instance-method","name":"release?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L3","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L3","def":{"name":"release?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Release"}},{"id":"repeat?-instance-method","html_id":"repeat?-instance-method","name":"repeat?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L5","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L5","def":{"name":"repeat?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Repeat"}}],"macros":[],"types":[]},{"html_id":"github.com/Heaven31415/light_glfw/GLFW/ClientApi","path":"GLFW/ClientApi.html","kind":"enum","full_name":"GLFW::ClientApi","name":"ClientApi","abstract":false,"superclass":null,"ancestors":[{"html_id":"github.com/Heaven31415/light_glfw/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"github.com/Heaven31415/light_glfw/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/Heaven31415/light_glfw/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/Heaven31415/light_glfw/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"enums.cr","line_number":230,"url":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr"}],"repository_name":"github.com/Heaven31415/light_glfw","program":false,"enum":true,"alias":false,"aliased":"","const":false,"constants":[{"id":"None","name":"None","value":"0","doc":null,"summary":null},{"id":"OpenGL","name":"OpenGL","value":"196609","doc":null,"summary":null},{"id":"OpenGLES","name":"OpenGLES","value":"196610","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/Heaven31415/light_glfw/GLFW","kind":"module","full_name":"GLFW","name":"GLFW"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"none?-instance-method","html_id":"none?-instance-method","name":"none?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L231","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L231","def":{"name":"none?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == None"}},{"id":"open_gl?-instance-method","html_id":"open_gl?-instance-method","name":"open_gl?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L232","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L232","def":{"name":"open_gl?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == OpenGL"}},{"id":"open_gles?-instance-method","html_id":"open_gles?-instance-method","name":"open_gles?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L233","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L233","def":{"name":"open_gles?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == OpenGLES"}}],"macros":[],"types":[]},{"html_id":"github.com/Heaven31415/light_glfw/GLFW/ContextCreationApi","path":"GLFW/ContextCreationApi.html","kind":"enum","full_name":"GLFW::ContextCreationApi","name":"ContextCreationApi","abstract":false,"superclass":null,"ancestors":[{"html_id":"github.com/Heaven31415/light_glfw/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"github.com/Heaven31415/light_glfw/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/Heaven31415/light_glfw/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/Heaven31415/light_glfw/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"enums.cr","line_number":266,"url":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr"}],"repository_name":"github.com/Heaven31415/light_glfw","program":false,"enum":true,"alias":false,"aliased":"","const":false,"constants":[{"id":"Native","name":"Native","value":"221185","doc":null,"summary":null},{"id":"EGL","name":"EGL","value":"221186","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/Heaven31415/light_glfw/GLFW","kind":"module","full_name":"GLFW","name":"GLFW"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"egl?-instance-method","html_id":"egl?-instance-method","name":"egl?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L268","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L268","def":{"name":"egl?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == EGL"}},{"id":"native?-instance-method","html_id":"native?-instance-method","name":"native?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L267","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L267","def":{"name":"native?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Native"}}],"macros":[],"types":[]},{"html_id":"github.com/Heaven31415/light_glfw/GLFW/ContextReleaseBehavior","path":"GLFW/ContextReleaseBehavior.html","kind":"enum","full_name":"GLFW::ContextReleaseBehavior","name":"ContextReleaseBehavior","abstract":false,"superclass":null,"ancestors":[{"html_id":"github.com/Heaven31415/light_glfw/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"github.com/Heaven31415/light_glfw/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/Heaven31415/light_glfw/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/Heaven31415/light_glfw/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"enums.cr","line_number":260,"url":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr"}],"repository_name":"github.com/Heaven31415/light_glfw","program":false,"enum":true,"alias":false,"aliased":"","const":false,"constants":[{"id":"Any","name":"Any","value":"0","doc":null,"summary":null},{"id":"Flush","name":"Flush","value":"217089","doc":null,"summary":null},{"id":"None","name":"None","value":"217090","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/Heaven31415/light_glfw/GLFW","kind":"module","full_name":"GLFW","name":"GLFW"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"any?-instance-method","html_id":"any?-instance-method","name":"any?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L261","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L261","def":{"name":"any?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Any"}},{"id":"flush?-instance-method","html_id":"flush?-instance-method","name":"flush?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L262","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L262","def":{"name":"flush?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Flush"}},{"id":"none?-instance-method","html_id":"none?-instance-method","name":"none?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L263","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L263","def":{"name":"none?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == None"}}],"macros":[],"types":[]},{"html_id":"github.com/Heaven31415/light_glfw/GLFW/ContextRobustness","path":"GLFW/ContextRobustness.html","kind":"enum","full_name":"GLFW::ContextRobustness","name":"ContextRobustness","abstract":false,"superclass":null,"ancestors":[{"html_id":"github.com/Heaven31415/light_glfw/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"github.com/Heaven31415/light_glfw/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/Heaven31415/light_glfw/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/Heaven31415/light_glfw/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"enums.cr","line_number":236,"url":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr"}],"repository_name":"github.com/Heaven31415/light_glfw","program":false,"enum":true,"alias":false,"aliased":"","const":false,"constants":[{"id":"None","name":"None","value":"0","doc":null,"summary":null},{"id":"NoResetNotification","name":"NoResetNotification","value":"200705","doc":null,"summary":null},{"id":"LoseContextOnReset","name":"LoseContextOnReset","value":"200706","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/Heaven31415/light_glfw/GLFW","kind":"module","full_name":"GLFW","name":"GLFW"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"lose_context_on_reset?-instance-method","html_id":"lose_context_on_reset?-instance-method","name":"lose_context_on_reset?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L239","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L239","def":{"name":"lose_context_on_reset?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == LoseContextOnReset"}},{"id":"no_reset_notification?-instance-method","html_id":"no_reset_notification?-instance-method","name":"no_reset_notification?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L238","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L238","def":{"name":"no_reset_notification?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == NoResetNotification"}},{"id":"none?-instance-method","html_id":"none?-instance-method","name":"none?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L237","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L237","def":{"name":"none?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == None"}}],"macros":[],"types":[]},{"html_id":"github.com/Heaven31415/light_glfw/GLFW/Cursor","path":"GLFW/Cursor.html","kind":"struct","full_name":"GLFW::Cursor","name":"Cursor","abstract":false,"superclass":{"html_id":"github.com/Heaven31415/light_glfw/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"github.com/Heaven31415/light_glfw/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/Heaven31415/light_glfw/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/Heaven31415/light_glfw/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"input/cursor.cr","line_number":2,"url":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/input/cursor.cr"}],"repository_name":"github.com/Heaven31415/light_glfw","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/Heaven31415/light_glfw/GLFW","kind":"module","full_name":"GLFW","name":"GLFW"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"ptr:::Pointer(LibGLFW::Cursor)-instance-method","html_id":"ptr:::Pointer(LibGLFW::Cursor)-instance-method","name":"ptr","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : ::Pointer(LibGLFW::Cursor)","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/input/cursor.cr#L3","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/input/cursor.cr#L3","def":{"name":"ptr","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"::Pointer(LibGLFW::Cursor)","visibility":"Public","body":"@ptr"}},{"id":"to_unsafe:::Pointer(LibGLFW::Cursor)-instance-method","html_id":"to_unsafe:::Pointer(LibGLFW::Cursor)-instance-method","name":"to_unsafe","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : ::Pointer(LibGLFW::Cursor)","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/input/cursor.cr#L11","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/input/cursor.cr#L11","def":{"name":"to_unsafe","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"::Pointer(LibGLFW::Cursor)","visibility":"Public","body":"@ptr"}}],"macros":[],"types":[]},{"html_id":"github.com/Heaven31415/light_glfw/GLFW/CursorInputMode","path":"GLFW/CursorInputMode.html","kind":"enum","full_name":"GLFW::CursorInputMode","name":"CursorInputMode","abstract":false,"superclass":null,"ancestors":[{"html_id":"github.com/Heaven31415/light_glfw/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"github.com/Heaven31415/light_glfw/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/Heaven31415/light_glfw/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/Heaven31415/light_glfw/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"enums.cr","line_number":254,"url":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr"}],"repository_name":"github.com/Heaven31415/light_glfw","program":false,"enum":true,"alias":false,"aliased":"","const":false,"constants":[{"id":"Normal","name":"Normal","value":"212993","doc":null,"summary":null},{"id":"Hidden","name":"Hidden","value":"212994","doc":null,"summary":null},{"id":"Disabled","name":"Disabled","value":"212995","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/Heaven31415/light_glfw/GLFW","kind":"module","full_name":"GLFW","name":"GLFW"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"disabled?-instance-method","html_id":"disabled?-instance-method","name":"disabled?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L257","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L257","def":{"name":"disabled?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Disabled"}},{"id":"hidden?-instance-method","html_id":"hidden?-instance-method","name":"hidden?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L256","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L256","def":{"name":"hidden?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Hidden"}},{"id":"normal?-instance-method","html_id":"normal?-instance-method","name":"normal?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L255","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L255","def":{"name":"normal?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Normal"}}],"macros":[],"types":[]},{"html_id":"github.com/Heaven31415/light_glfw/GLFW/CursorShape","path":"GLFW/CursorShape.html","kind":"enum","full_name":"GLFW::CursorShape","name":"CursorShape","abstract":false,"superclass":null,"ancestors":[{"html_id":"github.com/Heaven31415/light_glfw/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"github.com/Heaven31415/light_glfw/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/Heaven31415/light_glfw/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/Heaven31415/light_glfw/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"enums.cr","line_number":276,"url":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr"}],"repository_name":"github.com/Heaven31415/light_glfw","program":false,"enum":true,"alias":false,"aliased":"","const":false,"constants":[{"id":"Arrow","name":"Arrow","value":"221185","doc":null,"summary":null},{"id":"IBeam","name":"IBeam","value":"221186","doc":null,"summary":null},{"id":"Crosshair","name":"Crosshair","value":"221187","doc":null,"summary":null},{"id":"Hand","name":"Hand","value":"221188","doc":null,"summary":null},{"id":"HResize","name":"HResize","value":"221189","doc":null,"summary":null},{"id":"VResize","name":"VResize","value":"221190","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/Heaven31415/light_glfw/GLFW","kind":"module","full_name":"GLFW","name":"GLFW"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"arrow?-instance-method","html_id":"arrow?-instance-method","name":"arrow?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L277","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L277","def":{"name":"arrow?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Arrow"}},{"id":"crosshair?-instance-method","html_id":"crosshair?-instance-method","name":"crosshair?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L279","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L279","def":{"name":"crosshair?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Crosshair"}},{"id":"h_resize?-instance-method","html_id":"h_resize?-instance-method","name":"h_resize?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L281","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L281","def":{"name":"h_resize?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == HResize"}},{"id":"hand?-instance-method","html_id":"hand?-instance-method","name":"hand?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L280","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L280","def":{"name":"hand?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Hand"}},{"id":"i_beam?-instance-method","html_id":"i_beam?-instance-method","name":"i_beam?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L278","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L278","def":{"name":"i_beam?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == IBeam"}},{"id":"v_resize?-instance-method","html_id":"v_resize?-instance-method","name":"v_resize?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L282","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L282","def":{"name":"v_resize?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == VResize"}}],"macros":[],"types":[]},{"html_id":"github.com/Heaven31415/light_glfw/GLFW/Error","path":"GLFW/Error.html","kind":"enum","full_name":"GLFW::Error","name":"Error","abstract":false,"superclass":null,"ancestors":[{"html_id":"github.com/Heaven31415/light_glfw/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"github.com/Heaven31415/light_glfw/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/Heaven31415/light_glfw/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/Heaven31415/light_glfw/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"enums.cr","line_number":177,"url":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr"}],"repository_name":"github.com/Heaven31415/light_glfw","program":false,"enum":true,"alias":false,"aliased":"","const":false,"constants":[{"id":"NotInitialized","name":"NotInitialized","value":"65537","doc":"GLFW has not been initialized.\n\nThis occurs if a GLFW function was called that must not be called unless the\nlibrary is initialized with `GLFW.init`.","summary":"<p>GLFW has not been initialized.</p>"},{"id":"NoCurrentContext","name":"NoCurrentContext","value":"65538","doc":"No context is current for this thread.\n\nThis occurs if a GLFW function was called that needs and operates on the\ncurrent OpenGL or OpenGL ES context but no context is current on the calling\nthread. Call `GLFW.make_context_current` to change current context.","summary":"<p>No context is current for this thread.</p>"},{"id":"InvalidEnum","name":"InvalidEnum","value":"65539","doc":"One of the arguments to the function had an invalid enum value.\n\nThis occurs if a argument to the function had an invalid enum value, \nfor example calling `GLFW.get_key` with `GLFW::Key::Unknown`.","summary":"<p>One of the arguments to the function had an invalid enum value.</p>"},{"id":"InvalidValue","name":"InvalidValue","value":"65540","doc":"One of the arguments to the function had an invalid value.\n\nThis occurs when a argument to the function had an invalid value, for example\nrequesting a negative gamma value with `GLFW.set_gamma`.","summary":"<p>One of the arguments to the function had an invalid value.</p>"},{"id":"OutOfMemory","name":"OutOfMemory","value":"65541","doc":"A memory allocation failed.","summary":"<p>A memory allocation failed.</p>"},{"id":"ApiUnavailable","name":"ApiUnavailable","value":"65542","doc":"GLFW could not find support for the requested API on the system.","summary":"<p>GLFW could not find support for the requested API on the system.</p>"},{"id":"VersionUnavailable","name":"VersionUnavailable","value":"65543","doc":"The requested OpenGL or OpenGL ES version is not available.","summary":"<p>The requested OpenGL or OpenGL ES version is not available.</p>"},{"id":"PlatformError","name":"PlatformError","value":"65544","doc":"A platform-specific error occurred that does not match any of the\nmore specific categories.","summary":"<p>A platform-specific error occurred that does not match any of the more specific categories.</p>"},{"id":"FormatUnavailable","name":"FormatUnavailable","value":"65545","doc":"The requested format is not supported or available.\n\nIf emitted during window creation, the requested pixel format is not\nsupported. If emitted when querying the clipboard, the contents of \nthe clipboard could not be converted to the requested format.","summary":"<p>The requested format is not supported or available.</p>"},{"id":"NoWindowContext","name":"NoWindowContext","value":"65546","doc":"The specified window does not have an OpenGL or OpenGL ES context.\n\nA window that does not have an OpenGL or OpenGL ES context was passed to\na function that requires it to have one.","summary":"<p>The specified window does not have an OpenGL or OpenGL ES context.</p>"}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/Heaven31415/light_glfw/GLFW","kind":"module","full_name":"GLFW","name":"GLFW"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"api_unavailable?-instance-method","html_id":"api_unavailable?-instance-method","name":"api_unavailable?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L207","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L207","def":{"name":"api_unavailable?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == ApiUnavailable"}},{"id":"format_unavailable?-instance-method","html_id":"format_unavailable?-instance-method","name":"format_unavailable?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L221","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L221","def":{"name":"format_unavailable?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == FormatUnavailable"}},{"id":"invalid_enum?-instance-method","html_id":"invalid_enum?-instance-method","name":"invalid_enum?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L195","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L195","def":{"name":"invalid_enum?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == InvalidEnum"}},{"id":"invalid_value?-instance-method","html_id":"invalid_value?-instance-method","name":"invalid_value?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L201","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L201","def":{"name":"invalid_value?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == InvalidValue"}},{"id":"no_current_context?-instance-method","html_id":"no_current_context?-instance-method","name":"no_current_context?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L189","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L189","def":{"name":"no_current_context?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == NoCurrentContext"}},{"id":"no_window_context?-instance-method","html_id":"no_window_context?-instance-method","name":"no_window_context?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L227","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L227","def":{"name":"no_window_context?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == NoWindowContext"}},{"id":"not_initialized?-instance-method","html_id":"not_initialized?-instance-method","name":"not_initialized?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L182","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L182","def":{"name":"not_initialized?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == NotInitialized"}},{"id":"out_of_memory?-instance-method","html_id":"out_of_memory?-instance-method","name":"out_of_memory?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L204","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L204","def":{"name":"out_of_memory?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == OutOfMemory"}},{"id":"platform_error?-instance-method","html_id":"platform_error?-instance-method","name":"platform_error?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L214","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L214","def":{"name":"platform_error?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == PlatformError"}},{"id":"version_unavailable?-instance-method","html_id":"version_unavailable?-instance-method","name":"version_unavailable?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L210","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L210","def":{"name":"version_unavailable?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == VersionUnavailable"}}],"macros":[],"types":[]},{"html_id":"github.com/Heaven31415/light_glfw/GLFW/Event","path":"GLFW/Event.html","kind":"enum","full_name":"GLFW::Event","name":"Event","abstract":false,"superclass":null,"ancestors":[{"html_id":"github.com/Heaven31415/light_glfw/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"github.com/Heaven31415/light_glfw/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/Heaven31415/light_glfw/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/Heaven31415/light_glfw/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"enums.cr","line_number":271,"url":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr"}],"repository_name":"github.com/Heaven31415/light_glfw","program":false,"enum":true,"alias":false,"aliased":"","const":false,"constants":[{"id":"Connected","name":"Connected","value":"262145","doc":null,"summary":null},{"id":"Disconnected","name":"Disconnected","value":"262146","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/Heaven31415/light_glfw/GLFW","kind":"module","full_name":"GLFW","name":"GLFW"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"connected?-instance-method","html_id":"connected?-instance-method","name":"connected?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L272","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L272","def":{"name":"connected?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Connected"}},{"id":"disconnected?-instance-method","html_id":"disconnected?-instance-method","name":"disconnected?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L273","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L273","def":{"name":"disconnected?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Disconnected"}}],"macros":[],"types":[]},{"html_id":"github.com/Heaven31415/light_glfw/GLFW/GammaRamp","path":"GLFW/GammaRamp.html","kind":"struct","full_name":"GLFW::GammaRamp","name":"GammaRamp","abstract":false,"superclass":{"html_id":"github.com/Heaven31415/light_glfw/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"github.com/Heaven31415/light_glfw/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/Heaven31415/light_glfw/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/Heaven31415/light_glfw/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"monitor/gamma_ramp.cr","line_number":2,"url":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/monitor/gamma_ramp.cr"}],"repository_name":"github.com/Heaven31415/light_glfw","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/Heaven31415/light_glfw/GLFW","kind":"module","full_name":"GLFW","name":"GLFW"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(ptr)-class-method","html_id":"new(ptr)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"ptr","doc":null,"default_value":"","external_name":"ptr","restriction":""}],"args_string":"(ptr)","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/monitor/gamma_ramp.cr#L5","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/monitor/gamma_ramp.cr#L5","def":{"name":"new","args":[{"name":"ptr","doc":null,"default_value":"","external_name":"ptr","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(ptr)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"blue:Slice(UInt16)-instance-method","html_id":"blue:Slice(UInt16)-instance-method","name":"blue","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Slice(UInt16)","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/monitor/gamma_ramp.cr#L20","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/monitor/gamma_ramp.cr#L20","def":{"name":"blue","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Slice(UInt16)","visibility":"Public","body":"Slice(UInt16).new(@ptr.value.blue, @ptr.value.size)"}},{"id":"green:Slice(UInt16)-instance-method","html_id":"green:Slice(UInt16)-instance-method","name":"green","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Slice(UInt16)","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/monitor/gamma_ramp.cr#L16","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/monitor/gamma_ramp.cr#L16","def":{"name":"green","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Slice(UInt16)","visibility":"Public","body":"Slice(UInt16).new(@ptr.value.green, @ptr.value.size)"}},{"id":"ptr:::Pointer(LibGLFW::GammaRamp)-instance-method","html_id":"ptr:::Pointer(LibGLFW::GammaRamp)-instance-method","name":"ptr","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : ::Pointer(LibGLFW::GammaRamp)","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/monitor/gamma_ramp.cr#L3","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/monitor/gamma_ramp.cr#L3","def":{"name":"ptr","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"::Pointer(LibGLFW::GammaRamp)","visibility":"Public","body":"@ptr"}},{"id":"red:Slice(UInt16)-instance-method","html_id":"red:Slice(UInt16)-instance-method","name":"red","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Slice(UInt16)","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/monitor/gamma_ramp.cr#L12","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/monitor/gamma_ramp.cr#L12","def":{"name":"red","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Slice(UInt16)","visibility":"Public","body":"Slice(UInt16).new(@ptr.value.red, @ptr.value.size)"}},{"id":"size:UInt32-instance-method","html_id":"size:UInt32-instance-method","name":"size","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : UInt32","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/monitor/gamma_ramp.cr#L24","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/monitor/gamma_ramp.cr#L24","def":{"name":"size","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"UInt32","visibility":"Public","body":"@ptr.value.size"}},{"id":"to_unsafe:::Pointer(LibGLFW::GammaRamp)-instance-method","html_id":"to_unsafe:::Pointer(LibGLFW::GammaRamp)-instance-method","name":"to_unsafe","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : ::Pointer(LibGLFW::GammaRamp)","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/monitor/gamma_ramp.cr#L8","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/monitor/gamma_ramp.cr#L8","def":{"name":"to_unsafe","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"::Pointer(LibGLFW::GammaRamp)","visibility":"Public","body":"@ptr"}}],"macros":[],"types":[]},{"html_id":"github.com/Heaven31415/light_glfw/GLFW/Image","path":"GLFW/Image.html","kind":"struct","full_name":"GLFW::Image","name":"Image","abstract":false,"superclass":{"html_id":"github.com/Heaven31415/light_glfw/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"github.com/Heaven31415/light_glfw/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/Heaven31415/light_glfw/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/Heaven31415/light_glfw/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"window/image.cr","line_number":2,"url":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/image.cr"}],"repository_name":"github.com/Heaven31415/light_glfw","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/Heaven31415/light_glfw/GLFW","kind":"module","full_name":"GLFW","name":"GLFW"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(width,height,pixels)-class-method","html_id":"new(width,height,pixels)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"width","doc":null,"default_value":"","external_name":"width","restriction":""},{"name":"height","doc":null,"default_value":"","external_name":"height","restriction":""},{"name":"pixels","doc":null,"default_value":"","external_name":"pixels","restriction":""}],"args_string":"(width, height, pixels)","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/image.cr#L7","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/image.cr#L7","def":{"name":"new","args":[{"name":"width","doc":null,"default_value":"","external_name":"width","restriction":""},{"name":"height","doc":null,"default_value":"","external_name":"height","restriction":""},{"name":"pixels","doc":null,"default_value":"","external_name":"pixels","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(width, height, pixels)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"height:Int32-instance-method","html_id":"height:Int32-instance-method","name":"height","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/image.cr#L4","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/image.cr#L4","def":{"name":"height","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@height"}},{"id":"pixels:Pointer(UInt8)-instance-method","html_id":"pixels:Pointer(UInt8)-instance-method","name":"pixels","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Pointer(UInt8)","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/image.cr#L5","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/image.cr#L5","def":{"name":"pixels","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Pointer(UInt8)","visibility":"Public","body":"@pixels"}},{"id":"to_unsafe:::Pointer(LibGLFW::Image)-instance-method","html_id":"to_unsafe:::Pointer(LibGLFW::Image)-instance-method","name":"to_unsafe","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : ::Pointer(LibGLFW::Image)","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/image.cr#L10","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/image.cr#L10","def":{"name":"to_unsafe","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"::Pointer(LibGLFW::Image)","visibility":"Public","body":"image = Pointer(LibGLFW::Image).malloc\nimage.value.width = @width\nimage.value.height = @height\nimage.value.pixels = @pixels\nimage\n"}},{"id":"width:Int32-instance-method","html_id":"width:Int32-instance-method","name":"width","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/image.cr#L3","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/image.cr#L3","def":{"name":"width","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@width"}}],"macros":[],"types":[]},{"html_id":"github.com/Heaven31415/light_glfw/GLFW/InputMode","path":"GLFW/InputMode.html","kind":"enum","full_name":"GLFW::InputMode","name":"InputMode","abstract":false,"superclass":null,"ancestors":[{"html_id":"github.com/Heaven31415/light_glfw/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"github.com/Heaven31415/light_glfw/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/Heaven31415/light_glfw/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/Heaven31415/light_glfw/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"enums.cr","line_number":248,"url":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr"}],"repository_name":"github.com/Heaven31415/light_glfw","program":false,"enum":true,"alias":false,"aliased":"","const":false,"constants":[{"id":"Cursor","name":"Cursor","value":"208897","doc":null,"summary":null},{"id":"StickyKeys","name":"StickyKeys","value":"208898","doc":null,"summary":null},{"id":"StickyMouseButtons","name":"StickyMouseButtons","value":"208899","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/Heaven31415/light_glfw/GLFW","kind":"module","full_name":"GLFW","name":"GLFW"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"cursor?-instance-method","html_id":"cursor?-instance-method","name":"cursor?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L249","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L249","def":{"name":"cursor?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Cursor"}},{"id":"sticky_keys?-instance-method","html_id":"sticky_keys?-instance-method","name":"sticky_keys?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L250","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L250","def":{"name":"sticky_keys?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == StickyKeys"}},{"id":"sticky_mouse_buttons?-instance-method","html_id":"sticky_mouse_buttons?-instance-method","name":"sticky_mouse_buttons?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L251","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L251","def":{"name":"sticky_mouse_buttons?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == StickyMouseButtons"}}],"macros":[],"types":[]},{"html_id":"github.com/Heaven31415/light_glfw/GLFW/Joystick","path":"GLFW/Joystick.html","kind":"enum","full_name":"GLFW::Joystick","name":"Joystick","abstract":false,"superclass":null,"ancestors":[{"html_id":"github.com/Heaven31415/light_glfw/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"github.com/Heaven31415/light_glfw/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/Heaven31415/light_glfw/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/Heaven31415/light_glfw/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"enums.cr","line_number":157,"url":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr"}],"repository_name":"github.com/Heaven31415/light_glfw","program":false,"enum":true,"alias":false,"aliased":"","const":false,"constants":[{"id":"Num1","name":"Num1","value":"0","doc":null,"summary":null},{"id":"Num2","name":"Num2","value":"1","doc":null,"summary":null},{"id":"Num3","name":"Num3","value":"2","doc":null,"summary":null},{"id":"Num4","name":"Num4","value":"3","doc":null,"summary":null},{"id":"Num5","name":"Num5","value":"4","doc":null,"summary":null},{"id":"Num6","name":"Num6","value":"5","doc":null,"summary":null},{"id":"Num7","name":"Num7","value":"6","doc":null,"summary":null},{"id":"Num8","name":"Num8","value":"7","doc":null,"summary":null},{"id":"Num9","name":"Num9","value":"8","doc":null,"summary":null},{"id":"Num10","name":"Num10","value":"9","doc":null,"summary":null},{"id":"Num11","name":"Num11","value":"10","doc":null,"summary":null},{"id":"Num12","name":"Num12","value":"11","doc":null,"summary":null},{"id":"Num13","name":"Num13","value":"12","doc":null,"summary":null},{"id":"Num14","name":"Num14","value":"13","doc":null,"summary":null},{"id":"Num15","name":"Num15","value":"14","doc":null,"summary":null},{"id":"Num16","name":"Num16","value":"15","doc":null,"summary":null},{"id":"Last","name":"Last","value":"15","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/Heaven31415/light_glfw/GLFW","kind":"module","full_name":"GLFW","name":"GLFW"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"last?-instance-method","html_id":"last?-instance-method","name":"last?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L174","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L174","def":{"name":"last?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Last"}},{"id":"num10?-instance-method","html_id":"num10?-instance-method","name":"num10?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L167","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L167","def":{"name":"num10?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Num10"}},{"id":"num11?-instance-method","html_id":"num11?-instance-method","name":"num11?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L168","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L168","def":{"name":"num11?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Num11"}},{"id":"num12?-instance-method","html_id":"num12?-instance-method","name":"num12?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L169","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L169","def":{"name":"num12?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Num12"}},{"id":"num13?-instance-method","html_id":"num13?-instance-method","name":"num13?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L170","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L170","def":{"name":"num13?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Num13"}},{"id":"num14?-instance-method","html_id":"num14?-instance-method","name":"num14?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L171","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L171","def":{"name":"num14?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Num14"}},{"id":"num15?-instance-method","html_id":"num15?-instance-method","name":"num15?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L172","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L172","def":{"name":"num15?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Num15"}},{"id":"num16?-instance-method","html_id":"num16?-instance-method","name":"num16?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L173","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L173","def":{"name":"num16?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Num16"}},{"id":"num1?-instance-method","html_id":"num1?-instance-method","name":"num1?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L158","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L158","def":{"name":"num1?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Num1"}},{"id":"num2?-instance-method","html_id":"num2?-instance-method","name":"num2?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L159","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L159","def":{"name":"num2?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Num2"}},{"id":"num3?-instance-method","html_id":"num3?-instance-method","name":"num3?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L160","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L160","def":{"name":"num3?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Num3"}},{"id":"num4?-instance-method","html_id":"num4?-instance-method","name":"num4?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L161","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L161","def":{"name":"num4?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Num4"}},{"id":"num5?-instance-method","html_id":"num5?-instance-method","name":"num5?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L162","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L162","def":{"name":"num5?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Num5"}},{"id":"num6?-instance-method","html_id":"num6?-instance-method","name":"num6?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L163","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L163","def":{"name":"num6?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Num6"}},{"id":"num7?-instance-method","html_id":"num7?-instance-method","name":"num7?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L164","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L164","def":{"name":"num7?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Num7"}},{"id":"num8?-instance-method","html_id":"num8?-instance-method","name":"num8?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L165","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L165","def":{"name":"num8?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Num8"}},{"id":"num9?-instance-method","html_id":"num9?-instance-method","name":"num9?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L166","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L166","def":{"name":"num9?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Num9"}}],"macros":[],"types":[]},{"html_id":"github.com/Heaven31415/light_glfw/GLFW/Key","path":"GLFW/Key.html","kind":"enum","full_name":"GLFW::Key","name":"Key","abstract":false,"superclass":null,"ancestors":[{"html_id":"github.com/Heaven31415/light_glfw/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"github.com/Heaven31415/light_glfw/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/Heaven31415/light_glfw/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/Heaven31415/light_glfw/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"enums.cr","line_number":8,"url":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr"}],"repository_name":"github.com/Heaven31415/light_glfw","program":false,"enum":true,"alias":false,"aliased":"","const":false,"constants":[{"id":"Unknown","name":"Unknown","value":"-1","doc":null,"summary":null},{"id":"Space","name":"Space","value":"32","doc":null,"summary":null},{"id":"Apostrophe","name":"Apostrophe","value":"39","doc":null,"summary":null},{"id":"Comma","name":"Comma","value":"44","doc":null,"summary":null},{"id":"Minus","name":"Minus","value":"45","doc":null,"summary":null},{"id":"Period","name":"Period","value":"46","doc":null,"summary":null},{"id":"Slash","name":"Slash","value":"47","doc":null,"summary":null},{"id":"Num0","name":"Num0","value":"48","doc":null,"summary":null},{"id":"Num1","name":"Num1","value":"49","doc":null,"summary":null},{"id":"Num2","name":"Num2","value":"50","doc":null,"summary":null},{"id":"Num3","name":"Num3","value":"51","doc":null,"summary":null},{"id":"Num4","name":"Num4","value":"52","doc":null,"summary":null},{"id":"Num5","name":"Num5","value":"53","doc":null,"summary":null},{"id":"Num6","name":"Num6","value":"54","doc":null,"summary":null},{"id":"Num7","name":"Num7","value":"55","doc":null,"summary":null},{"id":"Num8","name":"Num8","value":"56","doc":null,"summary":null},{"id":"Num9","name":"Num9","value":"57","doc":null,"summary":null},{"id":"Semicolon","name":"Semicolon","value":"59","doc":null,"summary":null},{"id":"Equal","name":"Equal","value":"61","doc":null,"summary":null},{"id":"A","name":"A","value":"65","doc":null,"summary":null},{"id":"B","name":"B","value":"66","doc":null,"summary":null},{"id":"C","name":"C","value":"67","doc":null,"summary":null},{"id":"D","name":"D","value":"68","doc":null,"summary":null},{"id":"E","name":"E","value":"69","doc":null,"summary":null},{"id":"F","name":"F","value":"70","doc":null,"summary":null},{"id":"G","name":"G","value":"71","doc":null,"summary":null},{"id":"H","name":"H","value":"72","doc":null,"summary":null},{"id":"I","name":"I","value":"73","doc":null,"summary":null},{"id":"J","name":"J","value":"74","doc":null,"summary":null},{"id":"K","name":"K","value":"75","doc":null,"summary":null},{"id":"L","name":"L","value":"76","doc":null,"summary":null},{"id":"M","name":"M","value":"77","doc":null,"summary":null},{"id":"N","name":"N","value":"78","doc":null,"summary":null},{"id":"O","name":"O","value":"79","doc":null,"summary":null},{"id":"P","name":"P","value":"80","doc":null,"summary":null},{"id":"Q","name":"Q","value":"81","doc":null,"summary":null},{"id":"R","name":"R","value":"82","doc":null,"summary":null},{"id":"S","name":"S","value":"83","doc":null,"summary":null},{"id":"T","name":"T","value":"84","doc":null,"summary":null},{"id":"U","name":"U","value":"85","doc":null,"summary":null},{"id":"V","name":"V","value":"86","doc":null,"summary":null},{"id":"W","name":"W","value":"87","doc":null,"summary":null},{"id":"X","name":"X","value":"88","doc":null,"summary":null},{"id":"Y","name":"Y","value":"89","doc":null,"summary":null},{"id":"Z","name":"Z","value":"90","doc":null,"summary":null},{"id":"LeftBracket","name":"LeftBracket","value":"91","doc":null,"summary":null},{"id":"Backslash","name":"Backslash","value":"92","doc":null,"summary":null},{"id":"RightBracket","name":"RightBracket","value":"93","doc":null,"summary":null},{"id":"GraveAccent","name":"GraveAccent","value":"96","doc":null,"summary":null},{"id":"World1","name":"World1","value":"161","doc":null,"summary":null},{"id":"World2","name":"World2","value":"162","doc":null,"summary":null},{"id":"Escape","name":"Escape","value":"256","doc":null,"summary":null},{"id":"Enter","name":"Enter","value":"257","doc":null,"summary":null},{"id":"Tab","name":"Tab","value":"258","doc":null,"summary":null},{"id":"Backspace","name":"Backspace","value":"259","doc":null,"summary":null},{"id":"Insert","name":"Insert","value":"260","doc":null,"summary":null},{"id":"Delete","name":"Delete","value":"261","doc":null,"summary":null},{"id":"Right","name":"Right","value":"262","doc":null,"summary":null},{"id":"Left","name":"Left","value":"263","doc":null,"summary":null},{"id":"Down","name":"Down","value":"264","doc":null,"summary":null},{"id":"Up","name":"Up","value":"265","doc":null,"summary":null},{"id":"PageUp","name":"PageUp","value":"266","doc":null,"summary":null},{"id":"PageDown","name":"PageDown","value":"267","doc":null,"summary":null},{"id":"Home","name":"Home","value":"268","doc":null,"summary":null},{"id":"End","name":"End","value":"269","doc":null,"summary":null},{"id":"CapsLock","name":"CapsLock","value":"280","doc":null,"summary":null},{"id":"ScrollLock","name":"ScrollLock","value":"281","doc":null,"summary":null},{"id":"NumLock","name":"NumLock","value":"282","doc":null,"summary":null},{"id":"PrintScreen","name":"PrintScreen","value":"283","doc":null,"summary":null},{"id":"Pause","name":"Pause","value":"284","doc":null,"summary":null},{"id":"F1","name":"F1","value":"290","doc":null,"summary":null},{"id":"F2","name":"F2","value":"291","doc":null,"summary":null},{"id":"F3","name":"F3","value":"292","doc":null,"summary":null},{"id":"F4","name":"F4","value":"293","doc":null,"summary":null},{"id":"F5","name":"F5","value":"294","doc":null,"summary":null},{"id":"F6","name":"F6","value":"295","doc":null,"summary":null},{"id":"F7","name":"F7","value":"296","doc":null,"summary":null},{"id":"F8","name":"F8","value":"297","doc":null,"summary":null},{"id":"F9","name":"F9","value":"298","doc":null,"summary":null},{"id":"F10","name":"F10","value":"299","doc":null,"summary":null},{"id":"F11","name":"F11","value":"300","doc":null,"summary":null},{"id":"F12","name":"F12","value":"301","doc":null,"summary":null},{"id":"F13","name":"F13","value":"302","doc":null,"summary":null},{"id":"F14","name":"F14","value":"303","doc":null,"summary":null},{"id":"F15","name":"F15","value":"304","doc":null,"summary":null},{"id":"F16","name":"F16","value":"305","doc":null,"summary":null},{"id":"F17","name":"F17","value":"306","doc":null,"summary":null},{"id":"F18","name":"F18","value":"307","doc":null,"summary":null},{"id":"F19","name":"F19","value":"308","doc":null,"summary":null},{"id":"F20","name":"F20","value":"309","doc":null,"summary":null},{"id":"F21","name":"F21","value":"310","doc":null,"summary":null},{"id":"F22","name":"F22","value":"311","doc":null,"summary":null},{"id":"F23","name":"F23","value":"312","doc":null,"summary":null},{"id":"F24","name":"F24","value":"313","doc":null,"summary":null},{"id":"F25","name":"F25","value":"314","doc":null,"summary":null},{"id":"Pad0","name":"Pad0","value":"320","doc":null,"summary":null},{"id":"Pad1","name":"Pad1","value":"321","doc":null,"summary":null},{"id":"Pad2","name":"Pad2","value":"322","doc":null,"summary":null},{"id":"Pad3","name":"Pad3","value":"323","doc":null,"summary":null},{"id":"Pad4","name":"Pad4","value":"324","doc":null,"summary":null},{"id":"Pad5","name":"Pad5","value":"325","doc":null,"summary":null},{"id":"Pad6","name":"Pad6","value":"326","doc":null,"summary":null},{"id":"Pad7","name":"Pad7","value":"327","doc":null,"summary":null},{"id":"Pad8","name":"Pad8","value":"328","doc":null,"summary":null},{"id":"Pad9","name":"Pad9","value":"329","doc":null,"summary":null},{"id":"PadDecimal","name":"PadDecimal","value":"330","doc":null,"summary":null},{"id":"PadDivide","name":"PadDivide","value":"331","doc":null,"summary":null},{"id":"PadMultiply","name":"PadMultiply","value":"332","doc":null,"summary":null},{"id":"PadSubtract","name":"PadSubtract","value":"333","doc":null,"summary":null},{"id":"PadAdd","name":"PadAdd","value":"334","doc":null,"summary":null},{"id":"PadEnter","name":"PadEnter","value":"335","doc":null,"summary":null},{"id":"PadEqual","name":"PadEqual","value":"336","doc":null,"summary":null},{"id":"LeftShift","name":"LeftShift","value":"340","doc":null,"summary":null},{"id":"LeftControl","name":"LeftControl","value":"341","doc":null,"summary":null},{"id":"LeftAlt","name":"LeftAlt","value":"342","doc":null,"summary":null},{"id":"LeftSuper","name":"LeftSuper","value":"343","doc":null,"summary":null},{"id":"RightShift","name":"RightShift","value":"344","doc":null,"summary":null},{"id":"RightControl","name":"RightControl","value":"345","doc":null,"summary":null},{"id":"RightAlt","name":"RightAlt","value":"346","doc":null,"summary":null},{"id":"RightSuper","name":"RightSuper","value":"347","doc":null,"summary":null},{"id":"Menu","name":"Menu","value":"348","doc":null,"summary":null},{"id":"Last","name":"Last","value":"348","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/Heaven31415/light_glfw/GLFW","kind":"module","full_name":"GLFW","name":"GLFW"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"a?-instance-method","html_id":"a?-instance-method","name":"a?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L28","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L28","def":{"name":"a?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == A"}},{"id":"apostrophe?-instance-method","html_id":"apostrophe?-instance-method","name":"apostrophe?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L11","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L11","def":{"name":"apostrophe?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Apostrophe"}},{"id":"b?-instance-method","html_id":"b?-instance-method","name":"b?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L29","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L29","def":{"name":"b?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == B"}},{"id":"backslash?-instance-method","html_id":"backslash?-instance-method","name":"backslash?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L55","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L55","def":{"name":"backslash?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Backslash"}},{"id":"backspace?-instance-method","html_id":"backspace?-instance-method","name":"backspace?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L64","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L64","def":{"name":"backspace?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Backspace"}},{"id":"c?-instance-method","html_id":"c?-instance-method","name":"c?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L30","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L30","def":{"name":"c?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == C"}},{"id":"caps_lock?-instance-method","html_id":"caps_lock?-instance-method","name":"caps_lock?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L75","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L75","def":{"name":"caps_lock?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == CapsLock"}},{"id":"comma?-instance-method","html_id":"comma?-instance-method","name":"comma?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L12","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L12","def":{"name":"comma?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Comma"}},{"id":"d?-instance-method","html_id":"d?-instance-method","name":"d?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L31","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L31","def":{"name":"d?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == D"}},{"id":"delete?-instance-method","html_id":"delete?-instance-method","name":"delete?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L66","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L66","def":{"name":"delete?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Delete"}},{"id":"down?-instance-method","html_id":"down?-instance-method","name":"down?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L69","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L69","def":{"name":"down?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Down"}},{"id":"e?-instance-method","html_id":"e?-instance-method","name":"e?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L32","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L32","def":{"name":"e?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == E"}},{"id":"end?-instance-method","html_id":"end?-instance-method","name":"end?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L74","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L74","def":{"name":"end?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == End"}},{"id":"enter?-instance-method","html_id":"enter?-instance-method","name":"enter?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L62","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L62","def":{"name":"enter?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Enter"}},{"id":"equal?-instance-method","html_id":"equal?-instance-method","name":"equal?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L27","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L27","def":{"name":"equal?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Equal"}},{"id":"escape?-instance-method","html_id":"escape?-instance-method","name":"escape?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L61","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L61","def":{"name":"escape?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Escape"}},{"id":"f10?-instance-method","html_id":"f10?-instance-method","name":"f10?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L89","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L89","def":{"name":"f10?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == F10"}},{"id":"f11?-instance-method","html_id":"f11?-instance-method","name":"f11?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L90","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L90","def":{"name":"f11?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == F11"}},{"id":"f12?-instance-method","html_id":"f12?-instance-method","name":"f12?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L91","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L91","def":{"name":"f12?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == F12"}},{"id":"f13?-instance-method","html_id":"f13?-instance-method","name":"f13?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L92","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L92","def":{"name":"f13?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == F13"}},{"id":"f14?-instance-method","html_id":"f14?-instance-method","name":"f14?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L93","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L93","def":{"name":"f14?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == F14"}},{"id":"f15?-instance-method","html_id":"f15?-instance-method","name":"f15?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L94","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L94","def":{"name":"f15?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == F15"}},{"id":"f16?-instance-method","html_id":"f16?-instance-method","name":"f16?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L95","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L95","def":{"name":"f16?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == F16"}},{"id":"f17?-instance-method","html_id":"f17?-instance-method","name":"f17?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L96","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L96","def":{"name":"f17?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == F17"}},{"id":"f18?-instance-method","html_id":"f18?-instance-method","name":"f18?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L97","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L97","def":{"name":"f18?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == F18"}},{"id":"f19?-instance-method","html_id":"f19?-instance-method","name":"f19?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L98","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L98","def":{"name":"f19?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == F19"}},{"id":"f1?-instance-method","html_id":"f1?-instance-method","name":"f1?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L80","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L80","def":{"name":"f1?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == F1"}},{"id":"f20?-instance-method","html_id":"f20?-instance-method","name":"f20?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L99","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L99","def":{"name":"f20?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == F20"}},{"id":"f21?-instance-method","html_id":"f21?-instance-method","name":"f21?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L100","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L100","def":{"name":"f21?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == F21"}},{"id":"f22?-instance-method","html_id":"f22?-instance-method","name":"f22?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L101","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L101","def":{"name":"f22?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == F22"}},{"id":"f23?-instance-method","html_id":"f23?-instance-method","name":"f23?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L102","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L102","def":{"name":"f23?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == F23"}},{"id":"f24?-instance-method","html_id":"f24?-instance-method","name":"f24?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L103","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L103","def":{"name":"f24?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == F24"}},{"id":"f25?-instance-method","html_id":"f25?-instance-method","name":"f25?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L104","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L104","def":{"name":"f25?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == F25"}},{"id":"f2?-instance-method","html_id":"f2?-instance-method","name":"f2?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L81","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L81","def":{"name":"f2?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == F2"}},{"id":"f3?-instance-method","html_id":"f3?-instance-method","name":"f3?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L82","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L82","def":{"name":"f3?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == F3"}},{"id":"f4?-instance-method","html_id":"f4?-instance-method","name":"f4?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L83","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L83","def":{"name":"f4?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == F4"}},{"id":"f5?-instance-method","html_id":"f5?-instance-method","name":"f5?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L84","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L84","def":{"name":"f5?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == F5"}},{"id":"f6?-instance-method","html_id":"f6?-instance-method","name":"f6?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L85","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L85","def":{"name":"f6?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == F6"}},{"id":"f7?-instance-method","html_id":"f7?-instance-method","name":"f7?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L86","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L86","def":{"name":"f7?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == F7"}},{"id":"f8?-instance-method","html_id":"f8?-instance-method","name":"f8?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L87","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L87","def":{"name":"f8?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == F8"}},{"id":"f9?-instance-method","html_id":"f9?-instance-method","name":"f9?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L88","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L88","def":{"name":"f9?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == F9"}},{"id":"f?-instance-method","html_id":"f?-instance-method","name":"f?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L33","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L33","def":{"name":"f?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == F"}},{"id":"g?-instance-method","html_id":"g?-instance-method","name":"g?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L34","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L34","def":{"name":"g?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == G"}},{"id":"grave_accent?-instance-method","html_id":"grave_accent?-instance-method","name":"grave_accent?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L57","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L57","def":{"name":"grave_accent?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == GraveAccent"}},{"id":"h?-instance-method","html_id":"h?-instance-method","name":"h?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L35","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L35","def":{"name":"h?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == H"}},{"id":"home?-instance-method","html_id":"home?-instance-method","name":"home?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L73","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L73","def":{"name":"home?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Home"}},{"id":"i?-instance-method","html_id":"i?-instance-method","name":"i?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L36","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L36","def":{"name":"i?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == I"}},{"id":"insert?-instance-method","html_id":"insert?-instance-method","name":"insert?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L65","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L65","def":{"name":"insert?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Insert"}},{"id":"j?-instance-method","html_id":"j?-instance-method","name":"j?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L37","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L37","def":{"name":"j?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == J"}},{"id":"k?-instance-method","html_id":"k?-instance-method","name":"k?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L38","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L38","def":{"name":"k?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == K"}},{"id":"l?-instance-method","html_id":"l?-instance-method","name":"l?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L39","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L39","def":{"name":"l?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == L"}},{"id":"last?-instance-method","html_id":"last?-instance-method","name":"last?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L131","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L131","def":{"name":"last?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Last"}},{"id":"left?-instance-method","html_id":"left?-instance-method","name":"left?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L68","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L68","def":{"name":"left?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Left"}},{"id":"left_alt?-instance-method","html_id":"left_alt?-instance-method","name":"left_alt?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L124","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L124","def":{"name":"left_alt?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == LeftAlt"}},{"id":"left_bracket?-instance-method","html_id":"left_bracket?-instance-method","name":"left_bracket?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L54","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L54","def":{"name":"left_bracket?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == LeftBracket"}},{"id":"left_control?-instance-method","html_id":"left_control?-instance-method","name":"left_control?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L123","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L123","def":{"name":"left_control?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == LeftControl"}},{"id":"left_shift?-instance-method","html_id":"left_shift?-instance-method","name":"left_shift?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L122","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L122","def":{"name":"left_shift?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == LeftShift"}},{"id":"left_super?-instance-method","html_id":"left_super?-instance-method","name":"left_super?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L125","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L125","def":{"name":"left_super?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == LeftSuper"}},{"id":"m?-instance-method","html_id":"m?-instance-method","name":"m?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L40","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L40","def":{"name":"m?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == M"}},{"id":"menu?-instance-method","html_id":"menu?-instance-method","name":"menu?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L130","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L130","def":{"name":"menu?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Menu"}},{"id":"minus?-instance-method","html_id":"minus?-instance-method","name":"minus?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L13","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L13","def":{"name":"minus?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Minus"}},{"id":"n?-instance-method","html_id":"n?-instance-method","name":"n?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L41","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L41","def":{"name":"n?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == N"}},{"id":"num0?-instance-method","html_id":"num0?-instance-method","name":"num0?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L16","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L16","def":{"name":"num0?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Num0"}},{"id":"num1?-instance-method","html_id":"num1?-instance-method","name":"num1?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L17","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L17","def":{"name":"num1?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Num1"}},{"id":"num2?-instance-method","html_id":"num2?-instance-method","name":"num2?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L18","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L18","def":{"name":"num2?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Num2"}},{"id":"num3?-instance-method","html_id":"num3?-instance-method","name":"num3?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L19","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L19","def":{"name":"num3?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Num3"}},{"id":"num4?-instance-method","html_id":"num4?-instance-method","name":"num4?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L20","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L20","def":{"name":"num4?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Num4"}},{"id":"num5?-instance-method","html_id":"num5?-instance-method","name":"num5?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L21","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L21","def":{"name":"num5?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Num5"}},{"id":"num6?-instance-method","html_id":"num6?-instance-method","name":"num6?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L22","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L22","def":{"name":"num6?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Num6"}},{"id":"num7?-instance-method","html_id":"num7?-instance-method","name":"num7?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L23","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L23","def":{"name":"num7?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Num7"}},{"id":"num8?-instance-method","html_id":"num8?-instance-method","name":"num8?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L24","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L24","def":{"name":"num8?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Num8"}},{"id":"num9?-instance-method","html_id":"num9?-instance-method","name":"num9?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L25","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L25","def":{"name":"num9?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Num9"}},{"id":"num_lock?-instance-method","html_id":"num_lock?-instance-method","name":"num_lock?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L77","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L77","def":{"name":"num_lock?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == NumLock"}},{"id":"o?-instance-method","html_id":"o?-instance-method","name":"o?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L42","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L42","def":{"name":"o?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == O"}},{"id":"p?-instance-method","html_id":"p?-instance-method","name":"p?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L43","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L43","def":{"name":"p?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == P"}},{"id":"pad0?-instance-method","html_id":"pad0?-instance-method","name":"pad0?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L105","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L105","def":{"name":"pad0?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Pad0"}},{"id":"pad1?-instance-method","html_id":"pad1?-instance-method","name":"pad1?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L106","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L106","def":{"name":"pad1?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Pad1"}},{"id":"pad2?-instance-method","html_id":"pad2?-instance-method","name":"pad2?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L107","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L107","def":{"name":"pad2?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Pad2"}},{"id":"pad3?-instance-method","html_id":"pad3?-instance-method","name":"pad3?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L108","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L108","def":{"name":"pad3?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Pad3"}},{"id":"pad4?-instance-method","html_id":"pad4?-instance-method","name":"pad4?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L109","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L109","def":{"name":"pad4?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Pad4"}},{"id":"pad5?-instance-method","html_id":"pad5?-instance-method","name":"pad5?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L110","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L110","def":{"name":"pad5?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Pad5"}},{"id":"pad6?-instance-method","html_id":"pad6?-instance-method","name":"pad6?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L111","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L111","def":{"name":"pad6?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Pad6"}},{"id":"pad7?-instance-method","html_id":"pad7?-instance-method","name":"pad7?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L112","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L112","def":{"name":"pad7?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Pad7"}},{"id":"pad8?-instance-method","html_id":"pad8?-instance-method","name":"pad8?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L113","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L113","def":{"name":"pad8?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Pad8"}},{"id":"pad9?-instance-method","html_id":"pad9?-instance-method","name":"pad9?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L114","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L114","def":{"name":"pad9?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Pad9"}},{"id":"pad_add?-instance-method","html_id":"pad_add?-instance-method","name":"pad_add?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L119","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L119","def":{"name":"pad_add?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == PadAdd"}},{"id":"pad_decimal?-instance-method","html_id":"pad_decimal?-instance-method","name":"pad_decimal?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L115","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L115","def":{"name":"pad_decimal?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == PadDecimal"}},{"id":"pad_divide?-instance-method","html_id":"pad_divide?-instance-method","name":"pad_divide?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L116","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L116","def":{"name":"pad_divide?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == PadDivide"}},{"id":"pad_enter?-instance-method","html_id":"pad_enter?-instance-method","name":"pad_enter?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L120","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L120","def":{"name":"pad_enter?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == PadEnter"}},{"id":"pad_equal?-instance-method","html_id":"pad_equal?-instance-method","name":"pad_equal?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L121","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L121","def":{"name":"pad_equal?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == PadEqual"}},{"id":"pad_multiply?-instance-method","html_id":"pad_multiply?-instance-method","name":"pad_multiply?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L117","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L117","def":{"name":"pad_multiply?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == PadMultiply"}},{"id":"pad_subtract?-instance-method","html_id":"pad_subtract?-instance-method","name":"pad_subtract?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L118","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L118","def":{"name":"pad_subtract?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == PadSubtract"}},{"id":"page_down?-instance-method","html_id":"page_down?-instance-method","name":"page_down?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L72","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L72","def":{"name":"page_down?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == PageDown"}},{"id":"page_up?-instance-method","html_id":"page_up?-instance-method","name":"page_up?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L71","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L71","def":{"name":"page_up?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == PageUp"}},{"id":"pause?-instance-method","html_id":"pause?-instance-method","name":"pause?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L79","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L79","def":{"name":"pause?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Pause"}},{"id":"period?-instance-method","html_id":"period?-instance-method","name":"period?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L14","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L14","def":{"name":"period?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Period"}},{"id":"print_screen?-instance-method","html_id":"print_screen?-instance-method","name":"print_screen?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L78","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L78","def":{"name":"print_screen?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == PrintScreen"}},{"id":"q?-instance-method","html_id":"q?-instance-method","name":"q?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L44","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L44","def":{"name":"q?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Q"}},{"id":"r?-instance-method","html_id":"r?-instance-method","name":"r?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L45","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L45","def":{"name":"r?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == R"}},{"id":"right?-instance-method","html_id":"right?-instance-method","name":"right?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L67","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L67","def":{"name":"right?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Right"}},{"id":"right_alt?-instance-method","html_id":"right_alt?-instance-method","name":"right_alt?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L128","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L128","def":{"name":"right_alt?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == RightAlt"}},{"id":"right_bracket?-instance-method","html_id":"right_bracket?-instance-method","name":"right_bracket?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L56","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L56","def":{"name":"right_bracket?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == RightBracket"}},{"id":"right_control?-instance-method","html_id":"right_control?-instance-method","name":"right_control?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L127","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L127","def":{"name":"right_control?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == RightControl"}},{"id":"right_shift?-instance-method","html_id":"right_shift?-instance-method","name":"right_shift?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L126","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L126","def":{"name":"right_shift?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == RightShift"}},{"id":"right_super?-instance-method","html_id":"right_super?-instance-method","name":"right_super?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L129","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L129","def":{"name":"right_super?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == RightSuper"}},{"id":"s?-instance-method","html_id":"s?-instance-method","name":"s?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L46","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L46","def":{"name":"s?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == S"}},{"id":"scroll_lock?-instance-method","html_id":"scroll_lock?-instance-method","name":"scroll_lock?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L76","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L76","def":{"name":"scroll_lock?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == ScrollLock"}},{"id":"semicolon?-instance-method","html_id":"semicolon?-instance-method","name":"semicolon?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L26","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L26","def":{"name":"semicolon?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Semicolon"}},{"id":"slash?-instance-method","html_id":"slash?-instance-method","name":"slash?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L15","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L15","def":{"name":"slash?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Slash"}},{"id":"space?-instance-method","html_id":"space?-instance-method","name":"space?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L10","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L10","def":{"name":"space?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Space"}},{"id":"t?-instance-method","html_id":"t?-instance-method","name":"t?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L47","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L47","def":{"name":"t?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == T"}},{"id":"tab?-instance-method","html_id":"tab?-instance-method","name":"tab?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L63","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L63","def":{"name":"tab?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Tab"}},{"id":"u?-instance-method","html_id":"u?-instance-method","name":"u?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L48","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L48","def":{"name":"u?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == U"}},{"id":"unknown?-instance-method","html_id":"unknown?-instance-method","name":"unknown?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L9","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L9","def":{"name":"unknown?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Unknown"}},{"id":"up?-instance-method","html_id":"up?-instance-method","name":"up?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L70","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L70","def":{"name":"up?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Up"}},{"id":"v?-instance-method","html_id":"v?-instance-method","name":"v?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L49","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L49","def":{"name":"v?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == V"}},{"id":"w?-instance-method","html_id":"w?-instance-method","name":"w?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L50","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L50","def":{"name":"w?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == W"}},{"id":"world1?-instance-method","html_id":"world1?-instance-method","name":"world1?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L58","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L58","def":{"name":"world1?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == World1"}},{"id":"world2?-instance-method","html_id":"world2?-instance-method","name":"world2?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L59","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L59","def":{"name":"world2?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == World2"}},{"id":"x?-instance-method","html_id":"x?-instance-method","name":"x?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L51","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L51","def":{"name":"x?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == X"}},{"id":"y?-instance-method","html_id":"y?-instance-method","name":"y?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L52","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L52","def":{"name":"y?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Y"}},{"id":"z?-instance-method","html_id":"z?-instance-method","name":"z?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L53","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L53","def":{"name":"z?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Z"}}],"macros":[],"types":[]},{"html_id":"github.com/Heaven31415/light_glfw/GLFW/Mod","path":"GLFW/Mod.html","kind":"enum","full_name":"GLFW::Mod","name":"Mod","abstract":false,"superclass":null,"ancestors":[{"html_id":"github.com/Heaven31415/light_glfw/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"github.com/Heaven31415/light_glfw/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/Heaven31415/light_glfw/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/Heaven31415/light_glfw/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"enums.cr","line_number":135,"url":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr"}],"repository_name":"github.com/Heaven31415/light_glfw","program":false,"enum":true,"alias":false,"aliased":"","const":false,"constants":[{"id":"Shift","name":"Shift","value":"1","doc":null,"summary":null},{"id":"Control","name":"Control","value":"2","doc":null,"summary":null},{"id":"Alt","name":"Alt","value":"4","doc":null,"summary":null},{"id":"Super","name":"Super","value":"8","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/Heaven31415/light_glfw/GLFW","kind":"module","full_name":"GLFW","name":"GLFW"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"alt?-instance-method","html_id":"alt?-instance-method","name":"alt?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L138","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L138","def":{"name":"alt?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.includes?(Alt)"}},{"id":"control?-instance-method","html_id":"control?-instance-method","name":"control?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L137","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L137","def":{"name":"control?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.includes?(Control)"}},{"id":"none?-instance-method","html_id":"none?-instance-method","name":"none?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L135","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L135","def":{"name":"none?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"value == 0"}},{"id":"shift?-instance-method","html_id":"shift?-instance-method","name":"shift?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L136","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L136","def":{"name":"shift?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.includes?(Shift)"}},{"id":"super?-instance-method","html_id":"super?-instance-method","name":"super?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L139","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L139","def":{"name":"super?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.includes?(Super)"}}],"macros":[],"types":[]},{"html_id":"github.com/Heaven31415/light_glfw/GLFW/Monitor","path":"GLFW/Monitor.html","kind":"struct","full_name":"GLFW::Monitor","name":"Monitor","abstract":false,"superclass":{"html_id":"github.com/Heaven31415/light_glfw/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"github.com/Heaven31415/light_glfw/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/Heaven31415/light_glfw/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/Heaven31415/light_glfw/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"monitor/monitor.cr","line_number":2,"url":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/monitor/monitor.cr"}],"repository_name":"github.com/Heaven31415/light_glfw","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/Heaven31415/light_glfw/GLFW","kind":"module","full_name":"GLFW","name":"GLFW"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"inspect(io:IO)-instance-method","html_id":"inspect(io:IO)-instance-method","name":"inspect","doc":null,"summary":null,"abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"args_string":"(io : IO)","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/monitor/monitor.cr#L19","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/monitor/monitor.cr#L19","def":{"name":"inspect","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"name = GLFW.get_monitor_name(self)\nsize = GLFW.get_monitor_physical_size(self)\npos = GLFW.get_monitor_pos(self)\n(((((((((((io << name) << \" {width: \") << size[:width]) << \"mm\") << \" height: \") << size[:height]) << \"mm}\") << \" {x: \") << pos[:x]) << \" y: \") << pos[:y]) << \"}\"\n"}},{"id":"ptr:::Pointer(LibGLFW::Monitor)-instance-method","html_id":"ptr:::Pointer(LibGLFW::Monitor)-instance-method","name":"ptr","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : ::Pointer(LibGLFW::Monitor)","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/monitor/monitor.cr#L3","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/monitor/monitor.cr#L3","def":{"name":"ptr","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"::Pointer(LibGLFW::Monitor)","visibility":"Public","body":"@ptr"}},{"id":"to_s(io:IO)-instance-method","html_id":"to_s(io:IO)-instance-method","name":"to_s","doc":null,"summary":null,"abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"args_string":"(io : IO)","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/monitor/monitor.cr#L15","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/monitor/monitor.cr#L15","def":{"name":"to_s","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"io << (GLFW.get_monitor_name(self))"}},{"id":"to_unsafe:::Pointer(LibGLFW::Monitor)-instance-method","html_id":"to_unsafe:::Pointer(LibGLFW::Monitor)-instance-method","name":"to_unsafe","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : ::Pointer(LibGLFW::Monitor)","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/monitor/monitor.cr#L11","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/monitor/monitor.cr#L11","def":{"name":"to_unsafe","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"::Pointer(LibGLFW::Monitor)","visibility":"Public","body":"@ptr"}}],"macros":[],"types":[]},{"html_id":"github.com/Heaven31415/light_glfw/GLFW/MouseButton","path":"GLFW/MouseButton.html","kind":"enum","full_name":"GLFW::MouseButton","name":"MouseButton","abstract":false,"superclass":null,"ancestors":[{"html_id":"github.com/Heaven31415/light_glfw/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"github.com/Heaven31415/light_glfw/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/Heaven31415/light_glfw/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/Heaven31415/light_glfw/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"enums.cr","line_number":142,"url":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr"}],"repository_name":"github.com/Heaven31415/light_glfw","program":false,"enum":true,"alias":false,"aliased":"","const":false,"constants":[{"id":"Left","name":"Left","value":"0","doc":null,"summary":null},{"id":"Right","name":"Right","value":"1","doc":null,"summary":null},{"id":"Middle","name":"Middle","value":"2","doc":null,"summary":null},{"id":"Num1","name":"Num1","value":"0","doc":null,"summary":null},{"id":"Num2","name":"Num2","value":"1","doc":null,"summary":null},{"id":"Num3","name":"Num3","value":"2","doc":null,"summary":null},{"id":"Num4","name":"Num4","value":"3","doc":null,"summary":null},{"id":"Num5","name":"Num5","value":"4","doc":null,"summary":null},{"id":"Num6","name":"Num6","value":"5","doc":null,"summary":null},{"id":"Num7","name":"Num7","value":"6","doc":null,"summary":null},{"id":"Num8","name":"Num8","value":"7","doc":null,"summary":null},{"id":"Last","name":"Last","value":"7","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/Heaven31415/light_glfw/GLFW","kind":"module","full_name":"GLFW","name":"GLFW"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"last?-instance-method","html_id":"last?-instance-method","name":"last?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L154","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L154","def":{"name":"last?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Last"}},{"id":"left?-instance-method","html_id":"left?-instance-method","name":"left?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L143","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L143","def":{"name":"left?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Left"}},{"id":"middle?-instance-method","html_id":"middle?-instance-method","name":"middle?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L145","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L145","def":{"name":"middle?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Middle"}},{"id":"num1?-instance-method","html_id":"num1?-instance-method","name":"num1?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L146","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L146","def":{"name":"num1?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Num1"}},{"id":"num2?-instance-method","html_id":"num2?-instance-method","name":"num2?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L147","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L147","def":{"name":"num2?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Num2"}},{"id":"num3?-instance-method","html_id":"num3?-instance-method","name":"num3?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L148","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L148","def":{"name":"num3?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Num3"}},{"id":"num4?-instance-method","html_id":"num4?-instance-method","name":"num4?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L149","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L149","def":{"name":"num4?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Num4"}},{"id":"num5?-instance-method","html_id":"num5?-instance-method","name":"num5?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L150","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L150","def":{"name":"num5?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Num5"}},{"id":"num6?-instance-method","html_id":"num6?-instance-method","name":"num6?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L151","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L151","def":{"name":"num6?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Num6"}},{"id":"num7?-instance-method","html_id":"num7?-instance-method","name":"num7?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L152","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L152","def":{"name":"num7?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Num7"}},{"id":"num8?-instance-method","html_id":"num8?-instance-method","name":"num8?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L153","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L153","def":{"name":"num8?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Num8"}},{"id":"right?-instance-method","html_id":"right?-instance-method","name":"right?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L144","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L144","def":{"name":"right?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Right"}}],"macros":[],"types":[]},{"html_id":"github.com/Heaven31415/light_glfw/GLFW/OpenGLProfile","path":"GLFW/OpenGLProfile.html","kind":"enum","full_name":"GLFW::OpenGLProfile","name":"OpenGLProfile","abstract":false,"superclass":null,"ancestors":[{"html_id":"github.com/Heaven31415/light_glfw/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"github.com/Heaven31415/light_glfw/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/Heaven31415/light_glfw/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/Heaven31415/light_glfw/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"enums.cr","line_number":242,"url":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr"}],"repository_name":"github.com/Heaven31415/light_glfw","program":false,"enum":true,"alias":false,"aliased":"","const":false,"constants":[{"id":"Any","name":"Any","value":"0","doc":null,"summary":null},{"id":"Core","name":"Core","value":"204801","doc":null,"summary":null},{"id":"Compat","name":"Compat","value":"204802","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/Heaven31415/light_glfw/GLFW","kind":"module","full_name":"GLFW","name":"GLFW"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"any?-instance-method","html_id":"any?-instance-method","name":"any?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L243","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L243","def":{"name":"any?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Any"}},{"id":"compat?-instance-method","html_id":"compat?-instance-method","name":"compat?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L245","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L245","def":{"name":"compat?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Compat"}},{"id":"core?-instance-method","html_id":"core?-instance-method","name":"core?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L244","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/enums.cr#L244","def":{"name":"core?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Core"}}],"macros":[],"types":[]},{"html_id":"github.com/Heaven31415/light_glfw/GLFW/VideoMode","path":"GLFW/VideoMode.html","kind":"struct","full_name":"GLFW::VideoMode","name":"VideoMode","abstract":false,"superclass":{"html_id":"github.com/Heaven31415/light_glfw/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"github.com/Heaven31415/light_glfw/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/Heaven31415/light_glfw/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/Heaven31415/light_glfw/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"monitor/video_mode.cr","line_number":2,"url":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/monitor/video_mode.cr"}],"repository_name":"github.com/Heaven31415/light_glfw","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/Heaven31415/light_glfw/GLFW","kind":"module","full_name":"GLFW","name":"GLFW"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"blue_bits:Int32-instance-method","html_id":"blue_bits:Int32-instance-method","name":"blue_bits","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/monitor/video_mode.cr#L27","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/monitor/video_mode.cr#L27","def":{"name":"blue_bits","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@ptr.value.blue_bits"}},{"id":"green_bits:Int32-instance-method","html_id":"green_bits:Int32-instance-method","name":"green_bits","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/monitor/video_mode.cr#L23","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/monitor/video_mode.cr#L23","def":{"name":"green_bits","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@ptr.value.green_bits"}},{"id":"height:Int32-instance-method","html_id":"height:Int32-instance-method","name":"height","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/monitor/video_mode.cr#L15","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/monitor/video_mode.cr#L15","def":{"name":"height","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@ptr.value.height"}},{"id":"inspect(io:IO)-instance-method","html_id":"inspect(io:IO)-instance-method","name":"inspect","doc":null,"summary":null,"abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"args_string":"(io : IO)","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/monitor/video_mode.cr#L47","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/monitor/video_mode.cr#L47","def":{"name":"inspect","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"width = @ptr.value.width\nheight = @ptr.value.height\nred_bits = @ptr.value.red_bits\ngreen_bits = @ptr.value.green_bits\nblue_bits = @ptr.value.blue_bits\nrefresh_rate = @ptr.value.refresh_rate\n(((((((((((io << width) << 'x') << height) << \" {red_bits: \") << red_bits) << \" green_bits: \") << blue_bits) << \" blue_bits: \") << blue_bits) << \"} refresh_rate: \") << refresh_rate) << \"Hz\"\n"}},{"id":"ptr:::Pointer(LibGLFW::VideoMode)-instance-method","html_id":"ptr:::Pointer(LibGLFW::VideoMode)-instance-method","name":"ptr","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : ::Pointer(LibGLFW::VideoMode)","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/monitor/video_mode.cr#L3","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/monitor/video_mode.cr#L3","def":{"name":"ptr","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"::Pointer(LibGLFW::VideoMode)","visibility":"Public","body":"@ptr"}},{"id":"red_bits:Int32-instance-method","html_id":"red_bits:Int32-instance-method","name":"red_bits","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/monitor/video_mode.cr#L19","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/monitor/video_mode.cr#L19","def":{"name":"red_bits","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@ptr.value.red_bits"}},{"id":"refresh_rate:Int32-instance-method","html_id":"refresh_rate:Int32-instance-method","name":"refresh_rate","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/monitor/video_mode.cr#L31","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/monitor/video_mode.cr#L31","def":{"name":"refresh_rate","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@ptr.value.refresh_rate"}},{"id":"to_s(io:IO)-instance-method","html_id":"to_s(io:IO)-instance-method","name":"to_s","doc":null,"summary":null,"abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"args_string":"(io : IO)","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/monitor/video_mode.cr#L39","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/monitor/video_mode.cr#L39","def":{"name":"to_s","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"width = @ptr.value.width\nheight = @ptr.value.height\nbpp = (@ptr.value.red_bits + @ptr.value.green_bits) + @ptr.value.blue_bits\n((((io << width) << 'x') << height) << \" bpp: \") << bpp\n"}},{"id":"to_unsafe:::Pointer(LibGLFW::VideoMode)-instance-method","html_id":"to_unsafe:::Pointer(LibGLFW::VideoMode)-instance-method","name":"to_unsafe","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : ::Pointer(LibGLFW::VideoMode)","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/monitor/video_mode.cr#L35","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/monitor/video_mode.cr#L35","def":{"name":"to_unsafe","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"::Pointer(LibGLFW::VideoMode)","visibility":"Public","body":"@ptr"}},{"id":"width:Int32-instance-method","html_id":"width:Int32-instance-method","name":"width","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/monitor/video_mode.cr#L11","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/monitor/video_mode.cr#L11","def":{"name":"width","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@ptr.value.width"}}],"macros":[],"types":[]},{"html_id":"github.com/Heaven31415/light_glfw/GLFW/Window","path":"GLFW/Window.html","kind":"struct","full_name":"GLFW::Window","name":"Window","abstract":false,"superclass":{"html_id":"github.com/Heaven31415/light_glfw/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"github.com/Heaven31415/light_glfw/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/Heaven31415/light_glfw/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/Heaven31415/light_glfw/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"window/window.cr","line_number":6,"url":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr"}],"repository_name":"github.com/Heaven31415/light_glfw","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/Heaven31415/light_glfw/GLFW","kind":"module","full_name":"GLFW","name":"GLFW"},"doc":"A window is a wrapper around the pointer to `LibGLFW::Window`. \nYou cannot create it yourself. In order to create it, \nyou need to call `GLFW.create_window`. You cannot copy it. \nIf you need another window just call `GLFW.create_window` once again.","summary":"<p>A window is a wrapper around the pointer to <code>LibGLFW::Window</code>.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"inspect(io:IO)-instance-method","html_id":"inspect(io:IO)-instance-method","name":"inspect","doc":null,"summary":null,"abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"args_string":"(io : IO)","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L32","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L32","def":{"name":"inspect","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"api = GLFW.get_window_client_api(self)\nmajor = GLFW.get_window_context_version_major(self)\nminor = GLFW.get_window_context_version_minor(self)\nsize = GLFW.get_window_size(self)\npos = GLFW.get_window_pos(self)\ndecorated = GLFW.get_window_decorated(self)\nfloating = GLFW.get_window_floating(self)\nfocused = GLFW.get_window_focused(self)\niconified = GLFW.get_window_iconified(self)\nmaximized = GLFW.get_window_maximized(self)\nresizable = GLFW.get_window_resizable(self)\nvisible = GLFW.get_window_visible(self)\n((((((((((((((((((((((((((((((((io << api) << \" \") << major) << \".\") << minor) << \" {width: \") << size[:width]) << \" height: \") << size[:height]) << \"}\") << \" {x: \") << pos[:x]) << \" y: \") << pos[:y]) << \"}\") << \"\\n\") << \"{decorated: \") << decorated) << \" floating: \") << floating) << \" focused: \") << focused) << \"\\n\") << \"iconified: \") << iconified) << \" maximized: \") << maximized) << \" resizable: \") << resizable) << \"\\n\") << \"visible: \") << visible) << \"}\"\n"}},{"id":"ptr:::Pointer(LibGLFW::Window)-instance-method","html_id":"ptr:::Pointer(LibGLFW::Window)-instance-method","name":"ptr","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : ::Pointer(LibGLFW::Window)","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L7","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L7","def":{"name":"ptr","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"::Pointer(LibGLFW::Window)","visibility":"Public","body":"@ptr"}},{"id":"to_s(io:IO)-instance-method","html_id":"to_s(io:IO)-instance-method","name":"to_s","doc":null,"summary":null,"abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"args_string":"(io : IO)","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L19","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L19","def":{"name":"to_s","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"api = GLFW.get_window_client_api(self)\nmajor = GLFW.get_window_context_version_major(self)\nminor = GLFW.get_window_context_version_minor(self)\nsize = GLFW.get_window_size(self)\npos = GLFW.get_window_pos(self)\n((((((((((((((io << api) << \" \") << major) << \".\") << minor) << \" {width: \") << size[:width]) << \" height: \") << size[:height]) << \"}\") << \" {x: \") << pos[:x]) << \" y: \") << pos[:y]) << \"}\"\n"}},{"id":"to_unsafe:::Pointer(LibGLFW::Window)-instance-method","html_id":"to_unsafe:::Pointer(LibGLFW::Window)-instance-method","name":"to_unsafe","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : ::Pointer(LibGLFW::Window)","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L15","source_link":"https://github.com/Heaven31415/light_glfw/blob/f4767517f71cc27d2e8fe0466b15e3dd8878c5fb/src/window/window.cr#L15","def":{"name":"to_unsafe","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"::Pointer(LibGLFW::Window)","visibility":"Public","body":"@ptr"}}],"macros":[],"types":[]}]}]}}